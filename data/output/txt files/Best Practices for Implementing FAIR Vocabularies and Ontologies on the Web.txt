Introduction
In the last decade, a series of initiatives for open data, transparency and open science have led to the development of a myriad of datasets and linked Knowledge Graphs on the Web. The scientific community has started to acknowledge the need for ontologies to be properly documented, versioned, published and maintained following the Linked Data Principles Our guidelines are aimed at ontology engineers, and therefore the paper is structured according to their ontology development processes: Section 2 describes several design decisions for an ontology URI (naming conventions, versioning, permanent URIs); Section 3 describes how to create a documentation that is easy to reuse and understand by others (minimum metadata, diagrams to include); Section 4 illustrates how to make an ontology accessible and findable in the Web; Section 5 points to existing end-to-end frameworks that support the ontology publication process; and Section 6 concludes our paper. We consider the design and development of an ontology out of the scope of this paper, as it has been covered by methodologies for ontology development (e.g., LOT Accessible Ontology URI Design
Ontologies are digital artifacts, and therefore their URIs should follow the Linked Data Principles, When creating an ontology, it is also important to think carefully about its name, prefix and URI design. Well engineered ontologies are costly to produce, and therefore they should be accessible to other potential users (e.g., by avoiding complex URIs) and easy to differentiate from existing vocabularies.In this section we describe our proposed best practices for designing URIs for ontologies to make them unique, easy to remember, and easy to maintain. We acknowledge that naming conventions may be subjective, but these practices reflect our experience in ontology development over a wide range of domains (smart cities, open science, meteorology, neuroscience, etc.) and therefore provide a good starting point. We divide our guidelines over four main key points for accessible ontology URI design: how to select a name and prefix (Section 2.1), whether to use hash or slash namespaces (Section 2.2), whether to use opaque URIs (Section 2.3), how to incorporate semantic versioning in your ontology URI (Section 2.4) and how to make your ontology URI permanent (Section 2.5).For illustrating purposes, we will be using an example ontology throughout this paper, with the following URI: https://w3id.org/example#.Ontology name and prefix
The name and prefix of an ontology are in most cases related to its application domain. Short and simple names will help others remember your ontology easily. An extended practice is to use acronyms to abbreviate the title of longer ontologies, as in "The Data Catalog Ontology"Another aspect to consider when designing the name of your ontology is to avoid overlapping with other existing vocabularies. While it is possible to overload existing prefixes by assigning them a different URI, this often confuses potential re-users that are already familiar with the state of the art. A good strategy to prevent this problem is to look for existing prefixes in common vocabulary registries such as prefix.cc, Hash versus slash URIs
When designing the URI of an ontology, it is important to determine whether the trailing element will be a hash (#) or a slash (/). On the one hand, using a hash makes serving the ontology easier, On the other hand, using a slash allows treating each element of the ontology as a separate entity that may be described in an independent manner. This can be useful for organizational purposes when the ontology is big (thousands of classes) and returning a full serialization or rendering a single HTML documentation may be deemed too slow, showing instead each class and property separately. The Open Biomedical Ontology networkOpaque URIs for classes and properties
Opaque URIs obfuscate the name of classes and properties that are part of your ontology. For instance, let us assume we have an "ExampleClassA" in our example ontology. In order to use opaque URIs, instead of using "ExampleClassA" we would associate the class with an identifier such as "EXO C0001", and use it as part of its URI. This has two main advantages: First, if we decide to change the name of the class in the future, the URI of the class would not be affected by it.Second, identifiers are language agnostic. For instance, someone using another alphabet (e.g., chinese, cyrillic, etc.) would be able to refer to the same URI with the corresponding label. Examples of ontologies that follow this convention can be found in the Open Biomedical Ontologies, but it is also followed by commonly used knowledge graphs such as Wikidata The main drawback of using opaque URIs is the difficulty of interpreting properly classes and properties, which usually requires additional tooling for displaying the right labels. For this reason, we will not use them in our example.Ontology versioning
Ontologies often have multiple versions, and these should be appropriately annotated as part of the ontology metadata (e.g., with the property owl:versionIRI and owl:versionInfo).We recommend using semantic versioning 11 as a guideline for identifying the different versions of an ontology, as it has become a common practice in software engineering. In semantic versioning, each version id should follow the format X.Y.Z, where X represents a major version (e.g., defining a set of classes and properties to support new use cases), Y represents a minor version (e.g., adding a single property or class), and Z represents patches or quick bug fixes (updating a label, adding examples, etc.). In our example ontology, the first version is 1.0.0 (first major release), with the IRI "https://w3id.org/example/1.0.0", which we would represent in the ontology as follows: <https://w3id.org/example> rdf:type owl:Ontology ; owl:versionIRI <https://w3id.org/example/1.0.0> ; owl:versionInfo "1.0.0"@en .As shown in the example, the version IRI is independent from the URI of the ontology ("https://w3id.org/example#"). It is discouraged to include version numbers as part of the ontology URI, as it would deeply affect interoperability of its instances. For example, consider we had used "https://w3id.org/example/1.0.0#" as the ontology URI, and we had populated a Knowledge Graph with two instances of "ExampleClassA": @prefix exo: <https://w3id.org/example/1.0.0#> . @prefix ex-inst: <https://example.org/instance/> . ex-inst:instance1 a exo:ExampleClassA . ex-inst:instance2 a exo:ExampleClassA .If we now released another version of the ontology (1.0.1), all the URIs of ExampleClassA would change (highlighted in blue below): @prefix exo2: <https://w3id.org/example/1.0.1#> . @prefix ex-inst: <https://example.org/instance/> . ex-inst:instance1 a exo2:ExampleClassA . ex-inst:instance2 a exo2:ExampleClassA . This is an undesired behavior, because it makes ex-inst:instance1 and exinst:instance2 instances of two different classes (exo:ExampleClassA and exo2:exampleClassA) instead of a single one. Instead, we want all the instances of a class to be compatible across different ontology versions: @prefix exo: <https://w3id.org/example#> . @prefix ex-inst: <https://example.org/instance/> . ex-inst:instance1 a exo:ExampleClassA . ex-inst:instance2 a exo:ExampleClassA .By following this convention, we can continue doing ontology releases with appropriate versioning, while keeping the classes and properties consistent in terms of their URI.Using permanent URIs
When publishing an ontology on the Web, it is recommended to think about its long term sustainability, specifically if it gets widely adopted. For example, what will happen to the domain used for the namespace URI of an ontology after several years? (i.e., when the funding for the related research project is over). Likewise, if the ontology is hosted on a server in a university or company, what will happen if the server name changes; or if the person in charge of maintaing it needs to move the ontology hosting to another institution?Permanent URIs services are community driven initiatives designed to address these issues. The idea behind them is simple: instead of minting a URI for a resource, users may use these services to create a proxy URI which can then be redirected to wherever the target resource is stored at any point in time. That way, if the target resource is moved, developers just have to update its location without changing its permanent URL. There are several open, free services to create permanent URLs on the Web, among which purl.org Generating Reusable Ontology Documentation
We refer to "ontology documentation" as the collection of documents and explanatory comments generated during the entire ontology building process These documents are critical for helping others understand an ontology: documentation provides context, accurate definitions and examples of the different concepts that are included. In fact, an important part of the documentation is usually provided within the ontology itself through ontology metadata and natural language annotations. However, some of the documents may be external to the ontology, such as the ontology requirements document, other sources used during the knowledge acquisition phase, the conceptualization diagrams, examples of use, etc.In this section we describe our recommended best practices to generate ontology metadata and human oriented documentation, including diagramming guidelines to show the relationships between classes in a visual manner.Ontology Metadata
When creating an ontology, it is crucial to describe it with appropriate metadata for others to understand it correctly. For example, if some of the classes are ambiguously defined, other researchers may misinterpret their meaning when incorporating them into their work. We distinguish two main categories of metadata in an ontology: the metadata associated with the ontology itself and the metadata associated with its elements (classes, object properties, datatype properties and individuals).The metadata associated to the ontology itself is important to provide an overview and identify an ontology, understand its usage conditions and understand its provenance. Table Table The rest of the properties in Table Creating a Human-Readable Documentation
Ontologies are usually designed in editors and then exported in formats (Turtle, RDF/XML, JSON-LD, etc.) that are difficult to navigate by humans. Researchers often address this issue by pointing to an associated paper or report, but these usually describe a scientific contribution rather than the definitions of each ontology concept in detail. A better solution is to create a documentation for all the terms in the ontology. Since this can be a time-consuming task, the Semantic Web community has developed tools to help ontology documentation. Given an OWL file as input, these tools generate an HTML documentation from the metadata included in the ontology itself (by retrieving the annotation properties recommended in Section 3.1), creating sections for all classes, properties, data properties and named individuals. Popular tools for ontology documentation include WIDOCO Ontology visualization
Graphical representations of ontologies help users understand their structure, relationships and usage. Since there is no standard convention for ontology diagrams, developers have adopted several approaches, such as UML-alike diagrams in the SAREF ontologies;Figure Figure Finally, Figure Ontology Publication on the Web
Once an ontology is fully implemented and documented, it is time to make it accessible and findable in the Web. In this section we briefly describe the best  practices to perform content negotiation to serve a target ontology in multiple formats (Section 4.1) and registries for describing new ontologies (Section 4.2).Ontology Accessibility in Multiple Interoperable Formats
Ontologies should be made available in both human and machine readable manner using a single identifier: the ontology URI. This way we can make any ontology resolve to its HTML documentation when accessed by a user in a browser; and resolve to a standard RDF serialization when importing it in an ontology editor. In order to distinguish the target resource to serve (HTML or RDF serialization), we must implement a 303 See Other redirect, 23 a common practice in the Semantic Web community for doing content negotiaiton over URIs. This type of redirect indicates the location of a target resource in the server based on the received request, but has to be appropriately configured on the server where we are hosting the ontology. Fortunately, there are W3C best practices (recipes) on how to configure an Apache HTTP server -a commonly used type of server for serving files-for hash ended and slash ended ontologies. Making an Ontology Findable on the Web
Once an ontology is published in the Web, the next step is to ensure it can be easily found by others. There are three main activities that can help the visibility of an ontology:1. Register the namespace prefix: prefix.cc, 26 is a crowdsourced registry where users can vote the most popular URL for a given prefix. 2. Register the ontology: There are a number of existing metadata registries that can be used for browsing existing ontologies Ontology Documentation and Publication Frameworks
Semantic Web researchers and practitioners have developed methods and tools for easing ontology engineering, development, publication and exploitation. A number these tools have already been mentioned in the corresponding sections of this chapter, however, they are not always integrated as part of an end-to-end framework, and researchers have to use them separately. More recently, frameworks inspired in the software continuous integration practices have arisen to support ontology engineering activities in collaborative environments. These frameworks offer end-to-end solutions that support ontology engineers documenting, visualizing, testing and publishing their ontologies; and we recommend them as an entry point to adopt some of the practices described in this chapter. One example is OnToology Conclusions
In this chapter we have described implementation guidelines and recommendations for making ontologies findable (through metadata registries and annotations); accessible (through good practices in URI design and content negotiation), interoperable (showing how to serve ontologies in different standard serializations) and reusable (by describing the metadata and diagram guidelines needed for proper understanding) on the Web while following the Linked Data principles. A distinct feature of our guidelines is that we have illustrated how to carry out our recommendations with an example ontology and pointers to usable tools developed by the Semantic Web community in the last decade. Our recommendations reflect years of experience on ontology engineering and also summarize community discussions for ontology design and publication. Hence, we believe these guidelines are a comprehensive starting point for ontology developers who aim to make their ontologies FAIR and available on the Web.Fig. 1 .
Figure 1
Fig. 2 .
Fig. 3 .
Fig. 4 .
Table 1 .
Table 2 .
https://lod-cloud.net/https://lot.linkeddata.es/https://www.w3.org/DesignIssues/LinkedData.htmlhttps://www.w3.org/TR/vocab-dcat-2/http://xmlns.com/foaf/spec/http://prefix.cchttps://www.w3.org/wiki/HashVsSlashhttp://www.obofoundry.org/https://archive.org/services/purl/https://w3id.org/https://github.com/perma-id/w3id.orghttps://protegewiki.stanford.edu/wiki/OWLDocSee the SAREF4AGRI extension https://w3id.org/def/saref4agriSemantic Sensor Network Ontology https://www.w3.org/TR/vocab-ssn/PROV-O: The PROV Ontology http://www.w3.org/TR/prov-o/Specification available at https://essepuntato.it/graffoo/specificationThe original UML Ont profile uses custom labels and dependencies to cover OWL 1 constructs. Here labels are mapped to the OWL and RDF(S) constructs.http://www.w3.org/TR/swbp-vocab-pub/http://ontoology.linkeddata.es/