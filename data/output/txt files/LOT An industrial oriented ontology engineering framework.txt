Introduction
Q1 1 : Should you always write ontology functional requirements in the form of Competency Questions (CQs) Although it is true that a lot of useful work has been carried out on ontology engineering over the years, such as the proposal of multiple ontology development methodologies to systematize the development process and the alignment with agile practices, as of today, there are important questions on ontology development that have not been answered, This issue has been exposed by the recent analysis of the current state, challenges and future directions in ontology engineering presented by Tudorache The aim of the work presented in this paper is to respond to this situation and answer the questions presented in the first paragraph by methodology based on its application and comparison with existing approaches. Finally, Section 6 concludes and presents future lines of work.Related work
Although numerous ontology development methodologies have been proposed since the 1990s, existing methodologies should be reviewed and adapted to support ontology development in the Linked Data and agile context, which are currently popular scenarios. This section provides an overview of ontology development methodologies mainly oriented to OWL ontologies.Traditional well-known methodologies, such as METHONTOLOGY Specifically, METHONTOLOGY defined a set of life cycle models and a development process that provided an overview of how an ontology should be developed. Moreover, it provided detailed guidelines to carry out the ontology conceptualization. The life cycle models that it proposed were waterfall, incremental (which ensures that each version is compatible with the previous ones) and one based on evolving prototypes (with essential similarities to agile development). However, from a current perspective it has some drawbacks: (1) there are activities that are not defined in a precise way; (2) it was focused on developing application-independent ontologies, however, currently it is usual to develop ontologies as part of a bigger software project; (3) some of the premises associated with METHONTOLOGY are no longer valid, for instance, that the ontologies that you reuse will be stable and available forever; and (4) there was not so much experience as now developing ontologies.On-To-Knowledge With regards to the ''Ontology Development 101'' guide Concerning DILIGENT NeOn (1) it establishes the generation of a quantity of documentation that provokes that, in practice, this methodology is not followed as it is;(2) its proposals were based on the best knowledge at the time it was published; however, after the experience of several years, are currently applied with important variations; and (3) a community has not been maintained over time to support the NeOn Toolkit and, therefore, it has been discontinued.All these traditional methodologies, although they include support activities, such as evaluation, propose time and resource consuming activities to develop and evaluate ontologies instead of simple and (semi-)automatic processes, being sometimes too heavy to be applied in ontology developments. However, these methodologies are reused and proposed to be followed as part of LOT when the techniques are still applicable.More recent approaches introduce agile methodologies for ontology development, focused on flexible and iterative development of ontologies that allows to have in short periods of time several versions of ontologies which, although they are not complete, can be consumed by users or domain experts. On the one hand, Hristozova and Sterling propose the eXtreme Method On the other hand, SAMOD There are also lightweight methodologies,All these aforementioned methodologies describe the set of activities that should be carried out in any ontology development process, which includes encoding of the ontology and only in some cases also the support activities and none of them consider the publication activity and related tasks. Therefore, LOT is the first methodology oriented to the publication of ontologies following semantic web best practices and FAIR principles including specific recommendations, tips and potential tools that can be helpful to ontology developers.This paper is focused on both methodological and technological aspects that are needed during any lightweight ontology development process. It aims to go beyond previous methodologies by helping ontology developers to build ontologies taking into account their particular characteristics, following a lightweight approach and providing detailed methodological guidelines for the proposed activities.Methodology
The Linked Open Terms (LOT) methodology is a lightweight methodology for developing ontologies and vocabularies focusing on industry projects. This section provides details about LOT,The LOT methodology defines iterations over a basic workflow composed of the following activities (see Q5 in Section 1): (1) Ontological requirements specification; (2) Ontology implementation; (3) Ontology publication; and (4) Ontology maintenance. The activities, roles involved and main expected outputs are depicted in Fig. Even though there are many roles which can be involved in ontology development projects, the LOT methodology classifies them into the following groups:• Ontology developer: An ontology developer is a member of the ontology development team who has high knowledge about ontology development and knowledge representation. Ontology developers could be further specified as an ontology engineer; however, for the sake of simplicity, only the ontology developer term will be used in the paper. • Domain expert: A domain expert is an expert in the domains covered by the ontology. This role does not need knowledge about ontology development. • Ontology user: An ontology user is a potential end user of the ontology. This actor also includes software developers who will make use of the ontology within their applications. Even though there might be multiple types of users, such as the users interacting with the applications built on top of the ontologies, in this work we refer as ''user'' actors who would potentially use the ontology directly rather than embedded in broader systems.Details including more fine grained activities and workflows, intermediate results and tools supporting the activity are provided in the following sections for each activity.Ontology requirements specification
The ontology requirements specification activity refers to the activity of collecting the requirements that the ontology should fulfill The workflow proposed for the ontology requirements specification activity is shown in Fig. For the case of the ontology requirements specification activity, it is planned to start with two complementary sub-activities, namely ''Use case specification'' and ''Data exchange identification'', from which at least one should be carried out in order to start gathering documentation to help the knowledge elicitation activity This activity results the ontology requirements specification document (ORSD) Use case specification
The goal of the use case specification activity is to provide a vision on the potential use that the ontology will have. This activity involves domain experts, users and ontology engineers. The output of this activity is a list of use cases. The use cases, in the context of ontology development, allow describing situations that are desired to be reached with the data that are described by the vocabulary. Therefore, their objective is to guide the obtaining of the requirements. The specification of a use case consists of the narration of a scenario in which one or several actors intervene and the necessary interactions to obtain an expected result or benefit. Below an example of a use case is presented in which a vision is given about how the data could be used. This activity is recommended to be carried out in any ontology development project and highly advised for those in which the ontology aims to be defined in a top level or general way.An example of a use case extracted from the Ciudades Abiertas ontologies development project (Espinoza-Arias and Corcho, 2018) is shown below:Name: Use Case 1 -Real Time Parking
Description: Finding available parking spaces in certain areas and times of day is an almost impossible task in certain cities. Faced with this problem, a city council has deployed a network of sensors in public car parks to obtain data in real time and to provide citizens with information about free and occupied places. In addition, it has placed display panels of available parking spaces in the streets and has made available to the public a mobile application for guided parking. Thanks to this system, the citizens can know in real time in which public car park there are free places to leave their car.Actors: citizen, application Flow: Mike, while driving his car to the city center, activates through a voice command the parking application. The application requests the destination address. Mike specifies the destination address to the application. The application, which has access to the GPS of his mobile, inspects the data emitted by the parking sensors, identifies the parking places closer to Mike's destination from its current location, and recommends him a route to park, however the spot is not reserved for him. Mike follows the route suggested by the application, arrives at the place and parks.Data exchange identification
The goal of the data exchange identification activity is to provide the ontology development team with the necessary documentation about the domain to be modeled. In this case, the documentation to be shared might correspond to: datasets, regulations, standards, data formats, APIs specifications, database schemas, etc. Typically in this activity, ontology users such as software developers are responsible for providing this documentation to ontology engineers. The output of this activity is a set of domain documents and resources. An example of this document exchange is shown in Fig. 6 https://www.w3.org/WoT/WG/.Purpose and scope identification
From use cases and the domain documentation provided in the data exchange identification task, the purpose and scope identification activity is carried out. The ontology development team works in collaboration with users and domain experts to define the purpose and scope of each ontology or ontology module to be developed. The communication between the domain experts, users and ontology development team could be carried out by means of online or physical meetings. As output of this activity a text document describing the purpose and scope of the ontology is produced. This document could include nonfunctional requirements as the language in which the ontology should be lexicalized, whether it has to provide multilingual lexicalizations, the ontology implementation language or profile in which it should be formalized, etc.Functional ontological requirements proposal
Subsequently, the task of elaborating the functional ontology requirements proposal is carried out mostly by the ontology engineers, but it could be supported by users and domain experts. This activity is expected to produce a set of functional requirements that could be materialized into one or more of the following forms:• Competency questions (CQs): This is one of the well-known techniques to define ontology functional requirements. This technique was proposed by -Concepts: this table is used for collecting information about the concepts, alternative identifiers and a short description for each of them to clarify their meaning within the domain. -Relations: this table is used to group all the relations between the concepts. Also, additional information is provided such as a description, maximum cardinality, whether they are symmetric, transitive, functional, etc. -Attributes: this table is used to group all related attributes under the relevant concepts of the terms table, i.e., relations to be established between concept instantiations and particular data values.While traditionally competency questions have attracted attention from many methodologies, LOT proposes to use also other techniques depending on the case at hand or to combine them (see Q1 in Section 1). In general, the competency questions and natural language statements are commonly used in combination. To get some examples, the CORAL Corpus Figs. If the set of requirements are written in the form of competency questions or natural language sentences, it can also be stored following a tabular approach and include additional information, such as the following fields:• Requirement identifier, which needs to be unique for each requirement to be used during the whole ontology development process.• The domain of the requirement identified (in case there are several domains involved in the ontology or ontology network). • The competency question or natural language sentence.• The answer to the competency question (in case the previous field is a CQ). • Status of the requirement, which can be: (1) Proposed, (2) Accepted, (3) Rejected, (4) Pending, (5) Deprecated or (6) Superseded. • In case the requirement is superseded, the identifier of the updated requirement. • Comments about the requirement.• Provenance of the requirement (e.g., if it is reused, standard or document where it comes from, meeting minutes when the requirements was originated). • Priority of the requirement, which can be: (1) High, (2) Medium or (3) Low.   Tip: Functional ontology requirements specification From our experience, it has been observed that using the competency questions technique is more common among ontology engineers or teams with experience in query languages, mostly SPARQL (see Q2 and Q3 in Section 1). However, since domain experts are sometimes not familiar with the OWL and SPARQL capabilities, they could tend to generate more general questions not so much related on how the data is going to be queried. In other cases, it might be unnatural or forced to reformulate as a question knowledge descriptions that are usually expressed as statements, for example transforming ''A sensor observes a property'' to a question like ''What is observed by a sensor?''. In these cases the natural language statements help. Also, if there is already structured information about the domain, tables are also useful and more practical for generating a first conceptualization, because they serve as an intermediate representation between the domain and the model. In general we could draw two general recommendations about which technique to use to specify functional requirements:• Avoid competency questions when domain experts have no knowledge about ontology data generation and querying. • Use tables if there are structured data or APIs, or there is a close collaboration with software developers.Functional ontological requirements completion
After the requirements proposal, the functional requirements completion task is performed. Domain experts and users in collaboration with the ontology development team validate whether the ontology requirements defined in the previous step are valid and complete. The following criteria, which does not aim to be an exhaustive list, can be used in this validation task as stated in • A set of requirements is correct if each requirement refers to some features of the ontology to be developed. • A set of requirements is complete if users and domain experts review the requirements and confirm that they are not aware of additional requirements. • A set of requirements is internally consistent if no conflicts exist between them. • A set of requirements is verifiable if there is a finite process with a reasonable cost that tests whether the final ontology satisfies each requirement. • A set of requirements is comprehensible if each and every requirements is understandable to users and domain experts. • A set of requirements is unambiguous if each and every requirements has only one possible interpretation; that is, if it does not admit any doubt or misunderstanding. • A set of requirements is concise if each and every requirement is relevant, and no duplicated or irrelevant requirements exist. If needed, functional requirements are assigned priorities. The main implication of this prioritization is the possibility of planning and scheduling the development of the ontology in sprints. This prioritization would drive the ontology development process since to carry out this prioritization the ontology development team works with the domain experts to identify which requirements need to be fulfilled first. The communication between the domain experts and the ontology development team could be carried out by means of on-line or in-person interviews.ORSD formalization
Once the ontology development team has all the information about the requirements, obtained from the ''purpose and scope identification'', ''ontological requirements proposal'' and ''ontological requirements completion'' activities, the Ontology Requirements Specification Document (ORSD) is created. This specification document stores all the functional and non-functional requirements identified and the information associated to them. Fig. LOT proposes a template for the ORSD (in docx and tex formats), which is stored a GitHub repository to be used by users.Another optional change is the pre-glossary of terms with their frequencies, which refers to the list of terms included in the CQs and their frequencies. These frequencies are calculated to have a measure of the most important terms appearing in the competency questions or natural language statements. That is, to separate domain-repeated concepts from the rest of words. However, if the requirements are taken in the form of tables, this task and field is not needed as the relevant terms are already listed in the concepts table. If the requirements have been taken in the form of competency questions or natural language statements an alternative for the terms frequency is to generate cloud tags to have a more compact view of the terms frequency.Functional ontology requirements formalization
Finally, the functional ontology requirements formalization can be performed. In this (optional) task, the functional requirements are formalized into test cases. These tests cases should include: the identifier of the requirement associated, the description of the test case (which includes a link to the ORSD), and the SPARQL queries extracted from the CQ together with the expected result of the query. Instead of adding SPARQL queries, test expressions following the testing method defined in Fernández-Izquierdo and García-Castro (2018) can also be added and stored in RDF files following the Verification Test Case ontology.Ontology implementation
The aim of the ontology implementation activity is to build the ontology using a formal language, based on the ontological requirements identified by the domain experts and the ontology development team The ontology implementation is usually divided into sub-activities as shown in Fig. Ontology conceptualization
The purpose of the conceptualization sub-activity is to create a model that represents the domain of the ontology. Such conceptualization usually does not include all the constraints that a formal language imposes; instead the level of detail of is decided by the development team. For example, if the conceptualization is going to be used for communication purposes with domain experts, some language specific constraints might be omitted, generating a more high level model.The conceptualization could be carried out by stating the concepts and relations in a formal system (or logic language) or could be done by means of diagrams, which is currently a common technique. Such diagrams are also useful to document the ontology (see Section 3.3). When using diagrams, either on paper or using a diagramming tool, it is important to decide the notation to be used as it will be part of the common understanding between domain experts and ontology developers and it will also drive the future ontology encoding. The Chowlk notation 11 which is a UML based notation for ontology diagrams; besides the UML_Ont profile To develop the conceptualization, a common practice is to incrementally identify the following ontology elements:1. Classes (or concepts): A class is instantiated by individuals that represent entities that have something in common. An individual represents a particular entity of a domain. 2. Class hierarchies: A class 𝐴 is subclass of another class 𝐵 if and only if every instance of 𝐴 is also an instance of 𝐵.Properties between classes (relationships): A binary relation-
ship is instantiated by pairs of individuals that represent facts.• A specially important binary relation is part of Tip: Ontology conceptualization
It is important to take into account that the conceptualization activity could be carried out on paper or on blackboard from where photographs of the conceptualization diagrams are taken to generate digital drawings and keep track of the conceptualization results. Another option is to use digital drawing tools, ideally with synchronous collaborative edition capabilities, and to use the evolving diagrams to keep history of the model and track decisions taken. Such diagrams can be reused during the documentation activity and could be used as communication tool to clarify the model with domain experts.Ontology encoding
The goal of the encoding activity is to produce an ontology in an implementation language, for example, OWL In other cases some parts of the encoding might be automated or semi-automated. For example, it might be needed to transform a concept hierarchy into OWL or a thesaurus into a SKOS Even though versioning conventions should be established for all artefacts being produced during the project, this practice has not yet been broadly adopted in ontology development projects. Therefore, it is advisable to establish a versioning convention at least to identify the different ontology versions produced along the project. For doing so, the ontology development team should define a versioning convention taking as inspiration the conventions used in software development. 13  Again, in the best case scenario the versioning convention should be applied to all possible artefacts, for example, set of requirements, conceptualization, test suite, etc.Note that the encoding activity is closely related to the ontology reuse one, detailed in next sub-section.Ontology reuse
Ontology reuse refers to the process of using available ontological resources for solving different problems The reusability potential of ontologies and its benefits have been one of the main claims for ontology development since the first studies in the ontological field As presented in Poveda-Villalón et al. ( In the figure, four ontologies are represented (onto1, onto2, onto3 and onto4). The different types of reuse are explained from onto1 perspective, that is, how onto1 reuses the other ontologies.13 https://semver.org/.• Hard reuse:-How to implement it: This type of reuse is implemented by the OWL construct owl:imports. In this case the reused ontology is reused as it is, and as a whole. As the owl:imports construct is transitive, the imported ontologies by the one being reused will be also part of the ontology being built. This type of reuse is equivalent to the as_is type described by -Example of hard reuse in Fig. -How to implement it: This type of reuse is implemented by referring to other ontology elements URIs. It could also include the reproduction of some parts of the reused ontology in the reusing one. This type of reuse could be applicable to carry out the extraction, extension and combination types described by ClassC03 defined as subclass of onto1:ClassA0 in onto1. The same could be done for specializing a term.3. Reproduction of a subpart of the ontology: onto3: ClassC03 defined as subclass of onto3:ClassC0 in onto1 as originally defined in onto3.Replicate an element and keep provenance to
original definition: declaration in onto1 of onto1:ClassA04 and link through an equivalent class statement to onto4:ClassD04. This reuse could appear in several situations, for example, the reused ontology element has been discovered by the developers after creating the ontology linking to it; the ontology development team aims at minimizing the number of namespaces to deal with, then they create every element in the owned namespace and link to external ontologies to allow interoperability by following the mappings; among other cases. -Points to consider: * The reused parts of other ontologies remain stable in the ontology being built even though there are changes in the original one. * The ontology being built might lose track to definitions in the reused ontology when it evolves.Another way of reusing ontological resources according to the NeOn methodology is by reusing Ontology Design Patterns (ODPs): reusable successful solutions to recurrent modeling problems known as ontology design patterns The ontology reuse activity may be taken into account along the following activities:1. Ontology requirement specification. When the development team could define the conditions that an ontology should satisfy to be reused. 2. Ontology implementation. It is the activity where reuse actually takes place. The ontology conceptualization might help to identify what entities could be reused. For example, during conceptualization, the necessity of modeling the moment when a sensor observation appears leads to consider the OWL Time ontology reuse. During the encoding activity, ontologies are soft or hard reused. During evaluation, the appropriate use of reused terms according to their intended and formal meaning as well as the coherence of the whole ontology are checked. 3. Ontology maintenance. The future evolution of the ontology may lead to the reuse of new ontologies or even to discontinue reusing ontologies integrated in former versions.It should be taken into account that even though there are many benefits claimed about ontology reuse, such an activity is not cost free and some common issues might arise when trying to reuse ontologies (see Q4 in Section 1). In fact, Fernández-López and colleagues The scope of this ontology reuse section is to provide some general guidelines for reusing ontologies. More extended guidelines can 14 http://ontologydesignpatterns.org be found in Carriero and colleagues' work Tip: Ontology reuse
The ontology reuse activity might be carried out in line with the ontology encoding one, that is, once the model is stable, look for ontologies that already represent such model. In this sense, when encoding the conceptualized model, ontology developers should search for existing ontologies in order to reuse them as a whole or reuse part of them. In this case, the conceptualization might be subject of changes when analyzing existing models.For experienced developers, the reuse activity could be carried out both during the conceptualization or the encoding activities. In those cases in which the development team is knowledgeable about existing ontologies in the domain at hand, they can drive the conceptualization based on standards or well-known ontologies, for example considering patterns defined in W3C SSN/SOSA or ETSI SAREF ontologies when developing ontologies for sensors and actuators.From our experience, we discourage looking for ontologies exhaustively from the ontology requirements without having a more clear idea of the conceptualization, as it can be very time consuming to study, understand and compare the many models that can arise from searching from the terms in the requirements. The most convenient situation is starting the conceptualization without looking for many ontologies (but considering those that the development team is knowledgeable about) and looking for ontologies once a first conceptualization is stable but open to modifications according to the ontologies to be reused.Ontology evaluation
This activity refers to checking the technical quality of an ontology against a frame of Suárez-Figueroa et al. Tip: Ontology evaluation
From our experience, it has been observed that when there are domain experts involved in the ontology development process and the ontology is not a part of a software system, the execution SPARQL or expressions in to data based on ontology helps domain experts to easily identify and lack of knowledge described in an ontology.When ontologies are part of a software product or when only ontology developers are involved in the development process, ontology verification and data coverage analysis are common practices for evaluating the ontology.Ontology publication
The aim of the ontology publication activity is to provide an online ontology accessible both as a human-readable documentation and a machine-readable file from its URI. The ontology publication is usually divided into the following sub-activities as shown in Fig. It should be mentioned that not in every ontology development project the ontology is intended to be published on line; however as the LOT methodology is oriented to the Linked Open Data and Semantic Web paradigms, this activity is highly recommended, so that the produced ontology can be reused by others. However, the decision is on the development team or project characteristics, and if the ontology is not published online, the ''Online publication'' sub-activity could be omitted while the previous two (''Propose release candidate'' and ''Ontology Documentation'') are recommended to share the ontology internally within the project at hand. 15 https://w3id.org/def/vtc#.Propose release candidate
Once the ontology developers have implemented and evaluated the ontology, the next task is to decide whether the current version is going to be published on the Web (or shared among other project partners, for example software developers making use of the ontology) or whether is needed to document such version of the ontology for any other reason (for example a set of requirements are fulfilled and triggers a new release). In this case, the version at hand becomes a release candidate (see Fig. Ontology documentation
If the ontology has been selected as release, or there are other reasons to document it, then the ontology development team in collaboration with the domain experts generates the ontology documentation taking as input the ontology code and potentially other artifacts as requirements, tests, examples, etc. According to the best practices for publishing FAIR (Findable, Accessible, Interoperable and Reusable) vocabularies and ontologies provided by • A human-readable description of the ontology, commonly as an HTML document, that describes the classes, properties, data properties and individuals of the ontology. The domain experts have to collaborate with the ontology development team to describe the classes and the properties; otherwise the ontology developers should look for sound descriptions of the terms included in the model. This information is normally included in the form of annotations in the OWL code of the ontology. • Additionally, the HTML description of an ontology should contain metadata, such as the license URI, the title being used, the creator, the publisher, the date of creation, the last modification or the version number. This information associated to the ontology is important to provide an overview and identify an ontology, understand its usage conditions and its provenance. This information is normally included in the form of annotations in the OWL code of the ontology. • The HTML documentation should also contain information oriented to human consumption about the intended use of the ontology, its purpose and scope. It is encouraged to add an abstract and detailed descriptions of the model that help user to understand better the ontology. • Diagrams which store the graphical representation of the ontology, including taxonomy and class diagrams. • Examples of use that illustrate how to use ontologies in practice.Additionally, the documentation of the ontology can also include the following artefacts generated during the development process:• The list of requirements identified during the requirement specification activity and that should be satisfied by the ontology. • The list of test cases used during the ontology evaluation activity to verify the ontology.Online publication
Once the documentation of the ontology has been generated, we proceed to the online publication step. First of all, the ontology is published on the Web following the practices described for publishing vocabularies on the Web provided by the W3C, 16 so that it is accessible via its URI as a file in a formal language and as human-readable documentation using content negotiation.Tip: Ontology documentation and publication
From our experience, we observed that is it very useful to include within the HTML documentation graphical representations of ontology instantiations and examples of use, together with the ontology diagrams. These materials allow domain experts and users to better understand the domain described in the ontology as well as its structure and usage.Note that while one might be tempted to generate as much documentation as possible during the conceptualization and implementation (for example adding labels and comments for the defined terms) to be reused during the documentation activity, in some cases a number of modifications are needed after evaluating the ontology from a functional point of view. In this sense, it is recommended to accomplish some parts of the documentation (for example the examples generation) after the evaluation activity.Ontology maintenance
The goal of this activity is to update the ontology during its life cycle. This may be needed due to different situations as shown in Fig. This activity may be triggered during the ontology development process in which new implementation or fixing would be scheduled in one or more sprints. This activity may be also triggered after the ontology development process in which a new version or revision of the ontology should be generated.Tip: Ontology maintenance
Monitoring and maintaining the traceability of the requirements, bugs and suggestions identified in this activity allows storing discussions and decisions taken that can be later reused. For this reason, it is advisable to use issue tracker systems that allow issue management and discussion, possibly in an open environment so that external feedback can be received.16 http://www.w3.org/TR/swbp-vocab-pub/. Software support
In order to support the activities described in Section 3, this section presents several tools and technologies oriented to ontology development (see Q6 in Section 1). In the first place, each subsection from 4.1 to 4.3 includes references and description of specific tools and methods that can support in particular each ontology development activity. Then, technologies commonly used in software development that can support ontology development are briefly described in Section 4.5. The relation between tools supporting the methodology and each activity is depicted in Section 4.6.Software support for requirement specification
One of the options to store and manage the Competency Questions or natural language statements resulting from the requirements specification task is using collaborative spreadsheets, 17,18 which allows several participants to collaborate in the writing of the specification document. See that this activity also generates as output the ORSD document. The LOT methodology provides a template for such document both in docx and LaTeX formats. When ontological requirements are extracted following the METHONTOLOGY alike tables, tools that allow managing tabular information in a collaborative way are recommended. During the BIMERR project, ConfluenceSoftware support for implementation
In practical terms, the ontology conceptualization is materialized by the logical descriptions of the ontology that could be represented by a set description logic formalization or graphical descriptions. From our experience, the most common method for ontology conceptualization is to draw diagrams of the concepts, relations and axioms (to a certain extend). The conceptualization of an ontology can be carried out in a blackboard or in a sheet of paper or using digital tools. For freestyle diagrams, one could use general purpose tools as diagrams.netAnother alternative is to generate the conceptualization using systems specifically designed for ontology development. In this case, we can find several options each of them are based in a particular notation oriented to the transformation of the diagrams into OWL code, as for example:• Chowlk: An on-line applicationNotation:
The Chowlk notation.• WebVOWL: Originally was designed as an ontology visualization tool following the WebVOWL notation and the corresponding ontology editor was provided as separated software. Later, the edition tools was merged within WebVOWL. The system could be used onlineNotation: It is based on the VOWL visual notation • OWLGred: A graphical editor for OWL ontologiesNotation:
The OWLGred editor is based on the UML class diagram notation.• Graffoo: GraffooNotation: Graffo notation defines classes and class restrictions as rectangles, datatypes and datatype restrictions as rhomboids, individuals as circles and assertions, annotation properties and datatype and object properties as arcs.Another tool for ontology conceptualization is Gra.fo,The ontology can be implemented by means of an ontology editor, such as Protégé, which is an open-source editor that allows installing plugins to add new functionalities to the tool, or its online version WebProtégé As mentioned in Section 3.2, the scope of this paper regarding ontology resuse is to provide some general guidelines. In this sense, to help ontology developers during the ontology reuse activity, several ontology registries were proposed. Some of these registries are oriented to a general purpose, such as Linked Open Vocabularies (LOV) 35 Regarding the evaluation activity, ontologies can be partially evaluated using reasoners such as Pellet Software support for publication
The development team can use several tools for documenting ontologies before their publication (see Q8 in Section 1). Live OWL Documentation Environment (LODE) The HTML documentation can be enriched with ontology diagrams obtained from the conceptualization task using the previously mentioned drawing tools (see Section 4.2). Moreover, these drawing tools can be used to generate examples of use of the ontology to improve the coverage of the documentation and therefore the understandability of the ontology.Once the ontologies are documented should be published on-line following the best practices. This task, which could be seen as the ontology deployment, could be carried out manually by the system administrators of the web domain where the ontology is going to be published, or could be aided by some systems. OnToology 49 Software support for maintenance
For the maintenance of ontologies, the development team can use ontology development oriented tools that also support tracking issues 47 https://github.com/dgarijo/Widoco/. 48 http://licensius.com/. 49 https://ontoology.linkeddata.es/. and communication between developers. This is the case of WebProtégé, which supports threaded notes and discussions and allow issues to be tracked and associated with terms and change sets. Moreover, developers can ''watch'' ontologies for changes that affect a specific term or hierarchy. Gra.fo also supports the maintenance of ontologies, providing support for adding comments related to concepts, attributes, relationships and specializations. Moreover, it allows tracking the ontology history, name a version and restore to any previous version. Finally, LOT methodology also recommends using GitHub, or other git systems, for ontology maintenance since it serves as an online infrastructure to maintain ontology versions as they are being developed and it provides an issue tracker to open issues and maintain discussions about the development.Adoption of software development tools in ontological engineering projects
To manage ontology development processes it is needed to considered several aspects, such as version control, traceability of ontology artefacts, changes integration and task management. Inspired by software engineering practices, which are widely used in software projects, this section proposes a set of tools to support ontology projects management.For supporting the control of ontology changes or the changes made to the other artefacts generated during the ontology development process, a version control system is required to keep track of every modification made to them. By capturing and storing the changes, it allows going back to previous versions of the ontology or its artefacts if a mistake is made. The version control systems also ensure conflict resolution and allow the integration of conflicting changes. One of the main systems used for version control in software projects is Git,For managing ontology development processes, it is also required to keep track of the tasks and status of the project. Inspired by software development practices, this operation can be performed in a Kanban-based way. In this sense applications as TrelloFinally, to continuously integrate changes as well as to continuously apply quality control (e.g., validating and verifying the ontology), continuous integration tools can be used. JenkinsTip: Ontology repositories in version control systems
If several ontologies are developed in the same project, all of them can be included in just one Git repository (e.g. former SAREF extension development), or one Git repository per ontology can be used (e.g., BIMERR and VICINITY ontology networks). If all the ontologies are developed at the same time by the same working group, the first option could be more comfortable for the development team, who do not have to maintain and update several repositories. Nevertheless, in the second case, each repository can be browsed focussing in its ontology. Besides, if one of the working groups is interested just in one ontology, they can download it without downloading the rest of the ontologies. However, it is recommended to keep different ontologies in different Git repositories to support independence of the releases.Summary of supporting tools for ontology development
This section provides a graphical alignment (Fig. Validation
As de Hoog (1998) asserted, ''It is extremely difficult to judge the value of a methodology in an objective way. Experimentation is, of course, the proper way to do it, but it is hardly feasible because there are too many conditions that cannot be controlled''. On the one hand, the introduction of an experimental toy problem would violate the basic assumption behind the need for methodological guidelines: that the development process be complex. On the other hand, if we apply the argument provided by de Hoog for knowledge-based systems to the ontology development field, we can observe that it is unlikely that an ontology development project would be funded more than once to use different methods and tools each time in order to compare results.Table Moreover, the use of the methodology was validated in multiple projects (see Q5 in Section 1), which are described in Appendix, 60  showing that LOT has the following features:1. It has been used in projects where ontologies with hundreds of entities have been defined.The activities proposed along this paper have been actually
carried out in the projects using the proposed methodology with a technological support. 3. The projects where the framework has been applied are diverse: different domains, different natural languages, different purposes, different team configurations and different project types (different funding schemes).Discussion
This section aims at providing some clarifications, observations and discussion about the proposed methodology taking as basis the experience of its application in the projects above-mentioned. As shown in Tables We can observe a tendency to use collaborative systems for ontology requirements gathering and project artefacts management. This represents a need due to the geographical situation of team members in international projects but also a convenience solution for local projects. However, there are subtle differences between the type of collaborative systems used. More precisely, for the activities previous to the encoding one, systems that allow synchronous edition are commonly used, while from the ontology encoding activity onwards no collaborative tools are used (Protégé, OOPS!, Widoco, reasoners, etc.) but the generated artefacts are shared through collaborative environments, such as git systems. The exception to this rule is the use of diagrams.net in the documentation activity; however the use of diagrams at this point has been in general related to the reuse of the ontology conceptualization diagrams during the documentation. This situation might be motivated 59 https://bvatant.blogspot.com/2012/02/is-your-linked-data-vocabulary-5-star_9588.html.60 Some of the projects where the LOT methodology has been applied are presented in Tables Another evidence of the success of the git-based approach for managing all artefacts during the ontology development project is the recent adoption of a similar procedure within the new SAREF pipeline for developing and maintaining extensions reported in ETSI (2020).One important observation about SAREF extensions is the fact that in some cases domain experts were not directly involved in the ontology development. However, during the SAREF4CITY development some workshops to gather stakeholder comments were organized, in some occasion with the collaboration of the European Commission 61 involving the community around the smart cities domain.Regarding the requirements specification techniques we can observe that while writing CQs has been the leading technique is the last decades, it is in general being complemented with other techniques like the description of use cases. In addition, we can observe that the CQs technique is not used in the projects presented when tables are used to write down requirements (see DELTA and BIMERR) or the CQs are used in addition to the tables (VICINITY). Note that in these three projects there were software developers involved who are normally comfortable with structured data. Also in this line, it should be clarified that for the MASS MEDIATOR project the ontology developer was the same person developing the API for which the ontology was built, therefore the requirements were not elicited nor documented in standard ways.In 12 out of the 18 projects, data sources, data schemas or API descriptions have been taken as knowledge sources. This fact might imply that data integration and data-driven ontology developments are every day more common.Finally, it is worth noting that in every project UML based notations have been used for the conceptualization activity. In those projects involving software developers it eases the communication with them as they are used to such representations. For the rest of the projects, as there was no preferred diagramming notation by the domain experts, the UML_Ont-based notation (that is the previous version of the Chowlk notation) was chosen to facilitate the transition to the OWL implementation.Conclusions and future work
Along this paper the LOT methodology, together with recommended tools and practical tips stemming from decades of experience in ontology engineering and use of existing methodologies that served as basis for its development, has been presented. Throughout the paper, the questions opening the introduction have been answered. The LOT methodology has evolved during the last decade (since it inception (Poveda-Villalón, 2012) and its evolution The presented methodology has been validated by comparison with the state of the art, showing that LOT covers activities that are not 61 https://digital-strategy.ec.europa.eu/en/events/workshop-towardsharmonization-smart-city-models-interoperable-extension-saref-smart-cities. described in any other methodology, such as ontology publication, and that it also contributes with tips and recommendations based on the authors experience. LOT has also been validated by the successful application in 18 projects with very heterogeneous configurations (development team, funding scheme, application, domain,During the methodology and projects development, it has been observed the need for collaborative edition tools and communication systems to carry out some activities, mostly regarding requirements specification. On the one hand, in some cases general purpose collaborative environments (as wikis or more complete solutions such as confluence) could be used for particular ontology developments, which might convey a cost and configuration and maintenance effort. On the other hand, this need might open the opportunity for the development of new systems specifically designed for ontology projects.It has also been observed that there is still a need for practical and detailed guidelines at least for the following activities: conceptualization (including ontology modularization), ontology reuse, ontology documentation including examples to facilitate their usage and requirements traceability. Our future lines in this regard involve generating guidelines for ontology conceptualization based on diagramming following the Chowlk visual notation. Another important point to broaden the methodological guidelines with regard to the ontology lifecycles is to address the post-development phase, that is, the exploitation of ontologies. In this sense, the generation of guidelines for ontology usage through SHACL shapes Finally, future work will involve the generation of guidelines for possible ontology development workflows including tools based on project configurations. For example, to suggest whether to use one or another tool or workflows depending on the ontology development team characteristics, the data sources and development time, taking as inspiration the project configuration shown in Tables Table 2
Methodological technique (M) and Technology (T) used in the international projects where the framework has been followed. Table 3
Methodological technique (M) and Technology (T) used in the regional and private company projects where the framework has been followed.   • datos.ign.es: Datos.ign.es 73 is an Instituto Geográfico Nacional (IGN) 74 initiative for the generation of semantic information from its resources. The first ontology resulting of this project is the BTN100 ontology, 75 which aims to represent the geospatial data from the Spanish Topographic Base Catalog (1:100.000 scale).The BTN100 catalog contains geographic information about topographic and thematic data. The BTN100 ontology allows representing all the complex geometrical shapes, e.g. multi-lines, polygons, multi-polygons, etc. specified in this catalog.  • CEU Mass Mediator: One of the main problems in biochemistry is, given a collection of empirical data about chemical compounds, to know to which compounds the data correspond. In the context of this problem, the Centre of Metabolomics and Bioanalysis and the Escuela Politécnica Superior (both of them belonging to Universidad San Pablo CEU) have developed CEU Mass Mediator. 78 It is a tool for database searching that allows the simultaneous batch query in different databases: METLIN, 79 KEGG, 80 Lipid Maps, 81 HMDB, 82 MINE 83 and an in-house library. Given that query results include multiple compound candidates for each empirical data, a Prolog expert system has been developed to aid in the identification of the right candidate Fig. 1 .
Fig. 2 .
Fig. 3 .
Fig. 4 .
Fig. 5 .
Fig. 6 .
Fig. 7 .
Fig. 8 .
Fig. 9 .
Fig. 10 .
Fig. 11 .
Fig. 12 .
Table 1
•
77 https://github.com/SmartDeveloperHub/sdh-vocabulary.git. 78 http://ceumass.eps.uspceu.es/mediator/. 79 https://metlin.scripps.edu/index.php. 80 http://www.genome.jp/kegg/. 81 http://www.lipidmaps.org/. 82 http://www.hmdb.ca/. 83 http://minedatabase.mcs.anl.gov/#/home. 84 Both the API REST and the ontology are available at https://bitbucket. orghttp://neon-project.org/nw/Welcome_to_the_NeOn_Project.html.http://neon-toolkit.org/wiki/Main_Page.html.Lightweight methodologies in this context refer to methodologies oriented to rapid ontology engineering or that are based on few rules generally easy to follow.Online documentation of the methodology is available at https://lot. linkeddata.es/.http://coralcorpus.linkeddata.es/.https://bimerr.eu/.https://github.com/oeg-upm/LOT-resources.https://w3id.org/def/vtc#.http://www.w3.org/TR/swbp-n-aryRelations.https://spreadsheets.google.com.An example can be found on the https://docs.google.com/spreadsheets/ d/1_VcoGD5Qq6iKr8-XNGJGsOo475aiZsnKf0i01awdZkc/edit?usp=drive_ web&ouid=103242980179942151298.A template is available at https://github.com/oeg-upm/LOT-resources.https://www.atlassian.com/software/confluence.https://www.diagrams.net/.https://www.yworks.com/products/yed.https://chowlk.linkeddata.es/.https://chowlk.linkeddata.es/notation.html.http://vowl.visualdataweb.org/webvowl.html See that the edition capabilities are currently experimental26 http://owlgred.lumii.lv/. 27 http://owlgred.lumii.lv/online_visualization. 28 https://essepuntato.it/graffoo/. 29 https://gra.fo/.https://protege.stanford.edu/.https://webprotege.stanford.edu/.https://git-scm.com.https://github.com.https://gitlab.com.https://bitbucket.org.https://trello.com.https://www.atlassian.com/es/software/jira/features.https://www.vogella.com/tutorials/Jenkins/article.html.https://travis-ci.org/.https://portal.etsi.org/STF/STFs/STF-HomePages/STF578.LOT is thought to be adopted by engineers. Therefore, it can be a contribution, not only in projects involving software engineers, but also engineers of other disciplines. An example is the application to Model-Based System Engineering (https://www.omgwiki.org/MBSE/doku.php?id=mbse:ontology)This information could be provided to reviewers if requested in a confidential way.http://agroportal.lirmm.fr.