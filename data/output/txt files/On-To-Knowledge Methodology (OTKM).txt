Introduction
In recent years Knowledge Management (KM) has become an important success factor for enterprises. Increasing product complexity, globalization, virtual organizations or customer orientation are developments that ask for a thorough and systematic management of knowledge -within an enterprise and between several cooperating enterprises. Obviously, KM is a major issue for human resource management, enterprise organization and enterprise culture -nevertheless, information technology (IT) plays the crucial enabler for many aspects of KM. As a consequence, KM is an inherently interdisciplinary subject.IT-supported KM solutions are built around some kind of organizational memory There exist various proposals for methodologies that support the systematic introduction of KM solutions into enterprises. One of the most prominent methodologies is CommonKADS that puts emphasis on an early feasibility study as weH as on constructing several models that capture different kinds of knowledge needed for realizing a KM solution Knowledge Process
Fig. The here presented methodology was developed and applied in the EU project On-To-KnowledgeImplementation and Invention of KM Applications
To implement and invent any KM application, one has to consider different processes (cf Figure Software engineering (SE) for knowledge management applications has to fit to the other processes. Especially the requirements coming from the knowledge processes need to be reflected.In the following sections we will now focus on the Knowledge Meta Process as the core process and illustrate some cross-links to the other mentioned processes.Knowledge Meta Process
The Knowledge Meta Process (cf Figure Feasibility Study
Any knowledge management system may function properly only if it is seamlessly integrated in the organization in which it is operational. Many factors other than technology determine success or failure of such a system. To analyze these factors, we initially start with afeasibility study Kickoff
In the kickoff phase the actual development of the ontology begins. Sirnilar to requirements engineering and as proposed by Refinement
During the kick-off and refinement phase one might distinguish in general two concurrent approaches for modeling, in particular for refining the serni-formal ontology description by considering relevant knowledge sources: top-down and bottom-up. In a top-down-approach for modeling the domain one starts by modeling concepts and relationships on a very generic level. Subsequently these items are refined. This approach is typically done manually and leads to a high-quality engineered ontology. Available top-level ontologies may here be reused and serve as a starting point to develop new ontologies. In our example scenario we encountered a middle-out approach, i.e. to identify the most important concepts which will then be used to obtain the remainder of the hierarehy by generalization and speeialization. However, with the support of an automatie doeument analysis, a typical bottom-up-approaeh may be applied. There, relevant eoneepts are extraeted semi-automatieally from available doeuments. Based on the assumption that most eoneepts and eoneeptual struetures of the domain as weIl the eompany terminology are deseribed in doeuments, applying knowledge aequisition from text for ontology design helps building ontologies automatieally.To formalize the initial semi-formal deseription of the ontology into the target ontology, ontology engineers firstly form a taxonomy out ofthe semi-formal deseription of the ontology and add relations other than the "is-a" relation whieh forms the taxonomical strueture. The ontology engineer adds different types of relations as analyzed e.g. in the eompeteney questions to the taxonomie hierarehy. However, this step is eyc1ie in itself, meaning that the ontology engineer now may start to interview domain experts again and use the already formalized ontology as a base for diseussions. It might be helpful to visualize the taxonomie hierarchy and give the domain experts the task to add attributes to eoncepts and to draw relations between coneepts (e.g. we presented them the taxonomy in form of a mind map as mentioned in the previous seetion). The ontology engineer should extensively document the additions and remarks to make ontologie al eommitments made during the design explicit.The outcome of this phase is the "target ontology", that needs to be evaluated in the next step. The major decision that needs to be taken to finalize this step is whether the target ontology fulfills the requirements eaptured in the previous kiekoff phase. Typically an ontology engineer eompares the initial requirements with the eurrent status of the ontology. This decision will typieally be based on the personal experienee of ontology engineers. As a good rule of thumb we diseovered that the first ontology should provide enough "flesh" to build a prototypical applieation. This applieation should be able to serve as a first prototype system for evaluation.Evaluation
We distinguish between three different types of evaluation: (i) teehnology-foeussed evaluation, (ii) user-focussed evaluation and (iii) ontology-focused evaluation.Our evaluation framework for technology-focussed evaluation consists of two main aspeets: (i) the evaluation of properties of ontologies generated by development tools, (ii) the evaluation of the teehnology properties, i.e. tools and applications which inc1udes the evaluation of the evaluation tool properties themselves. In an overview these aspeets are structured as follows:(i) Ontology properties (e.g. language eonformity (Syntax), eonsisteney (Semanties» and (ii) teehnology properties (e.g. interoperability, turn around ability, sealability ete.).The framework shown above eoneentrates on the technical aspeets of ontologies and related ontologies. However, the aspeet of user-focussed evaluation remains open. The most important point from our perspective is to evaluate whether users are satisfied by the KM application. More speeifie, whether an ontology based applieation is at least as good as already existing applieations that solve similar tasks.Beside the above mentioned process oriented and pragmatic evaluation methods, one also need to formally evaluate ontologies. One of the most prominent approaches here is the OntoClean approach (cf e.g. The outcome of this phase is an evaluated ontology, ready for the roll-out into a productive system. However, based on our own experiences we expect in most cases several iterations of "Evaluation -Refinement -Evaluation" until the outcome supports the decision to roll-out the application. The major decision that needs to be taken for finalizing this phase is whether the evaluated ontology fulfills all evaluation criteria relevant for the envisaged application of the ontology.Application & Evolution
The application of ontologies in productive systems, or, more specifically, the usage of ontology based systems, is being described in the following Section 6.4 that illustrates the knowledge process.The evolution of ontologies is primarily an organizational process. There have to be strict rules to the update, insert and delete processes of ontologies (cf The outcome of an evolution cycle is an evolved ontology, i.e. typically another version of it. The major decision to be taken is when to initiate another evolution cycle for the ontology.Knowledge Process
Once a KM application is fully implemented in an organization, knowledge processes essentially circle around the following steps (cf Figure • Knowledge creation and/or import of documents and meta data, i.e. contents need to be created or converted such that they fit the conventions of the company, e.g. to the knowiedge management infrastructure of the organization; • then knowledge items have to be captured in order to elucidate importance or interlinkage, e.g. the Iinkage to conventionalized vocabulary of the company by the creation of relational metadata; • retrieval of and access to knowledge satisfies the "simple" requests for knowledge by the knowledge worker; • typically, however, the knowiedge worker will not only recall knowledge items, but she will process it for further use in her context. Example: Skills Management @ Swiss Life
We now give an example of the Knowledge Meta Process instantiation of a skills management case study at Swiss Life (cf. "MS Word". To tackle these problems, ontologies offer extern al representations for different languages and allow for representation of synonymity. Figure Feasibility Study
For identifying factors which can be central for the success or failure of the ontology development and usage we made a requirement analysis of the existing skills management environment and evaluated the needs for a new skills management system. We identified mainly the human resources department and the management level of all other departments as actors and stakeholders for the skills management. After finding the actors and stakeholders in the skills management area, we named the ontology experts for each department, which are preferably from the associated training group of each department.Kickoff
The departments private insurance, human resources and IT constitute three different domains that were the starting point for an initial prototype. The task was to develop a skills ontology for the departments containing three trees, viz. for each department one. The three trees should be combined under one root with cross-links in between. The root node is the abstract concept "skills" (which means in German "KenntnisselFaehigkeiten") and is the starting point to navigate through the skills tree from the top.During the kickoff phase two workshops with three domain experts During this stage a lot of "concept islands" were developed, which were isolated sets of related terms. These islands are subdomains of the corresponding domain and are self-contained parts like "operating systems" as sub domain in the IT domain. After developing these concept islands it was necessary to combine them into a single tree. This was a more difficult part than assembling the islands, because the islands were interlaced and for some islands it was possible to add them to more than -. one other island, which implies awkward skills trees that contain inconsistencies after merging. For each department one skills tree was built in separate workshops. A problem that came up very early was the question where to draw the li ne between concepts and instances. E.g. is the programming language Java instantiated by "jdk1.3" or is "jdk1.3" so generic that it still belongs to the concept-hierarchy? Another problem was the size of the ontology. What is the best depth and width of each skills tree? OUf solution was, that it depends on the domain and should be determined by the domain expert.As result of the kick-off phase we obtained the serni-formal ontology descriptions for the three skins trees, which were ready to be formalized and integrated into a single skins ontology. At this stage the skins trees reached a maturity that the combination of them caused no major changes for the single skins trees.Refinement
During the refinement phase we formalized and integrated the serni-formal ontology descriptions into a single coherent skins ontology. An important aspect during the formalization was (i) to give the skins proper names that uniquely identify each skin and (ii) to decide on the hierarchical structure of the skins. We discussed two different approaches for the hierarchical ordering: we discovered that categorization of skins is typically not based on an is-a-taxonomy, but on a much weaker HASSUBTOPIC relationship that has implications for the inheritance of attached relations and attributes. However, for our first prototype this distinction made no difference due to rnissing cross-taxonornical relationships. But, according to In a second refinement cyc1e we added one more relation type, an "associative relation" between concepts. They express relations outside the hierarchic skins tree, e.g. a relation between "HTML" and "JSP", which occur not in the same tree, but correspond with each other, because they are based on the same content. "HTML" is in the tree "mark-up languages", while the tree "scripting languages" contains "JSP". This is based on the basic characteristics and the history of both concepts, which changed over time. But in reality they have a c10se relationship, which can be expressed with the associative relation.The other task in this phase was to integrate the three skins ontologies into one skins ontology and elirninate inconsistencies in the domain ontology parts and between them. Because the domain ontologies were developed separately, the merger ofthem caused some overlaps, which had to be resolved. This happened for example in the computer science part of the skins trees, where the departments IT and private insurance have the same concepts like "Trofit" (which is a Swiss Life specific application). Both departments use this concept, but each uses a different view. The IT from the development and the private insurance from the users view. Additionally the personal skills of any employee are graded according to a generic scale of four levels: basic knowledge, practical experience, competency, and top specialist. The employees will grade their own skins themselves. As known from personal contacts to other companies (e.g. Credit Suisse, ABB and IBM), such an approach proved to produce highly reliable information.As a result at the end of the refinement phase the "target skills ontology" consisted of about 700 concepts, which could be used by the employees to express their skin profile.Application & Evolution
The evaluation of the prototype and the underlying ontology was unfortunately skipped due to internal restructuring at Swiss Life which led to a c10sing down of the whole case study.Still, we considered the fonowing aspects for the evolution of our skins management application: The competencies needed from employees are a moving target. Therefore the ontologies need to be constantly evaluated and maintained by experts from the human resource department. New skins rnight be suggested by the experts themselves, but mainly by employees. Suggestions inc1ude both, the new skin itself as weIl as the position in the skills tree where it should be placed. While employees are suggesting only new skills, the experts decide which skills should change in name and/or position in the skills tree and, additionally, decide which skill will be deleted. This was seen as necessary to keep the ontology consistent and to avoid that e.g. similar if not the same concept appear even in the same branch. For each ontology (and domain) there should exist adesignated ontology manager who decides if and how the suggested skill is integrated.Related Work on Methodologies
A first overview on methodologies for ontology engineering can be found in CommonKADS Cyc Recently, the DOGMA modelling approach The Enterprise Ontology The KACTUS SENSUS TOVE Conclusion
The described methodo10gy was deve10ped and app1ied in the On-To-Know1edge project. One of the core contributions of the methodology that could not be shown here is the 1inkage of available too1 support with case studies by showing when and how to use too1s during the process of deve10ping and mnning onto10gy based applications in the case studies (cf. Lessons 1earned during setting up and emp10ying the methodology in the On-To-Know1edge case studies inc1ude: (i) different processes drive KM projects, but "Human Issues" might dorninate other ones (as already outlined by Davenport In this chapter we have shown a process oriented methodology for introducing and maintaining ontology based knowledge management systems. eore to the methodology are Knowledge Processes and Knowledge Meta Processes. While Knowledge Meta Processes support the setting up of an ontology based application, Knowledge Processes support its usage. Still, there are many open issues to solve, e.g. how to handle a distributed process of emerging and aligned ontologies that is likely to be the scenario in the semantic web.' 6 .Fig. 6 . 3 .
Fig. 6 . 4 .
http://www.ontoknowledge.orghttp://dagstuhl-km-2000.aitb.uni-karlsruhe.de/Thanks to Urs Gisler, Valentin Schoeb and Patrick Shann from Swiss Life for their efforts during the ontology modelling.OntoWeb, a European thematic network, see hup://www.ontoweb.org for further information.9 Cyc knowledge base, see http://www.cyc.com 10 HPKB, see http://reliant.teknowledge . com/HPKB/about/about .html