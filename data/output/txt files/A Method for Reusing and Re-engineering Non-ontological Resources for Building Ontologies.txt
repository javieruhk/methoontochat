Abstract
Current well-known methodologies for building ontologies do not consider the reuse and possible subsequent re-engineering of existing knowledge resources. The ontologization of non-ontological resources has led to the design of several specific methods, techniques and tools. These are mainly specific to a particular resource type, or to a particular resource implementation. Thus, everytime ontology engineers are confronted with the task of re-engineering a new resource into an ontology, they develop ad-hoc solutions for transforming such resource into a single ontology.Within the context of the NeOn project, we propose a novel methodology for building ontology networks: the NeOn Methodology, a methodology based on scenarios. One of these scenarios is Building Ontology Networks by Reusing and Reengineering Non-Ontological Resources. As opposed to custom-building silos of single ontologies from scracth, this new scenario emphasizes the re-engineering of knowledge resources for building ontologies that are connected with other ontologies in the ontology network. The scope of this thesis lies in this scenario of the NeOn Methodology and in the use of re-engineering patterns for transforming non-ontological resources components into ontology representational primitives. Specifically, this thesis presents the following main contributions:• A categorization of non-ontological resources, made by defining the term non-ontological resources and by proposing a three-level categorization of them according to the type, data model, and implementation of the resource.• A metadata vocabulary, NoRMV, for describing non-ontological resources.• Methodological guidelines for reusing available non-ontological resources, which have reached some degree of consensus by the community when building ontologies.• Methodological guidelines for transforming the non-ontological resources selected into ontologies by re-engineering patterns.• A set of re-engineering patterns for transforming classification schemes, thesauri, and lexica into ontologies.• A software library, NOR 2 O, that implements the transformations suggested by the re-engineering patterns when building ontologies.The integrated framework proposed in this thesis allows speeding up the ontology development, thus saving time and effort. vResumen
Las metodologías disponibles para el desarrollo de ontologías no tienen en cuenta la reutilización y posible re-ingeniería de recursos de conocimiento disponibles. La ontologización de recursos no-ontológicos ha dado lugar al diseño de varios métodos, técnicas y herramientas. Éstas son específicas para un tipo o implementación particular del recurso que se va transformar. Por lo tanto, cada vez que los ingenieros ontológicos se enfrentan a la re-ingeniería de un nuevo recurso en una ontología, tienen que desarrollar soluciones ad-hoc para poder transformar dicho recurso en una ontología.Dentro del contexto del proyecto NeOn, se ha propuesto la Metodología NeOn, una metodología novedosa basada en escenarios, para desarrollar ontologías en red. Uno de estos novedosos escenarios es el de la Construcción de Ontologías mediante la Reutilización y Re-ingeniería de Recursos No-ontológicos. Al contrario que la construcción personalizada de silos de ontologías simples partiendo desde cero, este nuevo escenario destaca la re-ingeniería de recursos de conocimiento para la construcción de ontologías que están conectadas con otras dentro de la red de ontologías. El ámbito de esta tesis se circunscribe al escenario de la Metodología NeOn así como al uso de patrones de re-ingeniería para transformar los componentes de recursos no-ontológicos en elementos de una ontología. Esta tesis presenta específicamente las siguientes contribuciones:• Una categorización de recursos de conocimiento, definiendo el término de recurso no-ontológico y presentado una clasificación de los mismos de acuerdo al tipo, modelo de datos e implementación.• Un vocabulario de metadatos para describir los recursos no-ontológicos, NoRMV.• Guías metodológicas para el proceso de reutilización de recursos no-ontológicos, que hayan alcanzado un grado de consenso dentro de una comunidad, para la construcción de ontologías.• Guías metodológicas para el proceso de re-ingeniería de recursos no-ontológicos en ontologías, mediante el uso de patrones de re-ingeniería.• Una librería de patrones de re-ingeniería para transformar esquemas de clasificación, tesauros y lexicones en ontologías.• Una librería de software, NOR 2 O, que implementa las transformaciones sugeridas por los patrones de re-ingeniería para la construcción de ontologías.Todo el marco propuesto en esta tesis permite acelerar el desarrollo de ontologías reduciendo así costes de tiempo y esfuerzo. Ontologies are being used to model a domain of knowledge and to share information. They are found in knowledge engineering, artificial intelligence, computer science, and the Semantic Web, among others fields, as a form of knowledge representation of the world, or some part of it. The word ontology is taken from Philosophy, where it means a systematic explanation of existence. In the field of Artificial Intelligence there are many definitions for it, a collection of which appears in Overview of Some Methodologies for Building Ontologies
Research on Ontology Engineering methodologies has provided methods and techniques for developing ontologies from scratch. Well-recognized methodological approaches such as METHONTOLOGY During the last decade, specific methods, techniques and tools were proposed for building ontologies from available knowledge resources. First, ontology learning methods and tools were proposed to extract relevant concepts and relations from structured, semi-structured, and non-structured resources The literature presents a wide set of methods and tools for the ontologization of non-ontological resources. This ontologization of resources has led to the design of several specific methods, techniques and tools The analysis of the ontologies developed by distinct research groups in different international and national projects have revealed that there are different alternative ways or possibilities to build ontologies by reusing and re-engineering the available knowledge resources used by a particular community. However, at this stage we can state that all the projects perform an ad-hoc transformation of the resources available for building ontologies.• Knowledge Web• The SEKT• The UMLS Project• The UK PRODIGY CONTEXT
• The Knowledge Nets 5 project aims to investigate the impact of the Semantic Web technologies on electronic markets; one particular objective of this project is to build ontologies by reusing existing taxonomies for the description of skills as well as the classification of job profiles and industrial sectors within the job recruitment domain.• Jimeno-Yepes et al. They have applied their approach to a real scenario, the Health-e-Child (HeC) project 6 and have evaluated the impact of filtering and re-organizing several resources.• The e-POWER project 7 aims to integrate heterogeneous components by means of a semantically-enhanced middleware, which operates between the portal and the web services interfacing the functionalities of back-offices.As it can be inferred from above, a new ontology development paradigm started approximately in 2007, whose emphasis was on the reuse and possible subsequent re-engineering of knowledge resources, as opposed to custom-building new ontologies from scratch. However, in order to support and promote such reusebased approach, new methods, techniques, and tools are needed.Non-ontological Resources
The knowledge resources, reused in the aforementioned projects for building ontologies, contain, readily available, a wealth of category definitions and reflect some degree of community consensus. In this thesis, we refer to non-ontological resources (NOR) 8 as those knowledge resources whose semantics have not yet been formalized explicitly by means of ontologies. Examples of NORs are classification schemes, thesauri, lexica, and folksonomies, among others. This type of resources encodes different types of knowledge and can be implemented in different ways.Our analysis of the literature has revealed different ways of categorizing nonontological resources. Thus Maedche et al. 5 http://wissensnetze.ag-nbi.de/ 6 http://www.health-e-child.org/ 7 http://lri.jur.uva.nl/ ˜epower/ 8 Along this thesis we use either NOR or Non-ontological resource without distinction.As mentioned before, an ontology Furthermore, non-ontological resources usually contain terminology already agreed upon by a broad community of people, who have a given protocol for that. So, at least the labels used for naming terms are agreed on by consensus. Therefore, it is important to (1) select the appropriated resources, and (2) transform them into ontologies. In this way, the ontologies generated will have reached consensus within the ontological community. In addition, this reuse and possible subsequent re-engineering of existing resources will also speed up the ontology development; therefore, we will save time, effort and resources.Along with this thesis we will work with non-ontological resources, specifically classification schemes, thesauri and lexica.NeOn Methodology for Building Ontology Networks
Starting in 2007, the NeOn project The NeOn Methodology is a scenario-based methodology. It proposes nine scenarios for building ontology networks collaboratively, emphasizing the reuse and re-engineering of knowledge resources. The identified scenarios that may arise during the ontology (network) development are the following:• Scenario 1: From specification to implementation.• Scenario 2: Reusing and re-engineering non-ontological resources.• Scenario 3: Reusing ontological resources.• Scenario 4: Reusing and re-engineering ontological resources.• Scenario 5: Reusing and merging ontological resources.• Scenario 6: Reusing, merging and re-engineering ontological resources.• Scenario 7: Reusing ontology design patterns.• Scenario 8: Restructuring ontological resources.• Scenario 9: Localizing ontological resources.Figure Patterns in Ontology Engineering
In the (Object-Oriented) software community, patterns are used to describe software design structures that can be used over and over again in different systems. They provide a general solution that has to be applied in a particular context, in which the design considerations serve to decide whether the pattern is useful and how it could be implemented best In the ontology engineering community the idea of applying patterns for modelling ontologies was proposed by Peter Clark As stated in the section 1.1.1, the re-engineering methods, techniques and tools that ontologize non-ontological resources are mainly specific to a particular resource type or to a particular resource implementation. Along this thesis we propose a set of re-engineering patterns for transforming available non-ontological resources, which have reached some degree of consensus, into ontologies. Also, we will try to demonstrate that the use of re-engineering patterns for transforming non-ontological resources into ontologies has several advantages: patterns (1) embody expertise in guiding a re-engineering process, (2) improve the efficiency of the re-engineering process, (3) make the transformation process easier for ontology engineers, and (4) speed up the ontology development process.Thus, in this thesis we propose methodological guidelines to address these research problems, as well as a set of patterns that make explicit the hidden transformation decisions in the conversion scripts used in the ad-hoc approaches. Hence, it will be easier for ontology engineers to (1) reuse the hidden transformation decisions according to the type and implementation of the resources, and (2) perform the transformation of the resources into ontologies by saving time and effort.Therefore, here we propose a model as well as methods and tools for transforming non-ontological resources into ontologies by using re-engineering patterns.Thesis Structure
The remainder of the thesis proceeds as follows:• Chapter 2 describes the state of the art of the topics of interest in this work.For each topic we analyze the limitations and open research problems, emphasizing those to which we provide solutions.• Chapter 3 provides a presentation of the objectives and main contributions of the thesis. Because of the limitations found in the state of the art, we describe first the overall objectives of the thesis and then the specific ones.THESIS STRUCTURE
Then, we introduce our contributions to the current state of the art, followed by the presentation of the assumptions, hypotheses and restrictions of this work.• Chapter 4 explains the research methodology followed when designing the method for reusing and re-engineering non-ontological resources into ontologies, and the general framework for describing such a method.• Chapter 5 presents our contribution to the topic of reusing non-ontological resources. First we provide a definition of the non-ontological resources.Then, we present a categorization of non-ontological resources. Finally, we describe the methodological guidelines proposed for the non-ontological reuse process.• Chapter 6 introduces a general method for re-engineering non-ontological resources into ontologies. We start by introducing the model for reenginee-ring non-ontological resources with re-engineering patterns. Then, we describe the methodological guidelines proposed for the non-ontological resource re-engineering process.• Chapter 7 presents the patterns for re-engineering classification schemes into ontologies. First we define classification schemes and describe their main characteristics. Then we depict the set of patterns we have created for transforming classification schemes into ontologies.• Chapter 8 describes the patterns for re-engineering thesauri into ontologies. We start by defining thesauri and describing their main characteristics. Then we present the set of patterns we have created for transforming thesauri into ontologies.• Chapter 9 presents the patterns for re-engineering lexica into ontologies.First we define lexica and describe their main characteristics. Then we depict the set of patterns we have created for transforming lexica into ontologies.• Chapter 10 describes the technological support for the model and method proposed. First, we present the software library, NOR 2 O, that carries out the transformation process suggested by the patterns. Next, we depict a pattern library that includes the set of patterns for re-engineering non-ontological resources into ontologies.• Chapter 11 is dedicated to evaluation. We have divided this chapter into two parts. The first one describes the evaluation, which is focused on all the methodological aspects related to the reuse and re-engineering of nonontological resources for building ontologies. The second part deals with the evaluation of the technology.• Chapter 12 provides the conclusions and future lines of work.CHAPTER 1. INTRODUCTIONDissemination of Results
To conclude the introduction, it is important to remark that parts of this thesis have been internationally disseminated. A summary of the whole thesis has been published in  STATE OF THE ART
In this chapter we present an exhaustive analysis of the state of the art of the topics of interest covered in this thesis and a discussion on the limitations of the research works on the state of the art. We start with the presentation of a framework for comparing the methods and tools that permit reusing and re-engineering nonontological resources when building ontologies. Then, we provide the background on patterns for re-engineering. Finally, we conclude by summarizing the limitations found in the state of the art.A Comparative Framework of Methods and Tools for
Reusing and Re-engineering NORs into OntologiesIn this section we present a comparative study of the most outstanding methods and tools for reusing and re-engineering non-ontological resources into ontologies.To carry out this study we have established a common framework with which to compare the main characteristics of the different methods and tools. The section is organized as follows: Section 2.1.1 introduces the framework for evaluating the methods and tools employed when reusing non-ontological resources and re-engineering them into ontologies. Section 2.1.2 describes the methods for reusing and re-engineering non-ontological resources. Section 2.1.3 depicts the tools available for this purpose. Finally, Section 2.1.4 presents the results and conclusions of the methods and tools evaluated in this comparative study.Evaluation Framework
In this section we set up a framework for comparing the methods and tools required to reuse non-ontological resources and re-engineer them into ontologies. The framework is organized in four dimensions (the non-ontological resource, the reuse process, the transformation process, and the resultant ontology) that gather several features with which to compare the approaches proposed in the literature. The first dimension analyses the features of a NOR; the second covers the selection CHAPTER 2. STATE OF THE ART of the NORs; then, the third is focused on the transformation process, whereas the fourth is centred on the features of the resultant ontology.  • The data model • With regard to the implementation we can classify non-ontological resources into (1) databases, (2) XML files, (3) flat files, and (4) spreadsheets.A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
Features of the reuse process
• The research work provides some methodological guidelines that support the selection of the resources to be transformed.• The reuse process is supported by a tool or a set of tools.• The research work keeps track of the provenanceFeatures of the transformation process
• The transformation process may follow one of the following approaches:(1) ABox transformation (2) TBox transformation • The research work performs the transformation either (1) on the syntactic level; or (2) on the semantic level. The syntactic level deals with the ability to structure the representation in structured sentences, formulas or assertions. This level includes the transformations of resource component definitions according to the grammars of the source and target formats • The research work makes explicit the semantics hidden in the relations of the non-ontological resource terms, e.g., subClassOf , partOf .• The research work relies on (1) additional resources, or (2) a human domain expert for making explicit the semantics hidden in the relations of the NOR terms.• The transformation process can be (1) automatic, (2) semi-automatic, and(3) manual.CHAPTER 2. STATE OF THE ART
• The research work provides some methodological guidelines that support the transformation process.• The list of the techniques employed in the transformation process are clearly identified: mapping rules, re-engineering patterns, etc.• The transformation process is supported by a tool or a set of tools. • The components of the ontology generated are classes, attributes, relations, or instances.A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
• The ontology implementation language is OWL or RDF(S).• The research work generates a single ontology or several ontologies. However, we do not distinguish whether the ontologies generated are interconnected or not.Methods for Reusing and Re-engineering Non-ontological Resources
In this section, we describe the most significant methods for reusing and re-engineering non-ontological resources taking into account the features previously identified in the framework. To do this, we analyse the literature from two complementary perspectives: First, in Section 2.1.2.1 we describe the methods for building ontologies by means of transforming different types of resources (classification schemes, thesauri, lexicons and folksonomies). Second, in Section 2.1.2.2 we analyze the methods based on the implementation of the resources (database, XML, flat file and spreadsheet).Methods centred on the non-ontological resource type
In this section we present the most outstanding methods on reusing and re-engineering non-ontological resources. Specifically, we summarize methods for building ontologies from classification schemes, folksonomies, lexica and thesauri.Methods for building ontologies from classification schemes
The two main methods for transforming classification schemes are the GenTax • GenTax is a method presented by Hepp et al. Gentax assumes that the non-ontological resource is already selected for its transformation; therefore, it provides neither methodological guidelines nor tools for the reuse process. Moreover, GenTax does not manage the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.This method performs a semi-automatic TBox transformation, considering the syntactic and semantic levels. It makes explicit the semantics of the relations of the NOR categories. It also sets an ad-hoc and some taxonomic CHAPTER 2. STATE OF THE ART relations among the NOR categories. It provides methodological guidelines for the transformation, but does not clearly identify the techniques employed in the transformation. The transformation process is supported by a tool, SKOS2GenTax, which consists of a Java program, that accesses the NOR categories via an ODBC link.Finally, the method produces a single lightweight ontology in OWL DLP or RDF(S). The ontology components generated are classes and relations. The method presented by Hakkarainen et al. transforms a specific nonontological resource, the ISO 15926-2 standard, but it provides neither methodological guidelines nor tools for the reuse process. Moreover, the method does not keep the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.This method consists of (a) two transformation protocols, which are based on transformation rules, and (b) two inverse transformation protocols, which have the purpose of examining the possible loss of semantics. The method peforms a semi-automatic TBox transformation and considers the syntactic and semantic levels. It translates the whole set of subtype relations into sub-ClassOf relations. Additionally, it provides a set of methodological guidelines for the transformation and relies on transformation rules as the technique employed. However, not a single tool supporting the method is mentioned.The transformation protocols generate a lightweight single ontology in OWL DL. The ontology components generated are classes, attributes, and relations. • Abbasi et al. Methods for building ontologies from folksonomies
A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
Their method assumes that non-ontological resource is already selected for its transformation, so it provides neither methodological guidelines nor tools for the reuse process. Moreover, the method does not consider the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.The method consists in (1) selecting the ontologies relevant to the tags by means of SwoogleThis method populates several lightweight ontologies, i.e., the ontology components generated are instances, although it does not mention the ontology language used.• Maala et al.'s method This method transforms a specific non-ontological resource, Flickr tags, but it provides neither methodological guidelines nor tools for the reuse process.Nor does the method take into account the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.Its authors analyse the tagging habits and the tagging content of the photos. To accomplish this, they rely on additional resources for the conversion such as (1) WordNet, which has been completed with extra information, (2) a database containing geographical locations and (3) an ontology of things. The method performs an automatic population, though it only considers the syntactic level. However, it does not make explicit the semantics of the relations of the NOR elements, although it provides methodological guidelines for the transformation. Nor does it clearly identify the techniques employed in the transformation. In addition, not a single tool supporting the method is mentioned.This method populates a lightweight single ontology and the ontology components generated are instances, which are expressed in RDF.CHAPTER 2. STATE OF THE ART
Methods for building ontologies from lexica The two main methods for transforming lexica are presented in • The method of van Assem et al. In this method the authors include a process for designing the conversion of the resource, as well as a set of the requirements for the conversion. Some of the requirements include the following recommendations: Basically, the method consists in (1) creating a set of classes for each of the main components of WordNet: classes for every word, synset and sense; (2) modelling words, synsets and senses belonging to WordNet as instances of the previously created classes; and (3) coding part/s of the semantics related to each instance by means of the URIs used to identify each instance.The method performs a semi-automatic ABox transformation, considering the syntactic level, but it does not make explicit the semantics of the relations of the NOR elements. However, it provides methodological guidelines for the transformation although it does not clearly identify the techniques employed in the transformation. The transformation process is supported by Swi-PrologThis method produces a single lightweight ontology in RDF(S)/OWL Full. The ontology components generated are classes, attributes, relations, and instances.• Gangemi et al. A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
This method assumes that the non-ontological resource is already selected for its transformation; however, it provides neither methodological guidelines nor tools for the reuse process. Nor does it keep the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.This is a hybrid method because it employs top-down techniques and tools from formal ontologies and bottom-up techniques from computational linguistics and machine learning. It can automatically extract association relations from WordNet elements and interpret those associations in terms of a set of conceptual relations, formally defined in the DOLCE The method consists in (1) bottom-up learning of association links (A-links), in which WordNed glosses are analysed, and A-links between a synset and the synsets in its gloss are created; and(2) top-down learning, in which the DOLCE ontology is used to interpret A-links in terms of axiomatic conceptual relations.The method performs a semi-automatic TBox transformation, regarding the syntatic and semantic levels. Moreover, it makes explicit the semantics of the relations of the WordNet concepts (originally called synsets) by applying natural language techniques to their glosses and then using DOLCE ontology for making explicit the semantics of the ad-hoc relations (A-links). It provides methodological guidelines for the transformation. However, not a single tool supporting the method is mentioned.The method generates a single lightweight ontology implemented in DAML+OIL.The components of the ontology generated are classes, attributes, and relations.Methods for building ontologies from thesauri
The six main methods for transforming thesauri are presented in • Hahn et al. The method assumes that the non-ontological resource, UMLS, is already selected for its transformation. Therefore, it provides neither methodological guidelines nor tools for the reuse process. Besides, it ignores the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.CHAPTER 2. STATE OF THE ART
Its authors formalize a model of partonomic reasoning that does not exceed the expressiveness of the well-understood concept language ALC This method performs a semi-automatic TBox transformation and takes into account the syntactic and semantic levels. It makes explicit the semantics of the relations of the UMLS elements by means of a biomedical domain expert. It treats the partOf/hasPart, isA, siblingOf, and associatedWith relations. It also introduces methodological guidelines for performing the transformation of the resource and relies on Ontology Design Patterns for partonomic relations. Besides, it utilizes a LOOM classifier for automatic consistency checking of the ontology generated.This method produces a single heavyweight ontology expressed in formal description logics, LOOM. The ontology components generated are classes and relations.• Van Assem et al. This method provides neither methodological guidelines nor tools for the reuse process. And nor does it take into account the resource provenance information; therefore, the resultant ontology does not keep the reference to the non-ontological resource.The method consists of (1) preparation, in which the following characteristics of the thesaurus are analysed: conceptual model, relation between the conceptual and implementation model, and relations to standards; (2) syntactic conversion, which includes a structure-preserving translation and explication of the syntax of the resource; (3) semantic conversion, which includes the explication of semantics and specific interpretation of the thesaurus; and (4) standardization, which is an optional step for mapping a thesaurus onto a standard schema.Additionally, this method performs a semi-automatic TBox transformation, taking into account the syntactic and semantic levels. It makes explicit the semantics of the relations of the thesaurus terms by means of a domain expert. Besides, it considers the subClassOf and ad-hoc relations. It also provides methodological guidelines for performing the transformation of the thesaurus though it provides neither information about the techniques employed nor a tool to support the method.A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
This method produces a single lightweight ontology in RDF(S)/OWL Full.The ontology components generated are classes, attributes, and relations.• Van Assem et al. The development of this method is based on a process that has the following tasks: (1) defining the goal and requirements of the method; (2) comparing the available methods for transforming thesauri into ontologies; (3) developing the steps of the method (for this task the authors relied on the method of Miles et al. The method provides neither methodological guidelines nor tools for the reuse process. And it ignores the resource provenance information; therefore, the resultant ontology does not keep the reference to the non-ontological resource.In a nutshell, the steps of the method are (1) to analyse the implementation and the documentation of the resource; This method performs an automatic population, i.e., creates instances of the SKOS schema, taking into account the syntactic level. However, it does not make explicit the semantics of the relations of the thesaurus terms. In addition, it provides methodological guidelines for performing the transformation of the thesaurus though it does not provide information about the techniques employed. It relies on an ad-hoc tool for performing the transformation.This method populates a single lightweight ontology. The ontology components generated are instances expressed in SKOS RDF. and is also available in XML files. This method takes into consideration the internal data model of the ATT thesaurus.Since the method transforms a specific non-ontological resource, the ATT thesaurus, it provides neither methodological guidelines nor tools for the reuse process. Moreover, the method does not consider the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.Basically, the method consists in: (1) converting the full ATT hierarchy into a hierarchy of concepts; (2) augmenting a number of concepts with additional attributes; and (3) adding knowledge about the relation between possible values of fields and nodes in the knowledge base.The method performs a semi-automatic TBox transformation, taking into account the syntactic and semantic levels. It makes explicit the semantics of the relations of the thesaurus terms. It considers only the subClassOf relations and provides methodological guidelines for performing the transformation of the thesaurus. However, it provides neither information about the employed techniques nor a tool to support the method.Additionally, it produces a lightweight ontology. The ontology components generated are classes, attributes, and relations and they are implemented in RDF(S).• Hyvönen et al. This method assumes that the non-ontological resource, YSA, is already selected for its transformation. Therefore, it provides neither methodological guidelines nor tools for the reuse process. Nor does it manage the resource provenance information; therefore, the resultant ontology does not keep the reference to the non-ontological resource.On the other hand, it performs a semi-automatic TBox transformation, regarding the syntactic and semantic levels and makes explicit the subClassOf and partOf relations by using DOLCE 17 ontology. It also provides methodological guidelines for performing the transformation of the resource and relies on an ad-hoc tool; however, it does not provide information about the techniques employed.The resultant heavyweight ontology, based on the YSA thesaurus, is the General Finnish Ontology YSO 18 . The ontology components generated are classes, attributes, and relations, all expressed in RDF(S).A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
• Soergel et al. [SLL + 04], and Lauser et al. Moreover, it assumes that the AGROVOC thesaurus is already selected for its transformation. Therefore, it provides neither methodological guidelines nor tools for the reuse process. Nor does it provide the resource provenance information; therefore, the resultant ontology does not keep the reference to the non-ontological resource.On the other hand, the method of Soergel et al. explores the applicability of the rules-as-you-go approach to improve the re-engineering process. The steps of the transformation process are (1) to define the ontology structure;(2) to fill in values from one or more legacy KOS to the extent possible; and (3) to edit manually using an ontology editor and to make the existing information more precise by adding new information. Their method performs a manual TBox transformation, considering the syntactic and semantic levels. This method makes explicit the subClassOf and ad-hoc relations by means of a domain expert. It provides methodological guidelines for performing the transformation of the resource.Besides, this method produces a heavyweight ontology. The components of the ontology generated are classes, attributes, and relations, all expressed in OWL DL.Methods centred on the ton-ontological resource implementation
In this section we present the most relevant methods we have found in the literature: research works for building ontologies from databases, XML, flat files and spreadsheets.Methods for building ontologies from databases The two main methods for building ontologies from databases are presented in CHAPTER 2. STATE OF THE ART
• Stojanovic et al. It assumes that the resource is already selected for its transformation. Therefore, it provides neither methodological guidelines nor tools for the reuse process. Nor does it provide the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.This method consists of the following steps: (1) the capture of information from relational schema through reverse engineering (it should be added that user interaction is necessary in this step); (2) the analysis of the information obtained and the maping of database entities into ontological entities with a set of mapping rules;(3) the evaluation, validation and refining of the mapping; and (4) the creation of a knowledge base, i.e. data migration.The method performs a semi-automatic ABox transformation, taking into consideration only the syntactic level. However, it does not make explicit the semantics of the relations of the NOR elements, though it provides methodological guidelines and employs mapping rules as a technique for the transformation. For the automation of the mapping process, it relies on KAON-REVERSEIn addition, it produces a lightweight ontology and generates ontology instances. The resultant ontology is expressed in F-Logic• Barrasa et al. The framework consists of the following two main components: (1) R 2 O, which is a declarative language for the description of arbitrarily complex mapping expressions between ontology elements (concepts, attributes and relations) and relational elements (relations and attributes); and (2) ODEMapster processor, which generates Semantic Web instances from relational instances based on the mapping description expressed in an R 2 O document.The method assumes that the database is already selected for its transformation. Therefore, it provides neither methodological guidelines nor tools for the reuse process. Nor does it consider the resource provenance infor-A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
mation; therefore, the resultant ontology does not keep the reference to the non-ontological resource.This method consists in (1) discovering semi-automatically mappings between the database and ontology elements, user interaction is necessary in some special cases; (2) expressing those mappings in a formal language, R 2 O;(3) evaluating and verifying those mappings manually; and (4) exploiting those mappings for retrieving the data using ODEMapster.The method performs an automatic population of an ontology, taking into consideration the syntactic level. However, it does not make explicit the semantics of the relations of the NOR elements, although it provides methodological guidelines for the transformation.Finally, it generates ontology instances expressed in RDF.Methods for building ontologies from XML files The three main methods for building ontologies from XML files are presented in [GC05, AM05, CXH04].• García et al. This method assumes that the resource, stored in an XML file, is already selected for its transformation. Therefore it provides neither methodological guidelines nor tools for the reuse process. Nor does it consider the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.The method consists of the following steps: (1) XSD2OWL Mapping, in which the semantics implicit in the schema is captured with the XSD2OWL tool; and (2) XML2RDF Mapping, in which a translation of the XML metadata instances to RDF instances is performed with the XML2RDF tool.This method performs a semi-automatic ABox transformation, taking into account only the syntactic level. However, it does not make explicit the semantics of the relations of the NOR elements, although it provides methodological guidelines and employs mapping rules as a technique for the transformation.Finally, it produces a single lightweight ontology. The ontology components generated are classes, attributes, relations, and instances, all expressed in RDF/OWL Full.• An et al. CHAPTER 2. STATE OF THE ART
The method assumes that the resource, stored in an XML file, is already selected for its transformation. Therefore, it provides neither methodological guidelines nor tools for the reuse process. Moreover, the method does not keep the resource provenance information, so the resultant ontology does not keep the reference to the non-ontological resource.This method takes advantage of the semi-automatic mapping discovery tool Finally, it populates an ontology. The ontology components generated are and instances, all expressed in RDF.• Cruz et al. The method assumes that the resource, stored in an XML file, is already selected for its transformation. Therefore, it provides neither methodological guidelines nor tools for the reuse process. Nor does it consider the resource provenance information; so the resultant ontology does not keep the reference to the non-ontological resource.Basically, the method consists of the following phases: (1) element-level transformation, which defines the basic classes and properties of the ontology; (2) structure-level transformation, which encodes the hierarchical structures of the XML schema into the ontology; and (3) query driven data migration, which transforms the query expressed in RDQLThis method performs a semi-automatic ABox transformation, taking into account only the syntactic level, but it does not make explicit the semantics of the relations of the NOR elements. Besides, it provides methodological guidelines and employs mapping rules as a technique for the transformation.Finally, it produces a single lightweight ontology. The ontology components generated are classes, attributes, relations, and instances, all expressed in RDF(S).Methods for building ontologies from flat files
The main method to transforming flat file is presented in A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
• Foxvog et al. in The method assumes that the resource, EDI standard, is already selected for its transformation. Therefore, it provides neither methodological guidelines nor tools for the reuse process. Nor does it consider the resource provenance information; for this reason, the resultant ontology does not keep the reference to the non-ontological resource.This method, which transforms ASC X12 messages into ontologies, consists in creating (1) a vocabulary for specifying the formats of the messages; and(2) a set of instances.It also performs a semi-automatic ABox transformation, considering only the syntactic level, and provides methodological guidelines. However, it does not make explicit the semantics of the relations of the NOR elements.Finally, it produces several lightweight ontologies. The ontology components generated are classes, attributes, relations, and instances, all expressed in OWL Full, CycL, and WSML.Comparison of the methods
Tables 2.1, 2.2, 2.3 and 2.4 summarize the methods presented according to the features related to the non-ontological resource, the reuse process, the transformation process, and the resultant ontology.Tools for Re-engineering Non-ontological Resources
In this section, we describe the most significant non-ontological resource re-engineering tools according to the features identified in section 2.1.1. This section is organized into tools centred on the non-ontological resource type (section 2.1.3.1) and tools centred on the non-ontological resource implementation (section 2.1.3.2). Some of the tools give support to the methods presented in section 2.1.2. Also, it is worth mentioning that the tools provide (1) neither support for selecting the non-ontological resources for their subsequent transformation, (2) nor provenance information support.   In this section we present some of the tools we found in the literature related to the re-engineering of non-ontological resources and centred on their implementation. We first introduce some research works to transform databases, XML files, spreadsheet files and flat files into ontologies.CHAPTER 2. STATE OF THE ART
A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
Tools for transforming databases into ontologies The four main tools for transforming databases are KAON-REVERSE, ODEMapster, D2R Server and Top-Braid Composer. Next we describe each one of them.• KAON-REVERSE• ODEMapsterThe ontologies have to be expressed in OWL or RDF(S), and the instances generated are expressed in RDF.• D2R ServerIt is intended to create instances of an ontology on demand or in a batch processing, that is, to populate ontologies. D2R Server performs a semiautomatic conversion and does not consider the internal data model of the resource. Nor does it provide the resource provenance information, so the resultant ontology does not keep the reference to the database. D2R Server consists of: (1) a D2RQ mapping language, a declarative language for describing the relation between an ontology and a relational model; and (2) a D2RQ engine, that is, a plug-in for the Jena and Sesame Semantic Web toolkits. This engine uses the mappings to rewrite Jena and Sesame API calls into SQL queries against the database and passes query results up to the higher layers of the frameworks.This tool populates a single ontology. The resultant ontology instances are expressed in RDF.• TopBraid ComposerA COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
ses into ontologies, but does not consider the internal data model of the resource. This tool has a relational database importer, D2RQTopBraid performs an ABox transformation, though it does not provide the resource provenance information; therefore, the resultant ontology does not keep the reference to the database.TopBraid Composer performs the following tasks for converting databases into ontologies: (1) static import of schema, where tables become classes, columns become properties and link tables become object properties; and(2) dynamic import of actual data, where rows become instances on the fly, i.e., data can stay where it is.The tool produces a single ontology whose components are classes, attributes, relations, and instances. The resultant ontology is expressed in RDF/OWL (Full, DL or Lite).Tools for transforming XML files into ontologies
The main tools are XSD2-OWL, XML2RDF, and TopBraid Composer.• XSD2OWL and XML2RDFIt produces a single lightweight ontology whose components are classes, attributes, relations, and instances, all expressed in RDF/OWL Full.• TopBraid Composer also can convert XML files into ontologies. This tool does not consider the data model of the resource stored in the XML.It performs a semi-automatic ABox transformation and a Population, taking into consideration the syntactic level. Besides, it relies on mapping rules as a technique for performing the transformation.The ontology components generated are classes, attributes, relations, and instances. The resultant ontology is expressed in RDF/OWL (Full, DL or Lite) and the tool generates a single lightweight ontology.Tools for transforming flat files into ontologies The four main tools for transforming flat files are TopBraid Composer, ConvertToRdf, flat2rdf and Java BibTeX-To-RDF converter.• TopBraid Composer can also convert flat files into ontologies. This tool performs a semi-automatic ABox transformation, taking into account the syntactic level.CHAPTER 2. STATE OF THE ART
The ontology components generated are classes, attributes, relations, and instances. The resultant ontology is expressed in RDF/OWL (Full, DL or Lite), and the tool generates a single lightweight ontology.• ConvertToRdfIt performs a semi-automatic population of an available ontology from the data stored in the flat file. And it produces a single lightweight ontology.The resultant ontology instances are expressed in RDF.• flat2rdfThe input resources are classic Unix text files (e.g., /etc/passwd). This tool populates semi-automatically an available ontology.The tool generates a single lightweight ontology. The resultant ontology instances are expressed in RDF.• Java BibTeX-To-RDF ConverterThe input resources are plain BiBTex files (i.e. text files). This tool populates automatically an ontology from the information stored in the BiBTex filesThe resultant ontology instances are expressed in RDF.Tools for transforming spreadsheet files into ontologies The four main tools for transforming spreadsheet files are TopBraid Composer, Excel2rdf, RDF123, and XLWrap.• TopBraid Composer can also convert spreadsheets into ontologies. The tool receives Excel spreadsheets as input, but it does not consider the internal resource data model. Besides, it performs semi-automatically an ABox transformation.The ontology components generated are classes, attributes, relations, and instances. The resultant ontology is expressed in RDF/OWL (Full, DL or Lite) and the tool deals with a single lightweight ontology.• Excel2rdfA COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
The resultant ontology instances are expressed in RDF.• RDF123 [HFP + 06] is a highly flexible open source tool for transforming semi-automatically spreadsheet data into RDF. It works on CSV files and also Google spreadsheets.This tool populates semi-automatically an available ontology. Every row of a spreadsheet will generate a row graph, and the RDF graph produced for the whole spreadsheet is the merge of all row graphs, eliminating duplicated resources and triples.RDF123 consists of the following two components: (1) an RDF123 application, that is, a component whose main purpose is to give users an interactive and easy-to-use graphical interface for creating the map graph and outputting the map graph in RDF syntax; and (2) a RDF123 Web Service, which aims to provide a public service that translates online spreadsheets into RDF.This tool populates more than one ontology and the resultant ontology instances are expressed in RDF.• XLWrap [LW09] is a spreadsheet-to-RDF wrapper that is capable of transforming spreadsheets into arbitrary RDF graphs based on a mapping specification. The tool supports Microsoft Excel and OpenDocument spreadsheets such as comma (and tab) separated value (CSV) files and it can load local files or download remote files via HTTP.This tool populates semi-automatically ontologies. Every row of a spreadsheet will generate a row graph, and the RDF graph produced for the whole spreadsheet is the merge of all row graphs, eliminating duplicated resources and triples.This tool populates more than one ontology; thus, the resultant ontology instances are expressed in RDF.Comparison of the tools
Tables 2.5, 2.6 and 2.7 present the tools according to the features related to the non-ontological resource, the transformation process and the resultant ontology.Results and Conclusions
After having analysed the state of the art of the methods and tools for re-engineering non-ontological resources, we present the results of applying the evaluation framework described in section 2.1.1. The results are provided according to the features of the groups identified, namely, non-ontological resource, reuse process, transformation process, and resultant ontology. CHAPTER 2. STATE OF THE ART
Methods
• According to the type of non-ontological resource, we can state that most of the methods are focused on thesauri, classification schemes, lexicons and folksonomies, and then there is a small group which do not contemplate the type of resource. Only one method is focused on thesauri and classification schemes.• In relation to the data model, we can observe the half of the methods does not contemplate the data model of the resource for the transformation, whereas the other half does.   • With regard to the implementation of the non-ontological resource, we can state that most of the methods are focused on databases, some on XML, and flat files, and some are independent of the resource implementation. In addition, one method is focused on resources implemented in Prolog, whereas another method includes resources implemented in proprietary format, relational database, and XML.A COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
Tools
• In relation to the type of non-ontological resource, we can observe that most of the tools do not consider the type of the resource, since they are focused on the resource implementation. In addition, one tool considers classification schemes and thesauri, whereas another considers folksonomies.• As for the data model, most of the tools do not consider the data model forA COMPARATIVE FRAMEWORK OF METHODS AND TOOLS FOR REUSING AND RE-ENGINEERING NORS INTO ONTOLOGIES
the transformation.• With regard to the implementation, almost all the tools are focused on the resource implementation, many of them on databases, and some on spreadsheets, XML and flat files. Only one tool provides an integrated environment that considers resources implemented in databases, XML, flat files, and spreadsheets.To sum up we can affirm that most of the methods and tools presented are based on ad-hoc transformations for the resource type and the resource implementation. Only a few take advantage of the resource data model, an important artefact in the re-engineering process • Cope with the overall set of non-ontological resources, i.e., classification schemes, thesauri, and lexica.• Consider the internal data model of the resource.• Deal with non-ontological resources implemented in databases, XML files, flat files, or spreadsheets.Results according to the reuse process
Table In conclusion, we can say that there is a clear need for some sort of methods and tools that • Provide guidelines for the selection of the most appropriate resources for building an ontology.• Consider the provenance information of the resource.Results according to transformation process
Table Methods
• With regard to the transformation approach, the majority of the methods perform a TBox transformation, many others perform an ABox transformation and some perform a population. However, no method includes the possibility to perform the three transformation approaches.• Regarding the transformation at the syntactic and semantic levels, we can observe that this feature is closely related to the transformation approach performed by the methods. As mentioned in section 2.1.1.3, the ABox transformation disregards the informal semantics of the transformed resources, so the transformation is performed only at the syntactic level; and this also happens to the Population. On the contrary, the TBox transformation tries to enforce a formal semantics on the resources, so the transformation is performed at the syntactic and semantic levels.• As for the explicitation of the hidden semantics of the relations of the resource components, we can state that the methods performing a TBox transformation make explicit the semantics in the relations of the resource components. Most of those methods identify subClassOf relations, others identify ad-hoc relations, and some identify partOf relations. However, only a few methods make explicit the three types of relations.• With respect to how the methods make explicit the hidden semantics in the relations of the resource components, we can say that three methods rely on the domain expert for making explicit the semantics, and two rely on an external resource, e.g., DOLCE ontology. Moreover, there are two methods that rely on external resources though not for making explicit the hidden semantics, but for finding out a proper ontology and populating it.• Regarding the degree of automation, almost all the methods perform a semiautomatic transformation of the resource, three are performed automatically, and one is done manually.• As for the provision of the methodological guidelines, almost all the methods provide methodological guidelines for the transformation. However, these guidelines are not finely detailed; for instance, they do not provide information about who is in charge of performing a particular task/activity, nor when that task/activity has to be carried out.• With regard to the techniques employed, most of the methods do not mention them at all. Only a few methods establish techniques as transformation rules, lexico-syntactic patterns, mapping rules and natural language techniques.• As for the tool support, most of the methods rely on ad-hoc tools for the transformation, but only a few integrate a public available tool, such as, KAON-REVERSE, ODEMapster, XSD2OWL, or XML2RDF.Tools
• Regarding the transformation approach, most of the tools perform a population, some perform an ABox transformation, and one performs a TBox transformation. However, no tool includes the possibility to perform the three transformation approaches.• With respect to the transformation at the syntactic and semantic levels, as we observed, before this feature is closely related to the transformation approach performed by the tools. The ABox transformation is performed only at the syntactic level, and this also happens to the Population. On the contrary, the TBox transformation is performed at the syntactic and semantic level. However, almost of all the tools perform a population, three perform an ABox and a TBox transformation.• With regard to the explicitation of the hidden semantics in the relations of the resource terms, we can state that the tool performing the TBox transformation is the only one that makes explicit the semantics hidden in the relations of the NOR terms.• As for how the tools make explicit the hidden semantics in the relations of the resource terms, the only tool that makes this explicitation it does it by setting both ad-hoc and taxonomic relations among the NOR terms, though it does not state which relation is the correct. Moreover, there is one tool that relies on an external resource, though it does not do it for expliciting the hidden semantics, but for finding out a proper ontology for populating it.• With respect to the degree of automation, almost all the tools perform a semiautomatic transformation of the resource, and only two tools perform an automatic transformation.• Regarding the techniques employed, the majority of the tools do not mention them at all. Only a few methods specify techniques as mapping rules and lexico syntactic patterns.In summary, after having analysed the features related to the transformation process, we can conclude that (1) methods are mostly focused on the TBox transformation approach, whereas tools are focused on the population; (2) only a few methods and tools make explicit the hidden semantics in the relations of the NOR components, and most of them rely on the domain expert for doing it; (3) almost all the methods provide a methodological guidelines for the transformation, but they are not finely detailed; (4) only a few methods and tools specify the techniques CHAPTER 2. STATE OF THE ART employed for the transformation, and (5) there is not any integrated framework, method or corresponding tool that considers the possibility to perform the three transformation approaches. In a nutshell, we can state that there is a clear need for some sort of re-engineering methods and tools that • Include the three transformation approaches (TBox, ABox and Population).• Make explicit the hidden semantics in the relations of the NOR terms, by means of external resources in an semi-automatic way, for saving the transformation time,• Provide fully detailed guidelines for the transformation, including information on who is in charge of performing a particular task/activity and when this task/activity has to be carried out.• Integrate in a single framework the method and its corresponding tool supporting for the transformation.• Employ techniques that improve the efficiency of the re-engineering process.Results according to the ontology
Tables 2.4 and 2.7 summarize the methods and tools presented regarding the features of the resultant ontology, namely, whether the ontology is lightweight or heavyweight; the ontology components; the ontology implementation language; and whether one or more ontologies are generated.Methods
• With respect to whether the ontology is lightweight or heavyweight, most of the methods generate lightweight ontologies; only three rely on domain experts to generate heavyweight ontologies.• Regarding the ontology components, we can observe that this feature is closely related to the transformation approach performed by the methods. Methods that perform TBox transformation, generate classes, relations, and optionally attributes. Methods that perform ABox transformation, generate classes, attributes, relations and instances. Methods that perform population, generate instances.• With regard to the ontology implementation language, even though there is a large variety of languages, the ontology languages mostly used are OWL for the ontology and RDF for the instances.• As for whether the methods generate one or several ontologies, almost all the methods generate a single ontology.PATTERNS FOR RE-ENGINEERING
Tools
• Regarding whether the ontology generated is lightweight or heavyweight, we can state that almost all generate lightweight ontologies.• Concerning the ontology components, we can observe that this feature is closely related to the transformation approach performed by the tools, just like in the case of the methods.• With respect to the ontology implementation language, and taking into account that almost all the tools generate ontology instances, the language most used is RDF.• As for whether the tools generate one or several ontologies, we can state that almost all the tools generate a single ontology.After having analysed the features related to the resultant ontology, we can confirm the lack both of re-engineering methods and tools supporting several ontologies, and of the generation of ontologies with classes, attributes, relations and instances.Patterns for Re-engineering
In this section we analyse the role patterns play in software and ontology engineering, emphasizing specifically the re-engineering patterns.Software Re-engineering
This section is based on the landmark work of Byrne Several definitions have been given for software re-engineering, but the one most widely accepted comes from Chikofsky Levels of abstraction
Understanding how software is developed is useful for understanding how software can be re-engineered. The concept of levels of abstraction that underlies the development process also underlies the re-engineering process. This concept is Next, we describe briefly the software levels of abstraction proposed by • The conceptual level describes, in general terms, the functional characteristics of a system, i.e., the concept of the system (its reason for existence).• The requirements level depicts in detail the functional characteristics of a system, though it does not provide details of the internal system.• The design level describes the system characteristics, such as architectural structure, system components, interfaces between components, algorithmic procedures, and data structures. Here, we face two degrees of abstraction levels: (1) the high-level design, which expresses the architectural structure of a system, and (2) the detailed-design, which expresses the internal structure of system components.• The implementation level focuses on the description of the implementation characteristics, and is represented in a language understood by the computer.Byrne Assumption 1. The re-engineering of a software system produces a new form of the system that is better, in some way, than the original form. This assumption answers the question of why software is re-engineered. There are many different reasons for software re-engineering, and most of them assume that the available software needs to be improved.Assumption 2. Software re-engineering begins with an existing system representation expressed at some level of abstraction. The concept of levels of abstraction contributes to the understanding of software re-engineering. Thus,PATTERNS FOR RE-ENGINEERING
we can say that,on the one hand, software development starts with an idea for a system and creates a system representation for each abstraction level.On the other hand, software re-engineering starts with an existing system representation.Assumption 3. To alter a system characteristic, we have to work at the level of abstraction at which information about that characteristic is explicitly expressed. This is related to the issue of how to identify the abstraction level at which the re-engineering work should be carried out. Re-engineering changes the characteristics of a software system. To alter information about a system characteristic we have to work at either abstraction level where the characteristic is introduced, or at any level below that.Assumption 4. A system characteristic can be altered by working within a level of abstraction below the level at which information about the characteristic is explicitly expressed. However, the best re-engineering result might not be achieved. "Best possible result" means that the target system has the desired system characteristics and properties.Assumption 5. A system characteristic cannot be altered by working at a level of abstraction above the level where information on the characteristic is introduced. A characteristic cannot be altered, in the sense of manipulating information about that characteristic, by working at a higher abstraction level containing no information on that characteristic.Software re-engineering principles
According to Refinement. This principle states that the gradual decrease in the abstraction level of a system representation is caused by successively replacing available system information with more detailed information.Abstraction. This principle establishes that if a system representation at a particular abstraction level is missing or not up-to-date, then it is possible to reconstruct that representation.Alteration. Alteration is the making of one or more changes to a system representation without changing the degree of abstraction. Alteration includes the addition, deletion, and modification of information.CHAPTER 2. STATE OF THE ART
General model for software re-engineering
Here we present the general software re-engineering model proposed by Byrne Reverse Engineering. Reverse Engineering is the process of analysing a subject system to identify the system's components and their relationships and to create representations of the system in another form or at a higher level of abstraction. In reverse engineering, the requirements and essential design, structure and content of the legacy system must be recaptured. Reverse engineering does not involve changes in the system or creating a new system; it is the process of examining the system without changing its overall functionality.Alteration or Transformation. To alter a system characteristic, the work is done at the level of abstraction at which information on that characteristic is explicitly expressed. To translate the existing code to a target language no reverse engineering is needed because the alteration (re-coding) is done at the implementation level. As the level of abstraction increases, the alteration tasks change and the amount and tasks of reverse engineering also change. As for re-design changes, they might include restructuring a design architecture, altering a system's data model or a database, etc. To re-specify requirements, reverse engineering techniques must be applied to the implementation and design in order to obtain the functional characteristics. Regarding the re-thinking changes, they can result in drastic changes to aPATTERNS FOR RE-ENGINEERING
system, i.e., manipulating the concepts embodied in an existing system to create a new system that operates in a different problem domain.Forward Engineering. The new target system is created by moving downward through the levels of abstraction, that is, a gradual decrease in the abstraction level of the system representation, by successively replacing system information with more detailed information. This downward movement is actually a forward movement through the standard software development, i.e., forward engineering.Software Patterns
In this section we introduce briefly the role that patterns play in software and ontology engineering, focusing specially on software re-engineering patterns.Patterns were introduced by Christopher Alexander Software design patterns
Software design patterns The purpose of design patterns is to capture "design know-how" and to make it reusable. Design patterns can improve the structure of software, speed up implementation, simplify maintenance, and help to avoid architectural drift. Design patterns also improve communication among software developers and can empower less experienced developers to produce high-quality designs There are several classifications of software design patterns. The classification proposed by Gamma et al. Software re-engineering patterns
A kind of software patterns are the re-engineering software patterns The structure of a re-engineering pattern consists of some essential elements, which are described next.• Pattern name. The name should be short, clear, and descriptive.• Intent. It includes the description of the re-engineering process, the results and why it is desirable.• Applicability. It describes when a particular pattern is applicable and when it is not. It also comprises symptoms, reengineering goals and related patterns.• Motivation. It includes the descriptions of the legacy system and its structure as well as the refactored system and the relation between them. This is done through the use of a concrete example.• Structure. It describes the structure before and after re-engineering.• Process. It includes the description of how to perform the re-engineering and possible variants.Ontology Patterns
The idea of applying patterns to modelling ontologies was proposed by Clark et al. PATTERNS FOR RE-ENGINEERING
• The Ontology Design Patterns Public Catalog• The Ontology Design Patterns (ODP) Portal• Linked Data PatternsAccording to • Structural OPs include Logical OPs and Architectural OPs. Logical OPs are compositions of logical constructs that solve the problem of expressivity, while Architectural OPs are defined in terms of composition of Logical OPs used to affect the overall shape of the ontology.• Lexico-Syntactic ODPs can be defined as linguistic structures or schemas that consist of certain types of words following a specific order, and that permit generalizing and extracting some conclusions about the meaning they express.• Reasoning ODPs are applications of Logical OPs oriented to obtain certain reasoning results and based on the behaviour implemented in a reasoning engine.• Presentation ODPs deal with the usability and readability of ontologies from a user perspective. They are meant to be used as good practices that support the reuse of patterns by facilitating their evaluation and selection.• Summary and Discussion
This chapter has presented an exhaustive analysis of the state of the art of the various topics dealt within this thesis, and discussed their limitations.In this section we provide an overall summary of the open research problems identified and we have focused on such problems to provide methods and tools for reusing and re-engineering non-ontological resources with the aim of speeding up the ontology development.The first step is to identify the resources that the methods and tools proposed are going to deal with. For this purpose we introduce the notions of non-ontological resources and ontology (see sections 1.1 and 1.1.2). Then, we put forward our categorization of non-ontological resources according to the three different features presented in Figure (3) the resource implementation.The second step is the selection of the most appropriate non-ontological resources for ontology development. The analysis of the State of the Art reveals that there are not detailed guidelines on how to find the most suitable non-ontological resources for the development of ontologies. Most of the research studies assume that there are already suitable resources to use in the conversion. In conclusion, we can state that there is a clear need for some sort of methods, techniques and tools that help in the selection of the resources and that keep the provenance information of these resources.The third step is the transformation of the resources selected into ontologies. In this step we can state that there is a clear need for some sort of re-engineering methods that (1) cope with the overall set of NORs (i.e., classification schemes, thesauri, and lexica) in an uniform way, independently of how it has been implemented; (2) include the three transformation approches (TBox, ABox and Population); (3) make explicit the hidden semantics in the relations of the NOR terms, by means of external resources in an semi-automatic way; and (4) provide finely detailed guidelines for the transformation, including information on who is in chargeSUMMARY AND DISCUSSION
of performing a particular task/activity and when such a task/activity has to be carried out.Additionally, we have reviewed the state of the art on software re-engineering, software re-engineering patterns, and ontology patterns. All along this thesis we intend to demonstrate that the application of re-engineering patterns for transforming non-ontological resources into ontologies has several advantages. The most representative are• Improvement of the efficiency of the re-engineering process.• Ease of the transformation process for both ontology engineers and domain experts.• Improvement of the reusability of non-ontological resources.Finally, a very important matter that we would like to emphasize is the lack of an integrated method (and technological support) that addresses all the previous issues.Chapter 3OBJECTIVES AND CONTRIBUTIONS
The goal of this thesis is to investigate methods and tools for reusing and reengineering non-ontological resources when building ontologies, as opposed to custom-building new ontologies from scratch. With the thesis we have contributed to the NeOn Methodology Framework since it lies on this new paradigm. It presents a re-engineering model as well as a method and a technology for reusing and reengineering non-ontological resources when building ontologies by means of reengineering patterns. Figure i) The definition of methodological guidelines for reusing non-ontological resources when building ontologies. These methodological guidelines provide support (1) for selecting the most appropriate non-ontological resources for ontology development; and (2) for describing and providing the provenance information of the ontology generated.ii) The definition of methodological guidelines for re-engineering non-ontological resources into ontologies. The methodological guidelines (1) cope with the classification schemes, thesauri, and lexica, in an uniform way, independently of how those resources have been implemented; (2) are based on re-engineering patterns;(3) include the three transformation approches (TBox, ABox and Population); (4) make explicit the hidden semantics in the relations of the NOR terms by means of external resources in a semi-automatic way; and (5) provide support for the transformation, including information about who is in charge of performing a particular activity and when such an activity has to be carried out.iii) The development of a library of patterns for re-engineering non-ontological resources into ontologies. These patterns cover classification schemes, thesauri, and lexica. Objectives
The general objective of the thesis is to provide domain independent, and resource independent methods and tools for speeding up the ontology development process and is achieved by reusing and re-engineering as much as possible available nonontological resources. To fulfil this overall goal, we have decomposed it into the following methodological and technological objectives:Methodological Objectives
O1. The definition of methodological aspects related to the reuse of non-ontological resources for building ontologies. We propose a method that describes a set of activities and serves as a guide for selecting the most suitable nonontological resources to develop ontologies.O2. The definition of methodological aspects related to the re-engineering of non-ontological resources for building ontologies. We propose a method that guides users through the transformation of a non-ontological resource into an ontology. O4. The development of a software library, NOR 2 O, that implements the suggestions given by the re-engineering patterns. The patterns have an associated software library, that performs the suggested transformations automatically.CONTRIBUTIONS TO THE STATE OF THE ART
Contributions to the State of the Art
We have tried to provide solutions to some of the open research and technological problems (see Chapter 2) identified in the scope of this thesis.I. Regarding the methodological guidelines for carrying out the non-ontological resource reuse process, this thesis presents new advances in the state of the art in the following aspects:C1. A definition of non-ontological resources.
There is a wealth of nonontological resources that embodies knowledge about some particular domains and that represents some degree of consensus for a user community. These resources present the form of free texts, textual corpora, web pages, standards, catalogues, web directories, classification schemes, thesauri, lexica and folksonomies, among others. The definition of non-ontological resource is provided in section 5.1.C2. A categorization of non-ontological resources according to three different features: type of non-ontological resource, data model and implementation. The categorization is described in section 5.1. It should be noted that an accepted and agreed upon typology of non-ontological resources does not exist yet. This contribution is the result of the thorough analysis of the structures that NORs usually have.C3. A metadata vocabulary for non-ontological resources, NoRMV. This vocabulary allows (1) describing the available non-ontological resources, and (2) including the provenance information in the ontology generated.The vocabulary is described in Section 5.2.C4. A method for reusing non-ontological resources when building ontologies. The description of the method is included in Section 5.3.II.
Regarding the methodological guidelines for carrying out the non-ontological resource re-engineering process, the new advances in the state of the art are C5. A re-engineering model for non-ontological resources. This model is based on the software re-engineering model presented in C6. A method for re-engineering non-ontological resources when building ontologies with re-engineering patterns. This method is described in Chapter 6.III. Problems in ontology engineering can be solved by applying common solutions (as experienced in software engineering); on the other hand, Ontology Design Patterns (ODPs) can support reusability on the design side. Our third objective belongs to the Ontology Design Patterns field. We propose a library of re-engineering patterns (PR-NOR), which is included in the ontologydesignpatterns.org portalC8. A set of patterns for re-engineering thesauri into ontologies. These patterns take advantage of the thesaurus underlying data models. The data models identified for thesauri are described in Chapter 8.C9. A set of patterns for re-engineering lexica into ontologies. These patterns take advantage of the lexicon underlying data model. The data models identified for lexica are described in Chapter 9.IV. Finally, our fourth objective is to provide technological support to the patterns for re-engineering non-ontological resources. We present the following advance in the state of the art:C10. A software library, NOR 2 O, that implements the transformation suggested by the patterns. In this way, the software library covers the transformations of classification schemes, thesauri and lexica. These resources can be implemented in databases, XML files, flat files or spreadsheets. The description of this software library is included in Section 10.1.The contributions are presented in the document as follows: first, Chapter 5 presents the contributions: (C1) a definition of non-ontological resource; (C2) a categorization of non-ontological resources; (C3) a metadata vocabulary for describing non-ontological resources; and (C4) a method for reusing non-ontological 3.3. ASSUMPTIONS resources for building ontologies. Then, Chapter 6 presents (C5) our model for reengineering non-ontological resources and (C6) a method for re-engineering nonontological resources when building ontologies. Then, Chapters 7, 8, and 9 present the patterns for re-engineering classification schemes, thesauri, and lexica respectively (C7, C8, and C9). These contributions are the result of establishing which semantic additions (enrichments) have to be made after an initial transformation. Finally, Chapter 10 describes the technological support we provide for the model and method proposed, including the implementation of a software library, NOR 2 O, that carries out the transformation process suggested by the patterns (C10).Assumptions
The work described in this thesis is based on a set of assumptions described next.A1. Some claims valid in software engineering and software re-engineering are also valid in ontology engineering.A2. The Ontology Specification Activity was carried out previously, i.e. we started from a correctly created Ontology Requirements Specification Document (OR-SD).A3. The non-ontological resources to be reused and transformed are freely available and with no restriction of use.A4. The non-ontological resources to be transformed are well designed and implemented.A5. The quality of the ontologies generated can be measured as the similarity value of the ontologies generated against a gold standard ontology. This gold standard is created by human domain experts.Hypotheses
Once the assumptions have been identified, the hypotheses of our work are described. These hypotheses cover the main features of the solutions proposed.H1. The reuse and re-engineering of non-ontological resources, which have reached some degree of consensus in the community, will allow the development of ontologies in an easier and faster way.H2. It is possible to define a unified method for transforming non-ontological resources into ontologies independently (1) of the type, data model or implementation of the resource, and (2) of the target ontology to be generated, i.e., ontology schema (TBox), ontology (TBox+ABox), or ontology instances (ABox).CHAPTER 3. OBJECTIVES AND CONTRIBUTIONS
H3. The method for re-engineering non-ontological resources is extensible and adaptable to other types of resources. It can be applied to any kind of nonontological resource independently of its type, data model or implementation.H4. It is possible to create re-engineering patterns that allow generating ontologies from available non-ontological resources, namely, classification schemes, thesauri, and lexica, in an uniform way, independently (1) of how they have been implemented; (2) of the target ontology to be generated, i.e., ontology schema (TBox), ontology (TBox+ABox), or ontology instances (ABox); (3) of the domain of the resources, that is, the patterns can be used to build ontologies in different domains.H5. The re-engineering patterns proposed can be implemented in a software library that facilitates the work of ontology engineers when developing ontologies.Restrictions
Finally, there is a set of restrictions that defines the limits of our contribution and establishes future research objectives. These restrictions are the following:R1. The categorization of non-ontological resources covers semi-structured resources, but it does not cover unstructured resources, e.g., free text.R2.
NoRMV covers the description of the non-ontological resources according to the proposed categorization, but this thesis only includes the identified types, data models and implementations.R3. The method for reusing non-ontological resources considers only semi-structured resources, but does not cover unstructured resources, e.g., free text.R4. The method for re-engineering non-ontological resources covers the transformation of the whole resource, but does not cover the transformation of excerpts of the resource.R5. The method for re-engineering non-ontological resources covers the transformation of one resource per time, but does not consider the integration of several resources simultaneously or one after the other.R6. The patterns for re-engineering non-ontological resources do not generate ontologies with disjoint knowledge.R7. The software library supports the following non-ontological resource implementations: database, XML, spreadsheets and flat files.R8. The software library generates ontologies implemented in OWL Lite, and ontology instances in RDF.RESTRICTIONS
R9. The discovery of the semantics of relations among the non-ontological resource terms occurs only in the English language.R10. The whole set of techniques, with the exception of the discovery of relations, is independent of the language.R11. The evaluation of our work is restricted to the use of the results in real cases providing specific feedback.Table RESEARCH METHODOLOGY
This chapter presents the research methodology we have used when designing the method for reusing and re-engineering non-ontological resources into ontologies, as well as the main requirements that guide its development.Since the work presented in this thesis is a subset of the NeOn Methodology [SF10], we follow the same research methodology (see Chapter 4 General Framework for Describing the Method
For designing the method we have followed the "divide and conquer" strategy, that is, the general problem to be solved is decomposed into different subproblems. Then to solve each subproblem different strategies and alternatives are provided. Finally, to obtain the solution to the general problem, i.e., speeding up the ontology development process by reusing and re-engineering as much as possible available non-ontological resources, the solutions to the different subproblems are combined.The subproblems identified are (1) the selection of the most appropriate nonontological resources for building ontologies; (2) the transformation of the nonontological resources selected into ontologies; (3) the techniques used for such transformation; and (4) the technological support for the method.We introduce prescriptive methodological guidelines for reusing non-ontological resources when building ontologies, as described in Chapter 5, as a solution to subproblem (1). We provide methodological guidelines for re-engineering nonontological resources into ontologies, as described in Chapter 6, as a solution to subproblem CHAPTER 4. RESEARCH METHODOLOGY
In order to obtain the methodological guidelines for reusing non-ontological resources, we were grounded in the following approaches, as presented graphically in Figure • Existing categorization of resources. In this case, we analysed from [MS01, SAd + 07, GPS98, Hod00] different ad-hoc categorization of resources.• Previous practices and experiences. Here, we used our previous experiences in the development of ontologies within several European and National funded projects, such as the REIMDOC Project• Available ad-hoc methods. In this case, we used the ad-hoc methods [MPBS06, BA05, BHM + 05] that provide guidelines for reusing existing resources when building ontologies. To obtain the methodological guidelines for re-engineering non-ontological resources, we were grounded in the following approaches, as presented graphically in Figure • Available ad-hoc methods. In this case, we used the ad-hoc methods, described in Section 2.1, that provide guidelines for re-engineering resources. We performed an analysis of the guidelines they propose to extract and improve a preliminary set of guidelines.GENERAL FRAMEWORK FOR DESCRIBING THE METHOD
• Previous practices and experiences. Here, we used our previous experiences in the development of ontologies within several European and National funded projects, such as, the REIMDOC Project• Available Software Re-engineering practices. In this case, we based our work on the re-engineering model proposed by Byrne • Previous practices and experiences. Here we used the practices we describe in Section 2.1. Additionally, within the SEEMP project• Previous practices in the Ontology Engineering community. As we mentioned in Section 2.2.3, the ontology community is adopting the use of design patterns for modelling ontologies. We extend the current patterns in the Ontology Engineering field with patterns for re-engineering non-ontological resources into ontologies. These re-engineering patterns make use of the logical and content patterns, from the ODP portal, for generating the ontologies; therefore, the re-engineering patterns follow the best practices of the community.• Available Software Re-engineering patterns. In the software engineering community, it is well known that the reuse of resources helps to reduce costs and to disseminate good practices. This also holds for ontology engineering, where the reuse of existing knowledge can be done either by directly reusing resources as they are, or after performing a reengineering process. The underlying principle is that reuse allows saving time and money, and promotes the application of good practices. Therefore, for consolidating our patterns we have applied the concept of software re-engineering pattern. • Goal, which explains the main objective intended to achieve by the process or the activity.• Input, which includes the resources needed to carry out the process or the activity.REQUIREMENTS FOR THE PROPOSED METHOD
• Output, which includes the results obtained after carrying out the process or the activity.• Who, which identifies the people or teams involved in the process or the activity.• When, which explains in which moment the process or the activity should be carried out.• How, which includes details for carrying out the process or the activity in a prescriptive manner. A graphical workflow on how the process or the activity should be carried out is also included, with the inputs, outputs and actors involved.Requirements for the Proposed Method
The method presented in this thesis must fulfil a set of requirements that can be grouped into two main types: generic and specific requirements. The generic requirements are those that any method must fulfil, while the specific requirements of a given method are determined by factors such as the domain where the method is applied as well as cases, situations or problems it deals with. The following sections present the requirements we have considered for the design of our method.The requirements are based on those presented by Paradela Generic Requirements
• Generality. A method should be general enough and not be driven to solve ad-hoc cases or problems. Thus our method tackles the development of ontologies by reusing and re-engineering non-ontological resources.• Completeness. A method must consider all the cases presented and propose solutions to all of them. In this sense, the method here proposed considers classification schemes, thesauri and lexica; and presents methodological guidelines and patterns for these non-ontological resources.• Effectiveness. A method should solve adequately the cases proposed, independently of the person using such a method. Therefore, it should be more prescriptive than descriptive. Thus our goal is to describe the method in a simple way, and any person (a software developer or an ontology practitioner) should be able to understand and follow it without any special effort.• Efficiency. A method must be efficient, that is, be able to achieve its objective. This means that the method should allow the construction of ontologies with fewer resources (time, money, etc.) and better quality. We will describe and carry out the necessary experiments using the method for validating this requirement.• Consistency. A method must produce the same set of results for the same problem, independently of who employs it. Thus, our method identifies which the outputs of the different processes, activities and tasks should be, or who the different users involved in the development of ontologies are. We will validate that the same set of outputs is obtained after applying the method in several cases.• Finiteness. The number of the elements that compose a method and the number of activities must be finite, i.e., consuming a reasonable period of time. Our method consists of a finite set of processes, activities and tasks.The number of elements used to describe them is also finite.• Discernment. A method must be composed of a small set of structural, functional and representational components. Thus, the method here proposed includes -A categorization of non-ontological resources (structural component).-Processes, activities, tasks, inputs, outputs and restrictions (funcional components). -A set of patterns for re-engineering non-ontological resources into ontologies (representational components).• Environment. Methods can be classified into scientific and technological.In scientific methods ideas are validated, whereas in technological methods artefacts are built. In our case, since the main result after applying the method is a technical product, i.e., an ontology, our method can be considered as a technological one.• Transparency. A method must be like a white box, so that we can know in every moment the active processes or activities being performed, who is performing them, etc. The method here presented explicitly defines the actors, inputs, and outputs of each process, as well as activities and tasks.Specific Requirements
• The method should allow performing the transformation approaches identified in Section 2.1.1.3, namely, TBox, ABox and population.• The method should cover any kind of non-ontological resource. Thus, we can apply the method to other types of resources not contemplated in this thesis.• The method should be automatable, because the size of the non-ontological resources can be huge. It should have technological support that permits the automatization of the activities and tasks involved, thus saving time and effort when dealing with very large non-ontological resources.Chapter 5REUSING NON-ONTOLOGICAL RESOURCES
As stated in the introduction of this thesis, our goal is to speed up the ontology development process by reusing available non-ontological resources that have been agreed upon by a particular community. In this sense, we have to identify first which non-ontological resources we are going to work with. However, as we discussed in Section 1.1.2 an accepted and agreed upon typology of nonontological resources does not exist yet. Therefore, in this section we start by describing our categorization of non-ontological resources. Then, we present our Non-ontological Resource Metadata Vocabulary (NoRMV) for depicting the available non-ontological resources. This vocabulary will be included later on in the ontology generated as provenance information. Finally, we set forth the methodological guidelines devised for reusing non-ontological resources.Non-ontological Resources
Non-ontological Resourceshas not yet been formalized by an ontology. There is a considerable number of NORs that embody knowledge about some particular domains and that represent some degree of consensus. These resources are present in the form of textual corpora, classification scheme, thesaurus, lexicon, etc. NORs have related semantics that allows interpreting the knowledge they contain. Regardless of whether the semantics is explicit or not, the main problem is that the semantics of NORs is not always formalized, and this lack of formalization prevents them from being used as ontologies. Using non-ontological resources that have been agreed on for building ontologies can have several benefits, e.g. interoperability in terms of the  An example of glossary is the FAO Fisheries Glossary• Lexicons: In a restricted sense, a computational lexicon is considered as a list of words or lexemes hierarchically organized and normally accompanied by meaning and linguistic behaviour information • Classification schemes: A classification scheme is the descriptive information of an arrangement or division of objects into groups according to the characteristics that the objects have in common NON-ONTOLOGICAL RESOURCES
the Fishery International Standard Statistical Classification of Aquatic Animals and Plants (ISSCAAP) • Thesauri: Thesauri are controlled vocabularies of terms in a particular domain with hierarchical, associative, and equivalence relations between terms. Thesauri are mainly used for indexing and retrieving articles in large databases • Folksonomies: Folksonomies are Web 2.0 systems that users employ to upload and annotate their content effortlessly and without requiring any expert knowledge The knowledge encoded by the resource can be represented in different ways, known as data models. A data model Next we present several data models for classification schemes, shown in Figure 5.2. These data models will be described in detail in Chapter 7.• Path Enumeration • Adjacency List • Next we present two data models for thesauri. These data models are described in detail in Chapter 8.• Record-based model • Relation-based model (1) a term entity, which contains the overall set of terms; (2) a term-term relationship entity, in which each record contains two different term codes and the relationship between them; and (3) a relationship source entity, which contains the overall resource relationships.Next we present a data model for lexica. These data models are described in detail in Chapter 9.• Record-based model • Relation-based model According to the implementation we classify NORs into• Databases : A database is a structured collection of records or data stored in a computer system.• Spreadsheets : An electronic spreadsheet consists of a matrix of cells where a user can enter formulas and values.• XML file : eXtensible Markup Language is a simple, open, and flexible format used to exchange a wide variety of data on and off the Web. XML is a tree structure of nodes and nested nodes of information where the user defines the names of the nodes.NON-ONTOLOGICAL RESOURCES
• Flat file : A flat file is a file usually read or written sequentially. In general, a flat file is a file containing records with no structured inter-relationships.In summary, Figure To exemplify the non-ontological categorization presented with a real life classification scheme, we use an excerpt from the FAO water area classification presented in Figure Moreover, we can map available non-ontological resources to our categorization. Next we present a brief list of them.• The United Nations Standard Products and Services Code, UNSPSC Non-ontological Resource Metadata Vocabulary
As stated before there is a large amount of NORs that embody knowledge on some particular domains and that represent some degree of consensus. Currently, most of these NORs are in its pure form without any additional information, e.g., domain of interest or authorship information, like the one provided by Dublin Core 22 for text documents, or OMV 23 for ontologies 24 . This burden makes it difficult for academia and industry to identify, find and reuse NORs effectively and efficiently. As a consequence, the reuse of NORs for building ontologies is nowadays a hard task, if not impossible. We argue that metadata, when meaning machine processable information for the Web, helps to improve NORs accessibility and reusability. Besides, it can provide other useful resource information to support maintenance. Thus, we claim here that metadata not only helps when applied (or, attached) to documents or ontologies, but also when applied to NORs themselves. There is a great demand in the field for a NOR metadata standard, a standard that would permit, amongst other things, the access and reuse of NORs.In this thesis we propose a metadata standard reflecting the most relevant properties of NORs for supporting their reuse, which is the so called Non-Ontological NoRMV Core Metadata Entities
The main classes and properties of the NoRMV are illustrated in Figure METHOD FOR REUSING NON-ONTOLOGICAL RESOURCES
We group these two classes (Person and Organization) under the generic class Party by a subClassOf relation. Finally, in order to include the provenance information in the ontology generated, we relate the Ontology class, taken from OMV, to the NOR class by means of the builtByReusing relation.Next, as an illustrative example we present an excerpt of the NoRMV metadata from the Water Area classification scheme (see Figure Method for Reusing Non-ontological Resources
Once we have defined and categorized the non-ontological resources to be dealt with, we present the methodological guidelines for reusing them. The goal of the Non-Ontological Resource Reuse process is to choose the most suitable nonontological resource for building ontologies. Domain experts, software developers and ontology practitioners carry out this process by taking as input the ontology requirements specification document (ORSD)This process includes the activities and tasks presented in Figure Activity 1. Search Non-ontological Resources
The goal of the activity is to search non-ontological resources from highly reliable Web sites, domain-related sites and resources within organizations. Domain experts, software developers and ontology practitioners carry out this activity taking as input the ORSD. They use the terms that have the highest frequency in the ORSD to search for the candidate non-ontological resources that cover the desired Activity 2. Assess the Set of Candidate Non-ontological Resources.
The goal of the activity is to assess the set of candidate non-ontological resources. Domain experts, software developers and ontology practitioners carry out this activity, taking as input the set of candidate non-ontological resources. We propose to consider the following measurable criteria: (1) coverage, (2) precision plus two subjective criteria (3) quality Task 2.1 Extract lexical entries
The goal of this task is to extract the lexical entries of the non-ontological resources. The task is carried out by software developers and ontology practitioners by taking as input the non-ontological resources for extracting their lexical entries with terminology extraction tools.METHOD FOR REUSING NON-ONTOLOGICAL RESOURCES
.5: Activities for the non-ontological resource reuse processTask 2.2 Calculate precision
The goal of this task is to calculate the precision of the candidate non-ontological resources. Precision is a measure widely used in information retrieval • NORLexicalEntries as the set of lexical entries extracted from the non-ontological resource.• ORSDTerminology as the set of identified terms included in the ORSD. Now we can define the precision, in our context, as the proportion of the lexical entries of the non-ontological resource that are included in the identified terms CHAPTER 5. REUSING NON-ONTOLOGICAL RESOURCES of the ORSD over the lexical entries of the non-ontological resource. This is expressed as follows:Task 2.3 Calculate coverage
The goal of this task is to calculate the coverage of the non-ontological resources.Coverage is based on the recall measure used in information retrieval Recall is defined as the proportion of relevant material actually retrieved in answer to a search request. This task is carried out by software developers and ontology practitioners by taking as input both the lexical entries extracted from the nonontological resources and the terminology gathered in the ORSD. To adapt this measure into our context, we use the aforementioned definitions of NORLexica-lEntries and ORSDTerminology. In this context, coverage is the proportion of the identified terms of the ORSD that are included in the lexical entries of the nonontological resource over the identified terms of the ORSD. This is expressed as follows:Task 2.4 Evaluate the consensus
The goal of this task is to evaluate the consensus of the non-ontological resources.Consensus is a subjective and not quantifiable criterion. This task is carried out by domain experts, taking as input the non-ontological resources for stating whether the non-ontological resources contain terminology agreed upon by the community or not. We propose a preliminary starting point for this evaluation. Domain experts have to check whether the resource is coming from• A standardization body or any entity whose primary activity is to develop, coordinate, promulgate, revise, amend, reissue, or otherwise maintain standards. For example: the International Organization for Standardization (ISO), the American National Standards Institue (ANSI), the World Wide Web Consortium (W3C).METHOD FOR REUSING NON-ONTOLOGICAL RESOURCES
• Large organizations across national governments, such as the Food and Agriculture Organization of the United Nations (FAO), the World Health Organization (WHO), the United Nations Educational, the Scientific and Cultural Organization (UNESCO), the International Olympic Commitee (IOC).• A large enough user community to make it profitable for developers to use it as a means of general interoperability.If the resource is coming from any of the aforementioned parties, then domain experts may state that the resource has reached some degree of consensus.Task 2.5 Evaluate the quality
The goal of this task is to evaluate the quality of the resource. We do not intend to provide a deep analysis of the quality of the resource but to offer some preliminary considerations about it. In this thesis, we propose to check the following quality attributes:• Good documentation of the resource.• Lack of anomalies of the non-ontological resource, such redundancies or inconsistencies.• Reliability of the non-ontological resource. This means analysing whether we can trust in the resource or not.Task 2.6 Build the assessment table
The goal of this task is to create an assessment table of the non-ontological resources. Software developers and ontology practitioners carry out this task, taking as input the non-ontological resources with their respective values for precision, coverage, consensus and quality criteria, for the construction of the assessment table. This table is shown in Table Activity 3. Select the Most Appropriate Non-ontological Resources
The goal of this activity is to select the most appropriate non-ontological resources to be transformed into an ontology. This activity is carried out by domain experts, • Consensus. This criterion is taken into account in the first place because, if the resource to be reused contains terminology agreed upon by the community, the effort and time spent in finding out the right labels for the ontology terms will decrease considerably.• Quality. This criterion is taken into account in the second place because, if the resource to be reused has an acceptable level of quality, then the resultant ontology should also have it.• High value of coverage. This criterion is taken into account in the third place because our third concern is to consider most of the ORSD terms identified.• High value of precision. This criterion is taken into account in the fourth place because our fourth concern is the proportion of non-ontological lexical entries over the identified terms of the ORSD.The activity output is a ranked list of non-ontological resources that, to some extent, covers the expected domain. These resources will be ready for the re-engineering process.Summary
This chapter presents our solution to those aspects related to the reuse of nonontological resources for building ontologies. It addresses some of the limitations identified in the state of art in this area.First, it provides a formal definition of non-ontological resources and a categorization of them according to three dimensions: type of resource, data model, and implementation. Second, it introduces the Non-ontological Resource Metadata Vocabulary (NoRMV). NoRMV allows describing the non-ontological resources available, which can be used later on for generating provenance information in the ontology. Finally, it presents a method for reusing non-ontological resources for 5.4. SUMMARY building ontologies. This method provides detailed guidelines for selecting the most suitable non-ontological resources for ontology development.The solutions presented in this chapter cover contributions C1, C2, C3 and C4, which address objective O1 (see Chapter 3).Chapter 6PATTERN BASED RE-ENGINEERING METHOD
This chapter presents the method for re-engineering non-ontological resources into ontologies, which is based on a model for re-engineering non-ontological resources. First, it provides a description of this re-engineering model for NORs, and then it introduces the notion of patterns for re-engineering NORs. Next, it presents a discussion about the hidden semantics in the relations of the NORs and the formal definitions of the ontologies generated. Finally, it depicts the prescriptive methodological guidelines for re-engineering NORs into ontologies.Re-engineering Model for Non-ontological Resources
This section describes our model for re-engineering non-ontological resources. The model is based on the software re-engineering model presented in Section 2.2.1. It is worth mentioning that we consider non-ontological resources as software resources because a software system consists of one or more programs, data files, databases, and job control scripts.The model for non-ontological resource re-engineering is depicted in Figure • NOR reverse engineering is defined as the activity of analysing a non-ontological resource to identify its underlying components and creating a representation of the resource at higher levels of abstraction.• NOR transformation is defined as the activity of generating an ontological model at different levels of abstraction from the NOR.• Ontology forward engineering refers to the activity of outputting a new implementation of the ontology on the basis of the new conceptual model. As mentioned before, we consider non-ontological resources as software resources and, therefore, we use the software abstraction levels shown in Figure In the left triangle of Figure 1. The conceptual abstraction level, which describes in general terms, the system functional characteristics;2. The requirements level, which is the specification of the problem being solved;3. The design level, which is the specification of the solution;4. The implementation level, which refers to the coding, testing and delivery of the operational system.As the level of abstraction decreases, the system description becomes more detailed and thus the amount of information increases. Moreover, the higher the abstraction level, the less information about a system to comprehend.In the right triangle of Figure 1. The specification level, which describes the collection of requirements that the ontology should fulfil;2. The conceptualization level, which information from the acquisition process is organized into meaningful conceptual models;REQUIREMENTS FOR THE TRANSFORMATION
3. The formalization level, which represents the transformation of the conceptual model into a formal or semi-computable model according to a knowledge representation paradigm;4. The implementation level, which refers to the generation of computable models according to the syntax of a formal representation language.Finally, the model in Figure Requirements for the Transformation
In this section we describe the requirements identified for the transformation. The requirements are listed according to the three transformation approaches identified in Section 2.1.1 (see Figure • TBox transformation • ABox transformation • Population, which transforms the resource content into instances of an ontology. The requirements of the transformation are CHAPTER 6. PATTERN BASED RE-ENGINEERING METHOD -Full conversion, the same requirement for the TBox and ABox transformation.-The ontology instances generated should reflect the target ontology structure as closely as possible. In this case, the class structure of the ontology already exists and is extended with instance data. In other words, the ontology instances must conform to the already existing ontology schema.Patterns for Re-engineering Non-ontological Resources
In this section we introduce the sixteen patterns, developed in this thesis, that perform the transformations of NORs into ontologies. Patterns for re-engineering NORs (PR-NOR) define a procedure that transforms the NOR terms into ontology representational primitives. Next, we present the template proposed that describes the patterns for reengineering non-ontological resources (PR-NOR). We have modified the tabular template used in [VTAGS + 08] for describing the PR-NORs. The meaning of each field is shown in Table According to the NOR categorization presented in section 5.1, in this thesis we propose patterns for re-engineering classification schemes, thesauri, and lexicons (see Table The re-engineering patterns take advantage of the use of the Ontology Design PatternsAlthough we have identified five types of NORs, here we just list patterns for re-engineering classification schemes, thesauri, and lexica (see Table The identifier of a PR-NOR follows a naming convention. Next, we illustrate the naming convention for identifying the patterns. We have the pattern identifier PR-NOR-&&%%-## where • PR-NOR is the prefix • && represents the type of resource: CL for classification scheme, TS for thesaurus, and LX for lexicon.SEMANTICS OF THE RELATIONS AMONG THE NOR TERMS
among those entities must be discovered and then made explicit. Thus, patterns that follow the TBox transformation approach must discover first the semantics of the relations among the NOR terms. To perform this task, we rely on WordNet, which organizes the lexical information into meanings (senses) and synsets. What makes WordNet remarkable is the existence of various relations explicitly declared between the word forms (e.g. lexical relations, such as synonymy and antonymy) and the synsets (meaning to meaning or semantic relations e.g. hyponymy/hypernymy relation, meronymy relation). In this thesis, we want to prove that we can rely on an external resource for making explicit the relations. For this purpose, first we rely on WordNet, and, then as a future line of this work, we may rely on other information resources, such as DBpediaAlgorithm 1 Discovering the semantics of the relations -getRelation 1: Take two related terms from the NOR, ti and tj 2: def aultRelation ← userDef inedRelation 3: if contains(ti,tj) then • (Lines 3-6) Check if it is possible to get the subClassOf relation by identifying attribute adjetives • (Line 7) If it is not possible to get the subClassOf relation.- It is worth mentioning that the algorithm takes advantage of the use of the PartOf content patternRegarding the time complexity of the algorithm, this is constant, i.e. O(1)+K, where K represents the time complexity of accessing the WordNet method.Formal Definition of the Ontologies Generated
In this section we provide a formal definition of the ontologies generated which are dealt with by the patterns. This formal definition is used in the Formal Transformation section of the patterns (see Table Based on the definition provided in Where OS represents the ontology schema, and KB represents the knowledge base.An ontology schema OS is defined through the following tuple:METHOD FOR RE-ENGINEERING NON-ONTOLOGICAL RESOURCES
where:• C = {c 1 , ..., c n }, a finite set of classes.• A = {a 1 , ..., a n }, a finite set of attributes, where every a i ⊆ C x Literal.• R = {r 1 , ..., r n }, a finite set of binary relations, where every r i ⊆ C x C.• S : C → C, a subClassOf relation.A knowledge base is a structure:consisting of:• three sets C, A, and R as defined before.• a set I = {i 1 , ..., i n } whose elements are called instance identifiers• a function t R : R → I 2 called relation instantiationMethod for Re-engineering Non-ontological Resources
In this section we depict the prescriptive methodological guidelines for re-engineering NORs. The goal of the Method for Re-engineering Non-Ontological Resources is to transform a non-ontological resource into an ontology. The output of the process is an ontology. Figure Activity 1. Non-ontological Resource Reverse Engineering.
The goal of this activity is to analyse a non-ontological resource, to identify its underlying terms, and to create representations of the resource at the different levels of abstraction (design, requirements and conceptual).Task 1.1 Data gathering.
The goal of this task is to search and compile all the available data and documentation about the non-ontological resource, including purpose, components, data model and implementation details. The goal of this task is to identify the schema of the non-ontological resource including the conceptual components and their relationships. If the conceptual schema is not available in the documentation, the schema should be reconstructed manually or with a data modelling tool.Task 1.3 Information exploration.
The goal of this task is to find out how the conceptual schema of the non-ontological resource and its content are represented in the data model. If the non-ontological resource data model is not available in the documentation, the data model should be reconstructed manually or with a data modelling tool.Activity 2. Non-ontological Resource Transformation.
This activity has as a goal to generate a conceptual model from the non-ontological resource. We propose the use of Patterns for Re-engineering Non-Ontological Resources (PR-NOR) to guide the transformation process. The goal of this task is to find out if there is any applicable re-engineering pattern that transforms the non-ontological resource into a conceptual model. The search is performed in the ODP PortalMETHOD FOR RE-ENGINEERING NON-ONTOLOGICAL RESOURCES
6.6.2.2 Task 2.2.a Use re-engineering patterns to guide the transformation.The goal of this task is to apply the re-engineering pattern obtained in task 2.1 to transform the non-ontological resource into a conceptual model. If a suitable CHAPTER 6. PATTERN BASED RE-ENGINEERING METHOD pattern for re-engineering non-ontological resource is found, then the conceptual model is created from the non-ontological resource following the procedure established in the pattern for re-engineering. Alternatively, the software library, described in Chapter 10, can be used for generating the ontology automatically.6.6.2.3 Task 2.2.b Perform an ad-hoc transformation.The goal of this task is to set up an ad-hoc procedure that transforms the nonontological resource into a conceptual model when a suitable pattern for re-engineering cannot be found. This ad-hoc procedure may be generalized to create a new pattern for re-engineering non-ontological resource.6.6.2.4 Task 2.3 Manual refinement.The goal of this task is to check whether any inconsistency appears after the transformation. Software developers and ontology practitioners, with the help of domain experts, can fix manually any inconsistencies appearing after the transformation.Activity 3. Ontology Forward Engineering
The goal of this activity is to generate the ontology. We use the ontology levels of abstraction to depict this activity because they are directly related to the ontology development process. The conceptual model obtained in task 2.2.a or 2.2.b is transformed into a formalized model, according to a knowledge representation paradigm such as description logics and first order logic. Then, the formalized model is implemented in an ontology language.Summary
This chapter has presented our solution for the aspects related to the re-engineering of non-ontological resources for building ontologies. It also addresses some of the limitations identified in the state of art in this area. First, it presents our Re-engineering Model for Non-ontological resources, which is based on the software re-engineering model presented in Section 2.2.1. Then, it describes the requirements for the transformation process. Next, it briefly describes the Patterns for Re-engineering Non-ontological resources into Ontologies (PR-NOR). Then, it shows how the patterns make explicit the hidden semantics in the relations of the non-ontological resource. After that, it introduces the formal definitions of the ontologies generated. Finally, it presents our method for re-engineering non-ontological resources for building ontologies. This method provides detailed guidelines for transforming a non-ontological resource into an ontology.SUMMARY
The solutions presented in this chapter cover contributions C5 and C6, which address objective O2 (see Chapter 3).Chapter 7PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES
Classification schemes [KBH + 97] play an important role when retrieving information in a network environment, especially because they provide browsing structures for subject-based information gateways on the Web. The advantages of using classification schemes include improved subject browsing facilities and interoperability with other services. Classification schemes are probably the most valuable input for creating, at a reasonable cost, ontologies in many domains. They contain, readily available, a wealth of category definitions plus a hierarchy and reflect some degree of community consensus In this chapter we present a definition of classification schemes, the data models for representing classification schemes and our main contribution: the set of patterns for re-engineering classification schemes into ontologies.Classification Scheme
A classification scheme Components of a Classification Scheme
The ISO/IEC 11179-2 CHAPTER 7. PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES
• A classification scheme, which represents the classification scheme itself. It has the cs name element, that is, the name of the classification scheme.• A classification scheme item, which represents the individual item within a classification scheme. It has the following elements:csi name, which is the name of the classification scheme item.-One or more csi attributes• A classification scheme item relationship. It is the relationship among items within a classification scheme. Such relation serves to assist in navigating through a large number of classification scheme items. This relationship bears the csir name element, which is the name of the classification scheme item relationship. Classification Scheme Formal Definition
We formally define a classification scheme as the following tuple:Where CS represents the schema of the classification scheme, and CC represents the content of the classification scheme. The schema of the classification scheme, CS, is defined as:where:• CG = {c 1 }, a set of one category.CLASSIFICATION SCHEME
• CA = {a 1 , ..., a n }, a finite set of attributes, where every a i ⊆ CG x Literal.• CR = {r 1 }, a set of one binary relation, where r 1 ⊆ CG x CG.The content of the classification scheme, CC, is defined aswhich consists of• The three CG, CA and CR sets, as were defined before.• A CI = {csi 1 , ..., csi n } set, whose elements are called classification scheme item identifierscalled classification scheme attribute instantiation
• A Ct R : CR → CI 2 function, called classification scheme relation instantiationClassification Scheme Data Models
As we mentioned in Section 5.1 there are different ways of representing the knowledge encoded by a particular resource. In this section we review the existing data models for classification schemes already presented in Section 5.1. In order to exemplify the data models for classification schemes, we use an excerpt from the FAO classification scheme of water areas• A path enumeration data model • An adjacency list • A snowflake data model CHAPTER 7. PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES
• A flattened data model Classification Scheme Implementations
These data models can be implemented as databases, XML files, flat files, spreadsheets, etc.    Patterns for the TBox Transformation
These patterns transform the resource content into an ontology schema. The TBox transformation approach tries to impose a formal semantics to the re-engineered resources, even at the cost of changing their structure [SAd + 07]. For making explicit the semantics of the relations among the NOR terms, the patterns rely on an external resource, WordNet, as we described in Section 6.4. The time complexity of the algorithms described in the section PROCESS: How to Re-engineering is polynomial O(n 2 ).Pattern for re-engineering a classification scheme following the path enumeration data model into an ontology schema
The pattern for re-engineering non-ontological resource, shown in Table PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES INTO ONTOLOGIES
• noP arentT erms, children, allChildren are lists that do not allow duplicates. • createClass is a function that creates a class from a given term.• getRelation is the algorithm 1 defined in section 6.4.• relate is a function that relates two given classes by a given relation.• alreadyCreatedClassFor checks if there is an already class created for a given term. • childrenOf is a function that returns the children of a given term.• removeAllTerms is a function that removes all the elements of a given list.• isEmpty checks if a list has elements or not.• add is a function that adds the elements of a list into another list.Formal Transformation
General
Classification Scheme: C = CS, CC Ontology: The pattern for re-engineering non-ontological resource, shown in Table General
Re-engineering a classification scheme following the adjacency list model, to design an ontology schema.Example
Suppose that someone wants to build an ontology based on the water areas classification published by FAO. This classification scheme follows the adjacency list data model.Pattern for Re-engineering Non-ontological Resource
INPUT: Resource to be Re-engineeredGeneral
A non-ontological resource holds a classification scheme that follows the adjacency list model. A classification scheme is a rooted tree of terms, in which each term groups entities by some particular degree of similarity. The semantics of the hierarchical relation between parent and children terms may vary depending on the context. The adjacency list data model Example
The FAO classification for water areas groups them according to some different criteria, such as environment, statistics, and jurisdiction, among others. Additional Notes• noP arentT erms, children, allChildren are lists that do not allow duplicates. • createClass is a function that creates a class from a given term.• getRelation is the algorithm 1 defined in section 6.4.• relate is a function that relates two given classes by a given relation.• alreadyCreatedClassFor checks if there is an already class created for a given term. • childrenOf is a function that returns the children of a given term.• removeAllTerms is a function that removes all the elements of a given list.• isEmpty checks if a list has elements or not.• add is a function that adds the elements of a list into another list.Continued on next page
PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES INTO ONTOLOGIES
Table Graphical Representation (UML) General Solution Ontology
Continued on next page Additional NotesPATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES INTO ONTOLOGIES
• noP arentT erms, children, allChildren are lists that do not allow duplicates. • createClass is a function that creates a class from a given term.• getRelation is the algorithm 1 defined in section 6.4.• relate is a function that relates two given classes by a given relation.• alreadyCreatedClassFor checks if there is an already class created for a given term. • childrenOf is a function that returns the children of a given term.• removeAllTerms is a function that removes all the elements of a given list.• isEmpty checks if a list has elements or not.• add is a function that adds the elements of a list into another list. Additional NotesContinued on next page
PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES INTO ONTOLOGIES
• noP arentT erms, children, allChildren are lists that do not allow duplicates. • createClass is a function that creates a class from a given term.• getRelation is the algorithm 1 defined in section 6.4.• relate is a function that relates two given classes by a given relation.• alreadyCreatedClassFor checks if there is an already class created for a given term. • childrenOf is a function that returns the children of a given term.• removeAllTerms is a function that removes all the elements of a given list.• isEmpty checks if a list has elements or not.• add is a function that adds the elements of a list into another list.Continued on next page
PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES INTO ONTOLOGIES
Table Slot Value
Formal TransformationGeneral
Classification Scheme: C = CS, CC Ontology:Relationships
Relations to other modelling components
Use the Architectural Pattern: AP-TX-01 [SFBG + 07]Patterns for the ABox Transformation
These patterns transform the resource schema into an ontology schema, and the resource content, into ontology instances. The ABox transformation approach leaves the informal semantics of the re-engineered resources mostly untouchedThe patterns presented here deal with classification schemes. As described in Section 7.1, the schema of a classification scheme has the following components:(1) a classification scheme entity, which will be transformed into a class, and (2) a classification scheme item relationship, which will be transformed into a subClas-sOf relation.The time complexity of the algorithms described in the Section PROCESS: How to Re-engineering is linear O(n).Pattern for re-engineering a classification scheme following the path enumeration data model into an ontology
The pattern for re-engineering non-ontological resource, shown in Table Table • csT erms is a list that does not allow duplicates.• createClass is a function that creates a class from a given term.• relate is a function that relates two given classes by a given relation.• createInstance is a function that creates an instance from a given term.• setInstanceOfClass is a function that sets up a given instance of a given class.Continued on next page 123 CHAPTER 7. PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES Table Slot Value
Formal TransformationGeneral
Classification Scheme: CS = CS, CC Ontology:Relationships
Relations to other modelling components
Use the Architectural Pattern: TX-AP-01 [SFBG + 07]Pattern for re-engineering a classification scheme following the adjacency list data model into an ontology
The pattern for re-engineering non-ontological resource, shown in Table Table Slot Value
Example
Suppose that someone wants to build an ontology based on the water areas classification published by FAO. This classification scheme follows the adjacency list data model.Continued on next page
PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES INTO ONTOLOGIES
Table Slot Value
Pattern for Re-engineering Non-ontological Resource INPUT: Resource to be Re-engineeredGeneral
A non-ontological resource holds a classification scheme that follows the adjacency list model. A classification scheme is a rooted tree of concepts, in which each concept groups entities by some particular degree of similarity.The semantics of the hierarchical relation between parent and children concepts may vary depending on the context. The adjacency list data model Example
The FAO classification for water areas groups them according to some different criteria, such as environment, statistics, and jurisdiction, among others. This classification scheme is available at http://www.fao.org/figis/servlet/RefServlet Graphical Representation   PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES INTO ONTOLOGIES
Additional Notes• csT erms is a list that does not allow duplicates.• createClass is a function that creates a class from a given term.• relate is a function that relates two given classes by a given relation.• createInstance is a function that creates an instance from a given term.• setInstanceOfClass is a function that sets up a given instance of a given class.Formal Transformation
General
Classification Scheme: CS = CS, CC Ontology:Relationships
Relations to other modelling components
Use the Architectural Pattern: TX-AP-01 [SFBG + 07] 7.2.2.3 Pattern for re-engineering a classification scheme following the snowflake data model into an ontologyThe pattern for re-engineering non-ontological resource, shown in Table CHAPTER 7. PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES
tion scheme is modeled with a snowflake data model. The pattern transforms the resource schema into an ontology schema, and the resource content, into ontology instances.Table General
Re-engineering a classification scheme following the snowflake model, to design an ontology schema.Example
Suppose that someone wants to build an ontology based on an occupation hierarchical classification following the snowflake data model.Pattern for Re-engineering Non-ontological Resource
INPUT: Resource to be Re-engineeredGeneral
A non-ontological resource holds a classification scheme that follows the snowflake model. A classification scheme is a rooted tree of terms, in which each term groups entities by some particular degree of similarity. The semantics of the hierarchical relation between parent and children concepts may vary depending on the context. The snowflake data model Example
Snowflake models are widely used on data warehouses to build hierarchical classifications on structures known as dimensions. Some examples of dimension are Time, Product Category, Geography, Occupations, etc. In this pattern the example is an occupation hierarchical classification hold on four different tables, one for each level (PROFESSIONI 0, PROFESSIONI 1, PROFESSIONI 2, PROFESSIONI 3). Continued on next page CHAPTER 7. PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES Additional Notes
• csT erms is a list that does not allow duplicates.• createClass is a function that creates a class from a given term.• relate is a function that relates two given classes by a given relation.• createInstance is a function that creates an instance from a given term.• setInstanceOfClass is a function that sets up a given instance of a given class.Continued on next pagePATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES INTO ONTOLOGIES
Table Slot Value
Formal TransformationGeneral
Classification Scheme: CS = CS, CC Ontology:Relationships
Relations to other modelling components
Use the Architectural Pattern: TX-AP-01 [SFBG + 07]Pattern for re-engineering a classification scheme following the flattened data model into an ontology
The pattern for re-engineering non-ontological resource, shown in Table Additional Notes
• csT erms is a list that does not allow duplicates.• createClass is a function that creates a class from a given term.• relate is a function that relates two given classes by a given relation.• createInstance is a function that creates an instance from a given term.• setInstanceOfClass is a function that sets up a given instance of a given class.Continued on next pageCHAPTER 7. PATTERNS FOR RE-ENGINEERING CLASSIFICATION SCHEMES
Table Slot Value
Formal TransformationGeneral
Classification Scheme: CS = CS, CC Ontology:Relationships
Relations to other modelling components
Use the Architectural Pattern: TX-AP-01 [SFBG + 07]Summary
This chapter has presented the solution we provide for those aspects related to the re-engineering of classification schemes for building ontologies. Our solution addresses some of the limitations identified in the state of art of this area. First, we review the definition of a classification scheme, including its components. Then, we provide a formal definition for the classification schemes and the identified data models and implementations for them. Finally, we present the patterns for re-engineering classification schemes into ontologies, including those for the TBox and ABox transformation approaches. The time complexity of the TBox transformation algorithm is polynomial O(n 2 ), whereas that of the ABox transformation algorithm is linear O(n). This set of patterns are used within the method presented in Chapter 6.The solutions presented in this chapter cover contribution C7, which partially addresses objective O3 (see Chapter 3). Such a contribution is evaluated in Sections 11.1.1 and 11.2.1.Chapter 8PATTERNS FOR RE-ENGINEERING THESAURI
A thesaurus represents the knowledge of a domain with a collection of terms and a limited set of relations between them. Thesauri are the most valuable input for creating, at reasonable cost, ontologies in many domains. They contain, readily available, a wealth of category definitions plus a hierarchy, and they reflect some degree of community consensus Thesaurus
In the field of thesaurus development there are several standards. These standards provide some guidelines about how the thesaurus should be structured. Next we briefly describe the most important thesaurus standards.• ISO 2788:1986, which is the standard that sets the guidelines for the establishment and development of monolingual thesauri • ISO 5964:1985, which sets the guidelines for the establishment and development of multilingual thesauri [ISO85]. These guidelines should be used in conjunction with ISO 2788 and regarded as an extension of the scope of the monolingual guidelines. The majority of procedures and recommendations contained in ISO 2788, namely, the forms of terms and the basic thesauri relationships as well as management operations such evaluation and maintenance, are equally valid for a multilingual thesaurus. Distinction is made between preferred terms and non-preferred terms.• ANSI/NISO Z39.19-2005, which establishes the guidelines for the construction, format, and management of monolingual controlled vocabularies • BS 8723-1:2005 and BS 8723-2:2005 [BS 05a, BS 05b]. The British Standard BS 8723-1 defines the terminology used throughout the rest of the BS• A HierarchicalRelationship, which is a relationship between or among terms in the thesaurus that depicts broader (generic) to narrower (specific) or wholepart relationships.• A AssociativeRelationship, which is a relationship between or among terms in the thesaurus that leads from one term to other terms that are related to or associated with it.• A Equivalence, which is a relationship between or among terms in the thesaurus that leads to one or more terms that are to be used instead of the term from which the cross-reference is made.Thesaurus Formal Definition
We formally define a thesaurus as the following tuple:Where T S represents the schema of the thesaurus, and T C represents the content of the thesaurus. The schema of the thesaurus is defined as:where:• T T = {tt pt , tt npt }, a set of two categories, tt pt preferred term, and tt npt , non-preferred term.• T A = {a 1 , ..., a n }, a finite set of attributes, where every a i ⊆ T T x Literal.• T B = {tsb 1 , ..., tsb n }, a finite set of broader term relations.• T N = {tsn 1 , ..., tsn n }, a finite set of narrower term relations.• T R = {tsr 1 , ..., tsr n }, a finite set of related term relations.The content of the thesaurus is defined as:which consists of:• The five T T , T A, T B, T N , and T R sets, as were defined before.• A T I = {ti 1 , ..., ti n } set whose elements are called thesaurus term identifiers   The relation-based model leads to a more elegant and efficient structure. Information is stored in individual pieces that can be arranged in different ways. Relationship types are not defined as fields in a record, but they are simply data values in a relationship record; thus new relationship types can be introduced with ease. As Figure Thesaurus Implementations
These data models can be implemented as any of the identified types on Section 5.1, i.e., databases, XML files, flat files, and spreadsheets. A direct implementation would be implemented as tables in a relational database or in a spreadsheet.  .8 shows how a given type of thesauri can be modelled following one or more data models, each of which could be implemented in different ways at the implementation layer. As an example, Figure PATTERNS FOR RE-ENGINEERING THESAURI INTO ONTOLOGIES
Table Slot Value
Additional Notes• noBT erms, N T erms, RT erms, U F T erms, restOf T erms are lists that do not allow duplicates. • createClass is a function that creates a class from a given term.• getRelation is the algorithm 1 defined in section 6.4.• relate is a function that relates two given classes by a given relation.• alreadyCreatedClassFor checks if there is an already class created for a given term. • narrowerTermOf is a function that returns the narrower terms of a given term.• relatedTermOf is a function that returns the related terms of a given term.• usedForTermOf is a function that returns the equivalent terms of a given term.• remove is a function that removes a given term from a given list.• removeAllTerms is a function that removes all the elements of a given list.• isEmpty checks if a list has elements or not.• add is a function that adds the elements of a list into another list.• SOE is a pattern proposed by Corcho et al. Formal Transformation
General
Thesaurus: The pattern for re-engineering thesaurus, shown in Table Relationships
Slot Value
Additional Notes• noBT erms, N T erms, RT erms, U F T erms, restOf T erms are lists that do not allow duplicates. • createClass is a function that creates a class from a given term.• getRelation is the algorithm 1 defined in section 6.4.• relate is a function that relates two given classes by a given relation.• alreadyCreatedClassFor checks if there is an already class created for a given term. • narrowerTermOf is a function that returns the narrower terms of a given term.• relatedTermOf is a function that returns the related terms of a given term.• usedForTermOf is a function that returns the equivalent terms of a given term.• remove is a function that removes a given term from a given list.• removeAllTerms is a function that removes all the elements of a given list.• isEmpty checks if a list has elements or not.• add is a function that adds the elements of a list into another list.• SOE is a pattern proposed by Corcho et al. Formal Transformation
General
Thesaurus:Relationships
Relations to other modelling components
Use the Architectural Pattern: AP-LW-01 [SFBG + 07]Patterns for the ABox Transformation
These patterns transform the resource schema into an ontology schema, and the resource content, into ontology instances. The ABox transformation approach leaves the informal semantics of the re-engineered resources mostly untouched [SAd + 07].As we mentioned in Section 8.1.1 the schema of a thesaurus has the following main components: (1) PreferredTerm, which will be transformed into a class, (2) Hierarchical Relationship, which will be transformed into a subClassOf relation, (3) Associative Relationship, which will be transformed into an ad-hoc relation, (4) Equivalent terms, the terms from the USE relationships, which will be transformed into labels, by using the logical pattern SOE, proposed by Corcho et al. The time complexity of the algorithms described in the Section PROCESS: How to Re-engineering is linear O(n). Slot Value
Additional Notes• T T erms, U F T erms are lists that do not allow duplicates.• createClass is a function that creates a class from a given term.• relate is a function that relates two given classes by a given relation.• alreadyCreatedClassFor checks if there is an already class created for a given term. • createInstance is a function that creates an instance from a given term.• setInstanceOfClass is a function that sets up a given instance of a given class.• usedForTermOf is a function that returns the equivalent terms of a given term. • SOE is a pattern proposed by Corcho et al. Formal Transformation
General
Thesaurus: The pattern for re-engineering thesaurus, shown in Table Relationships
PATTERNS FOR RE-ENGINEERING THESAURI INTO ONTOLOGIES
• T T erms, U F T erms are lists that do not allow duplicates.• createClass is a function that creates a class from a given term.• relate is a function that relates two given classes by a given relation.• alreadyCreatedClassFor checks if there is an already class created for a given term. • createInstance is a function that creates an instance from a given term.• setInstanceOfClass is a function that sets up a given instance of a given class. • usedForTermOf is a function that returns the equivalent terms of a given term. • SOE is a pattern proposed by Corcho et al. Continued on next page
Chapter 9PATTERNS FOR RE-ENGINEERING LEXICA
The term lexicon is found in many ways, in conventional printed dictionaries, CD-ROM editions and Web-based versions. During the 1970s and 80s computational linguistics began to develop computational lexicons for natural language processing programs. Computational lexicons differ from dictionaries intended for human use in that they must contain much more explicit and specific linguistic information about phrases and words and must be encoded in strictly formal structures operable by computer programs. In this chapter we present a definition of lexicon, data models for representing lexicons and patterns for re-engineering lexicons into ontologies, which are our contribution to this area.Lexicon
According to Hirst During the last decade the subject of lexicon standardization has been studied and developed by several projects, for example, EDRNext, we briefly describe the most important and recent lexicon standards.  • A Lexical Resource component, which represents the entire resource. The Lexical Resource is a container for one or more lexicons.• A Global Information component, which constitutes the administrative information and other general attributes. There is an aggregation relationship between the Lexical Resource and the Global Information in that the latter describes the administrative information and general attributes of the entire resource.• A Lexicon component, which contains all the lexical entries of a given language within the entire resource. A Lexicon must contain at least one lexical entry.• A Lexical Entry component, which represents a lexeme in a given language. The Lexical Entry is a container for managing the Form and Sense. Therefore, the Lexical Entry manages the relationship between the forms and their related senses. A Lexical Entry can contain one or many different forms, and can have different sense ranging from zero to many.• A Form Representation component, which constitutes one variant orthography of a Form. When there is more than one variant orthography, the Form Representation contains a Unicode string representing the Form as well as, if needed, the unique attribute-value pairs that describe the specific language, script, and orthography.• A Representation component, which represents a Unicode string as well as, if needed, the unique attribute-value pairs that describe the specific language, script, and orthography.• A Sense component, which represents one meaning of a lexical entry. It allows for hierarchical senses in that a sense may be more specific than another sense of the same lexical entry.• A Synset component, which represents the set of shared meanings within the same language. A Synset instance can link senses of different Lexical Entry instances with the same part of speech.• A Synset Relation component, which represents the oriented relationship between Synset instances.• A Definition component, which represents a narrative description of a sense. It is displayed to facilitate human users to understand the meaning of a Lexical Entry and is not meant to be processable by computer programs. A Sense can have no definition or it can have many. Each Definition may be associated with zero to many Text Representation components in order to manage the text definition in more than one language or script. The narrative description can be expressed in a language and/or script different than the language of the Lexical Entry component.• A Statement component, which constitutes a narrative description and refines or complements Definition. A Definition can have no Statement instances or it can have many.• A Text Representation component, which represents a textual content of Definition or Statement. When there is more than one variant orthography, the Text Representation contains a Unicode string representing both the textual content and the unique attribute-value pairs that describe the specific language, script, and orthography.LEXICON
which contains the overall set of lexicon elements, (2) an element-element relationship entity, in which each record contains two different element codes and the relationship between them, and (3) a relationship source entity, which contains the overall lexicon relationships.Lexicon Implementations
Finally these data models can be implemented as any of the identified types in Section 5.1, namely, databases, XML files, flat files, and spreadsheets. A direct implementation would be as tables in a relational database or in a spreadsheet.   Patterns for the TBox Transformation
These patterns transform the resource content into an ontology schema. The TBox transformation approach tries to impose a formal semantics on the re-engineered 9.3. SUMMARY Table Slot Value
Additional Notes• LSynsets, Synonyms are lists that do not allow duplicates.• createClass is a function that creates a class from a given term.• relate is a function that relates two given classes by a given relation.• alreadyCreatedClassFor checks if there is an already class created for a given term. • createInstance is a function that creates an instance from a given term.• setInstanceOfClass is a function that sets up a given instance of a given class.• synonymsOf is a function that returns the synonyms of a given synset.• SOE is a pattern proposed by Corcho et al. Formal Transformation
General
Lexicon:Relationships
Relations to other modelling components
Use the Architectural Pattern: AP-LW-01 [SFBG + 07]Summary
This chapter has presented our solution to those aspects related to the re-engineering of lexica for building ontologies. This solution addresses some of the limitations identified in the state of art in this area. First, the chapter reviews the definition of a lexicon, including its components. Then, it provides a formal definition for the lexicon, the identified data models, and implementations for them. Finally, it presents the patterns for re-engineering lexica into ontologies, including those for the TBox and ABox transformation approaches. The time complexity of the TBox transformation algorithm is polynomial O(n 2 ), whereas that of the ABox transformation algorithm is linear O(n). This set of patterns are used within the method presented in Chapter 6.The solutions here presented cover contribution C9, which partially addresses objective O3 (see Chapter 3). This contribution is evaluated in Sections 11.1.1 and 11.2.1.Chapter 10 TECHNOLOGICAL SUPPORT
Our technological support consists in the implementation of (i) NOR 2 O, a software library that implements the transformation process suggested by the patterns, and (ii) a PR-NOR pattern library that includes the set of patterns for re-engineering non-ontological resources. Our pattern library is available at the ODP portal. In this section we start by presenting the software library (section 10.1) followed by the re-engineering patterns library (section 10.2).NOR 2 O
This section presents NOR 2 O, a Java library that implements the transformation process suggested by the Patterns for Re-engineering Non-ontological Resources (PR-NOR), which are described in Chapters 7, 8 and 9. The library performs the ETL processFigure NOR Connector
The NOR Connector loads classification schemes, thesauri, and lexicons modelled with their corresponding data models, and implemented in databases, XML, flat files and spreadsheets.  Listing 10.1: NOR Connector configuration file example <Nor t y p e =" C l a s s i f i c a t i o n Scheme " name=" c e p a 9 4 "> <Schema> <S c h e m a E n t i t i e s> <S c h e m a E n t i t y name=" CSItem "> < A t t r i b u t e name=" C S I d e n t i f i e r " v a l u e F r o m =" c e p a . CodeNumber " t y p e =" s t r i n g " /> < A t t r i b u t e name="CSName" v a l u e F r o m =" c e p a . D e s c r i p t i o n E n g l i s h " t y p e =" s t r i n g " /> <R e l a t i o n name=" subType " u s i n g =" P a t h E n u m e r a t i o n " d e s t i n a t i o n =" CSItem " /> <R e l a t i o n name=" s u p e r T y p e " u s i n g =" P a t h E n u m e r a t i o n " d e s t i n a t i o n =" CSItem " /> </ S c h e m a E n t i t y> </ S c h e m a E n t i t i e s>  The Transformer also utilizes an XML configuration file, called prnor.xml, for describing the transformation between the NOR elements and the ontology elements. This XML configuration file has only one section, PRNOR, which includes the description of the transformation from the NOR schema components (e.g., schema entities, attributes and relations) into the ontology elements (e.g., classes, objectproperties, dataproperties and individuals). Additionally, it indicates the transformation approach, e.g., TBox, ABox or Population.  Semantic Relation Disambiguator
This module is in charge of obtaining the semantic relation between two NOR elements. Basically, the module receives two NOR elements from the Transformer module and returns the semantic relation between them. First the module verifies whether it can obtain the subClassOf relation by identifying attribute adjetives The TBox transformation approach converts the resource content into an ontology schema. To this end, each NOR term is mapped to a class, and then the semantics of the relations among those entities is made explicit. Thus, patterns that follow the TBox transformation approach must make explicit the semantics of the relations among the NOR terms. To perform this task we rely on WordNet, which organizes the lexical information into meanings (senses) and synsets.Algorithm 1, presented in Section 6.4, describes how to make explicit the semantics of the relations in the NOR terms.It is worth mentioning that, when asserting the partOf relation the algorithm takes advantage of the use of the PartOf content patternExternal Resource Service
The External Resource Service is in charge of interacting with external resources for obtaining the semantic relations between two NOR elements. At this CHAPTER 10. TECHNOLOGICAL SUPPORT moment the module interacts with WordNet. We are now implementing the access to DBpediaOR Connector
The Ontological Resource (OR) Connector generates the ontology in OWL Lite. To this end, this module relies on the OWL API Listing 10.4: OR Connector configuration file example <Or name=" a s f a o n t o l o g y " o n t o l o g y U R I =" h t t p : / / m c c a r t h y . d i a . f i . upm . e s / o n t o l o g i e s / a s f a . owl " o n t o l o g y F i l e =" a s f a . owl " i m p l e m e n t a t i o n ="OWL" a l r e a d y E x i s t =" no " s e p a r a t o r =" # "> </ Or> Finally, to conclude the description of the software library, it is worth mentioning that the implementation of this library follows a modular approach; therefore, it is possible to extend it and include other types of NORs, data models, and implementations in a simple way, as well as to exploit other external resources for making explicit the hidden semantics in the relations of the NOR terms.PR-NOR LIBRARY AT THE ODP PORTAL
PR-NOR Library at the ODP Portal
Ontologydesignpatterns.org (hereafter ODP Portal) is a Semantic Web portal dedicated to ontology design best practices for the Semantic Web, with a particular focus on ODPs. The ODP Portal software is based on Media WikiThe PR-NORs proposed in this thesis fit in the Re-engineering ODPs category available in the ODP Portal. Figure The most visited patterns are (1) the pattern for re-engineering a classification scheme following the adjacency list data model into an ontology schema (PR-NOR-CLTX-02); (2) the pattern for re-engineering a thesaurus following the recordbased data model into an ontology schema (PR-NOR-TSTX-01); and (3) the pattern for re-engineering a classification scheme following the path enumeration data model into an ontology schema (PR-NOR-CLTX-01).Summary
This chapter has presented the solution we provide for the aspects related to the technologial support for re-engineering non-ontological resources into ontologies. It has also addressesed some of the limitations identified in the state of art in this area.Regarding the goals and contributions presented in Section 3.1 and Section 3.2 respectively, Section 10.1 presents the NOR 2 O (part of contribution C10, which addresses objective O4) and section 10.2 presents the PR-NOR library included in the ODP portal (part of contributions C7,C8, and C9, which address objective O3).EVALUATION OF THE METHODOLOGICAL GUIDELINES
• The "Ontologies and Semantic Web" course within the "Athens Programme", delivered at the Facultad de Informática (UPM). Fourteen international participants attended the course.• The "Ontologies and Semantic Web" course within the "Information Technology" Master, delivered at the Facultad de Informática (UPM). Twenty Spanish participants attended the Master course.The participants had to build manually a conceptual model from a particular resource, analysing the methodological guidelines and the set of patterns. They had 30 minutes for generating the conceptual model and had to work on an excerpt of twenty terms of the ETT thesaurusExecution
The experiment was executed in four phases:1. The participants were provided with the proposed guidelines.2. The participants were organized in groups of two.3. The groups analysed the methodological guidelines and the set of patterns in order to carry out the NOR re-engineering process. They generated manually a conceptual model.4.
The participants filled in a questionnaire.Next, we show the tasks performed within Phase 3 to generate the conceptual model from the excerpt of the resource.NOR Reverse Engineering. Within this activity the student groups gathered documentation about the thesaurus from the ETT web site. From this documentation they extracted the schema of the thesaurus. Since the data model was not available in the documentation, they extracted it for the resource implementation itself. The groups soon found out that they were dealing with a thesaurus modelled following the record-based data model and implemented in XML.NOR Transformation. Within this activity the groups searched the ODP portal for a suitable PR-NOR, taking into account the following criteria: (1) the resource type: thesaurus; (2) the resource data model: record-based model; and (3) the selected transformation approach: the TBox transformation. Then thet chose as the most appropriate pattern the PR-NOR-TSTX-01, selected by all the participants. Finally, all the groups followed the procedure suggested by the pattern for creating the conceptual model manually. Each thesaurus term was mapped to a class. For making explicit the semantics of the BT, NT relations among thesaurus terms, the participants checked whether they could get the subClassOf relation by identifying attribute adjetives The main objective of this project was to develop an interoperable architecture for public e-Employment services (PES). The resultant architecture consisted of (1) a Reference Ontology, the core component of the system, that acts as a common "language" in the form of a set of controlled vocabularies that describes the details of a job posting; (2) a set of Local Ontologies, each PES uses its own Local Ontology, which describes the employment market in its own terms; (3) a set of mappings between each Local Ontology and the Reference Ontology; and (4) a set of mappings between the PES schema sources and the Local Ontologies.In the following sections we describe the application of our methodological guidelines for reusing and re-engineering non-ontological resources when building an occupation ontology.Reusing non-ontological resources
This section presents the application of the Method for Reusing Non-Ontological Resources within the SEEMP project. It shows the process we followed for selecting the non-ontological resources to be reused when building the occupation domain ontology.Activity 1. Search non-ontological resources
Following the suggestions of some domain experts, we searched for the occupation classifications at (1) the Ramon Eurostat Portal• Standard Occupational Classification System (SOC).• International Standard Classification of Occupations (ISCO-88).• International Standard Classification of Occupations, for European Union purposes, ISCO-88 (COM).• Occupational Information Network (ONET).• EURESActivity 2. Non-ontological resource transformation
Within this activity we carried out the following tasks:1. We identified the transformation approach, the TBox transformation, i.e., transforming the resource content into an ontology schema.2. Then, we searched our local pattern repository for a suitable pattern to reengineer NORs, taking into account the transformation approach (TBox transformation), the non-ontological resource type (classification scheme), and the data model (snowflake data model) of the resource.3. The most appropriate pattern found for this case was the PR-NOR-CLTX-03 pattern. This pattern takes as input a classification scheme modelled with a snowflake data model and produces an ontology schema.Activity 3. Ontology forward engineering WSML 8 is the ontology implementation language used in the SEEMP project. Because of the number of occupations of the EURES classification, it was not ence Ontology is available at http://oeg-upm.net/index.php/en/ontologies/ 99-hrmontology. In order to illustrate the dimension of the ontology and the ontological engineers' efforts required to build it, some statistical data are shown in Table With respect to the application of the Method for Reuse and Re-engineering, this was especially useful for guiding the steps of the ontological engineers in-11.1. EVALUATION OF THE METHODOLOGICAL GUIDELINES volved since this method provides detailed and sufficient guidelines. In addition, the existence of a well-defined and structured process for building the ontology network in the e-employment domain eased the planning, coordination and communication with other non-Semantic Web members of the development team, which in turn helped to convey reliability to the final result.Understandability, Applicability and Usability of the Method within the mIO! Project
The evaluation of the understandability, applicability and usability of the methodological contributions for reusing and re-engineering NORs, including the PR-NOR library, were also validated in an experiment in a real case scenario within the context of the mIO! Spanish project The main objective of the mIO! project is to develop ubiquitous services in an intelligent environment, adapted to every user and its context by means of mobile interfaces. The project relies on ontologies for modelling the knowledge.The following sections describe the application of our methodological guidelines for reusing and re-engineering non-ontological resources when building a geographical ontology, which includes continents, countries, and regions.Reusing non-ontological resources
This section describes the activities carried out for reusing non-ontological resources.Activity 1. Search non-ontological resources
Following some of the suggestions made by the domain experts, we searched geographical location resources on highly reliable Websites. Next, we list the geographic location classifications:• ISO 3166 • Guide to regions of the World  4 Evaluate the consensus It was important for the project that resources focused on the current worldwide reality, because the outcoming prototype will be validated by users. Thus, domain experts evaluated whether the resource was built with the consensus of the worldwide community or not. They confirmed that ISO 3166 has the full consensus of the community, whereas the other resources have not.Task 2.5 Evaluate the quality
In this case, domain experts evaluated whether the resource was built with an acceptable level of quality. They confirmed that ISO 3166 has an acceptable level of quality.EVALUATION OF THE METHODOLOGICAL GUIDELINES
Task 2.6 Build the assessment table Re-engineering non-ontological resources
This section presents the application of the Method for Re-engineering Non-Ontological Resources within the mIO! project. Once we have the non-ontological resource selected, the ISO 3166, we had to transform it into an ontology. Next, we describe the process of generating a Geographical Location Ontology.Activity 1. Non-ontological resource reverse engineering
In this activity we gathered documentation about ISO 3166 from its website. From this documentation we extracted the schema of the classification scheme, which consists of one entity ISO 31661 Entry. Since the data model was not available in the documentation, it was necessary to extract it for the resource implementation itself. ISO 3166 is modelled following the snowflake data model and implemented in XML.Activity 2. Non-ontological resource transformation
In this activity we carried out the following tasks:1. We identified the transformation approach, the ABox transformation, i.e., the transformation of the resource schema into an ontology schema, and the resource content into ontology instances.2. Then we searched our local pattern repository for a suitable pattern to reengineer NORs, taking into account the transformation approach (ABox transformation), the non-ontological resource type (classification scheme), and the data model (snowflake data model) of the resource.3. The most appropriate pattern for this case is the PR-NOR-CLAX-12 pattern. This pattern takes as input a classification scheme modelled with a snowflake data model.4. Finally, we followed the procedure defined by the pattern selected for transforming the resource components into ontology elements.Activity 3. Ontology forward engineering
In this activity we formalized and implemented the ontology in OWL. The ontology is available at http://mccarthy.dia.fi.upm.es/ontologies/.Analysis of the applicability of the method
The network of ontologies of the mIO! project was developed following the NeOn Methodology Figure In order to illustrate the dimension of the ontology and the efforts required by the ontological engineers to build it, we outline some data in Table Summary
As a conclusion of this section we can state that the experiment (Section 11.1.1), and the application of the methodological guidelines within the SEEMP and mIO! projects (Sections 11.1.2 and 11.1.3) verify hypothesis H1, that is, the reuse of non-ontologi-cal resources that have reached some degree of consensus in a community permits the development of ontologies in an easier and quicker fashion; hypothesis H2, that is possible to define a unified method for transforming nonontological resources into ontologies independently (1) of the type, data model, or implementation of the resource, and (2) of the target ontology to be generated, i.e., ontology schema (TBox), ontology (TBox+ABox), or ontology instances (ABox); and hypothesis H4, that the set of patterns for re-engineering are independent of the domain of the resources, that is, the patterns can be used to build ontologies in different domains. Furthermore, this method is really valuable for guiding engineers that do not have any previous experience in building a huge ontology network, especially if the network needs to be solidly grounded in NORs.Evaluation of the Technological Support
This section presents three experiments. The first one was conducted with the objective of evaluating the quality of the PR-NOR patterns and the NOR 2 O software library by measuring the similarity of the ontologies generated against gold standard ontologies. The second experiment was carried out for evaluating the usability of the software library. Finally, the third experiment was presented in a real case scenario within the GeoLinkedData ProjectQuality Evaluation of the Patterns and NOR 2 O
The goal of this study is to evaluate the quality of the re-engineering patterns and NOR 2 O software library by measuring the similarity of the ontologies generated against gold standard ontologies. The ontology generated is compared against a reference ontology (or gold standard) built manually by external ontology experts not involved in the experiment.Settings
For this experiment, two ontology engineering experts built five excerpts of ontologies in OWL from available NORs (two classification schemes, two thesauri and one lexicon) of different domains. One expert built two ontologies and the other built three ontologies. Then, the experts exchanged their ontologies in order to evaluate them. Later, the experts refined the ontologies by following the comments provided in the review. At the end of the process we had five "gold standard" ontologiesExecution
The experiment was executed in the three phases:1. Each NOR was transformed automatically with the following patterns:EVALUATION OF THE TECHNOLOGICAL SUPPORT
• ASFA, with the PR-NOR-TSTX-01 pattern.• ETT, with the PR-NOR-TSTX-01 pattern.• ACM, with the PR-NOR-CLTX-02 pattern.• FOET, with the PR-NOR-CLTX-01 pattern.• BioLexicon, with the PR-NOR-LXTX-02 pattern.2. For disambiguating the relations between entities of a particular resource we executed the disambiguation algorithm with WordNet.3. In order to assess the quality of the ontologies generated, we compared the "gold standard" ontologies with the excerpts of the five ontologies generated automatically by means of similarity measures based on (1) the Cider System Collecting results
We built a table for comparing, by means of the similarity measures, each of the "Gold Standard" ontologies with the ontologies generated. Table Finding and observations
We can state that the ontologies generated have an acceptable similarity degree when compared to the gold standard ones.Based on the results obtained, we can say that the main strength of the NOR 2 O software library and patterns is that they generate ontologies with an acceptable level of quality, meaning by quality the similarity of the ontologies to the gold standard ones.Usability Evaluation of the Software Library
This reported study refers to the evaluation of the usability of the NOR 2 O software library in the context of the development of ontologies.Settings
We performed this user study with the same participants involved in the Master Course (see Section 11.1.1). For the study we employed a classification scheme and a thesaurus.User study 1: Usability of NOR 2 O for building an ontology with a classification scheme. The classification scheme of this experiment was the Classification of Environmental Protection Activities (CEPA-94User study 2: Usability of NOR 2 O for building an ontology with a thesaurus. The resource used was the ETT thesaurus, which has 2522 terms and is implemented in an XML file. In this study we extracted an excerpt of 21 terms Thus, we conducted two experiments following the Software Usability Measurement Inventory (SUMI) method Execution
The investigators met with all the participants for 10 minutes and explained the purpose of the evaluation session; then they presented the methodology of SUMI evaluation. Then, the participants had 20 minutes to test the NOR 2 O software library, and 10 minutes to fill in the SUMI questionnaire on user-interaction satisfaction. During these two phases the participants were not allowed to ask questions to the investigators. The questionnaire was designed to measure the affect, efficiency, learnability, helpfulness and control Collecting results
The SUMI questionnaire includes 50 items with three responses each ("agree", "undecided", "disagree") and the user had to select one of the three responses for each item.Findings and observations
As a general conclusion we can say that the results of the evaluation were positive. The analysis of the results of the experiment conducted reveals some very positive features of the NOR 2 O software library; it also points out some issues that  Efficiency
This dimension obtained the higher value; therefore, we believe that the evaluation of the efficiency of the NOR 2 O software library is satisfactory.Affect
The affect dimension measures the user's general emotional reaction to the software and may be glossed as Likeability. The item regarding this dimension that most contributed to 10.5% of disagreement in the user's general reaction to the software was: "I feel safer if I use only a few familiar commands or operations". This is one of the aspects of the NOR 2 O software library we should improve, if we want all the funcionalities to be perceived with the same degree of positiveness by the users.Helpfulness
Fifty-five and one half percent of the users believe that the software is selfexplanatory (helpful). Moreover, we found that the item that more contributed to 32.5% of indecision was: "This software is awkward when I want to do something not standard". This means that the majority of the users did not need to find alternative options to perform the actions available in the software library.Control
The global control was calculated as the average of the 10 SUMI questions for this dimension. We consider that the evaluation of this dimension is satisfactory, because we only obtained 9.5% of disagreement. In the same sense, 33.5% of indecision corresponds to aspects that did not appear in the software, such as "The software allows the user to be economic of keystrokes", which is positive.Learnability
This dimension obtained the lowest value; therefore, we should improve this aspect of the NOR 2 O software library if we want to increase the speed and facility with which the users learn how to use new features when necessary.Considering the comments obtained in the experiment, we can state that its main strength is that the majority of students found NOR 2 O useful and understandable.Applicability and Usability of NOR 2 O within the GeoLinked-Data Project
In order to evaluate the applicability and usability of the NOR 2 O software library, we conducted an experiment in a real case scenario within the GeoLinkedData ProjectGeoLinkedData is an open initiative whose aim is to enrich the Web of Data In the process of linked data generation from the INE datasets, we had to create RDF instances of the Statistical Core Vocabulary (SCOVO) [HHR + 09]. Thus, basically we had to perform a Population from the INE datasets of the SCOVO vocabulary. This vocabulary provides an expressive modelling framework for statistical information, and has been used in a variety of applications that requires the representation of statistical information. The vocabulary is currently defined in RDF(S).In the following sections we describe how to apply NOR 2 O for generating RDF instances of SCOVO vocabulary.Performing a Population of RDF instances of SCOVO vocabulary
Once we had the INE datasets selected, we had to transform them into ontology instances. Next, we describe the process of generating RDF instances of SCOVO 11.2. EVALUATION OF THE TECHNOLOGICAL SUPPORT vocabulary.Activity 1. Non-ontological resource reverse engineering
In this activity we gathered documentation about the INE datasets. From this documentation we realized that resources are a set of bi-dimensional tables in which we have (1) the location in one dimension, (2) the time line in the other, and (3) the set of values of a particular variable. Finally, we realized that INE datasets are stored in Excel spreadsheets. Activity 2. Non-ontological resource transformation
In this activity we carried out the following tasks:1. We identified the transformation approach, Population, i.e., transforming the resource content into ontology instances.2. Then, we searched our local pattern repository for a suitable pattern to reengineer NORs, taking into account the transformation approach (Population) and the non-ontological resource type (bi-dimensional tables).3. As we did not find any suitable pattern for the INE datasets; we had to perform an ad-hoc transformation. Thanks to the modular approach of NOR 2 O, it was easy to extend the software library and include the new non-ontological resource.4. After the enhancement of the library, we performed the transformation of the INE datasets automatically.Activity 3. Ontology forward engineering
We relied on the NOR 2 O software library for generating the ontology instances automatically.Figure Our experience in GeoLinkedData has served us to demonstrate that• The method for re-engineering can be applied even though we did not find a suitable pattern for the transformation.• The re-engineering patterns are extensible to other types of resources, and subsequently NOR 2 O can be extended as well.• The NOR 2 O software library is easy to use in other projects. Summary
As a conclusion we can state that the set of experiments carried out in this section, verifies (1) hypothesis H5, the re-engineering patterns proposed can be implemented in a software library that facilitates the work of ontology engineers when developing ontologies; (2) hypothesis H3, the method for re-engineering nonontological resources is extensible and adaptable to other types of resources. The method can be applied to any kind of non-ontological resource independently of its type, data model or implementation; and (3) hypothesis H4, it is possible to create patterns for re-engineering that allow generating ontologies from available nonontological resources; these re-engineering patterns are extensible to other types of resources besides classification schemes, thesauri or lexica.Evaluation Summary
This chapter has presented the evaluation of this thesis contributions through a set of experiments. The evaluation of the method proposed, and its technological support, provides positive evidence of the set of hypotheses introduced in Section 3. Chapter 12CONCLUSIONS AND FUTURE WORK
This thesis is focused on the reuse and possible subsequent re-engineering of knowledge resources, as opposed to the custom-building of new ontologies from scratch.A deep analysis of the state of the art has revealed that there are some methods and tools for transforming non-ontological resources into ontologies, but that they have some limitations, namely,• Most of the methods presented are based on ad-hoc transformations for the resource type and the resource implementation.• Only a few methods take advantage of the resource data model, an important artefact for the re-engineering process • No integrated framework, method or corresponding tool considers the resources types, data models and implementations identified in a unified way.• With regard to the transformation approach, most of the methods perform a TBox transformation, some perform an ABox transformation and just a few perform a population. However, no method includes the possibility to perform the three transformations.• Regarding the degree of automation, almost all the methods perform a semiautomatic transformation of the resource.• Regarding to the explicitation of the hidden semantics in the relations of the resource components, we can state that the methods that perform a TBox transformation make explicit the semantics of the relations of the resource components. Most of the methods identify subClassOf relations, others identify ad-hoc relations, and some identify partOf relations. However, only a few methods make explicit the three types of relations.• With respect to how the methods make explicit the hidden semantics in the relations of the resource terms, we can say that three methods rely on the domain expert for making explicit the semantics, and two rely on an external resource, e.g., DOLCE ontology. Moreover, there are two methods that rely on external resources but not for making explicit the hidden semantics, but for finding out a proper ontology for populating it.• As for to the provision of the methodological guidelines, almost all the methods provide methodological guidelines for the transformation. However these guidelines are not finely detailed; for instance, they do not provide information about who is in charge of performing a particular activity/task, nor when that activity/task has to be carried out.• With regard to the techniques employed, most of the methods do not mention them at all. Only a few methods specify techniques as transformation rules, lexico-syntactic patterns, mapping rules and natural language techniques.In this thesis we have provided a method and its technological support that rely on re-engineering patterns in order to speed up the ontology development process by reusing and re-engineering as much as possible available non-ontological resources. To achieve this overall goal, we have decomposed it in the following objectives: (1) the definition of methodological aspects related to the reuse of nonontolo-gical resources for building ontologies; (2) the definition of methodological aspects related to the re-engineering of non-ontological resources for building ontologies; (3) the creation of a library of patterns for re-engineering non-ontological resources into ontologies; and (4) the development of a software library that implements the suggestions provided by the re-engineering patterns.Having in mind these goals, in this chapter we present how the open research problems identified in Chapter 2 are solved. Then, we discuss the verification of our hypotheses, and finally we provide an outlook for the future lines of work.Review of the Contributions
This section reviews the main contributions of this thesis and how we solved the open research problems.• Up to the writing of this thesis no definition of non-ontological resources could be found. Moreover, an analysis of the literature has revealed that there are different ways of categorizing NORs, though an accepted and agreed upon typology of NORs does not exist yet. To address the previous limitations, we have introduced the definition of non-ontological resource and proposed a categorization of them according to three different features: type of non-ontological resource, data model and implementation. This categorization is neither exhaustive nor complete. Currently, we are enriching it by CHAPTER 12. CONCLUSIONS AND FUTURE WORK abstraction levels that define the activities in ontology engineering: specification, conceptualization, formalization, and implementation.• The methods available for converting non-ontological resources into ontologies do not provide detailed guidelines for the transformation. Thus, to address this limitation we have proposed a method for re-engineering non-ontological resources by means of patterns. Our method tries to solve the problem of not having detailed guidelines on how to transform nonontological resources into ontologies. The method, presented in Chapter 6, relies on the use of patterns guiding the transformation, although, the software library can also be used for generating the ontology automatically.• The methods for the conversion of non-ontological resources into ontologies do not provide the techniques employed nor do they reuse good practices for the transformation. To overcome this limitation, we propose a set of patterns. These patterns for transforming non-ontological resources into ontologies has several advantages: (1) they include expertise in how to guide a re-engineering process, (2) they improve the efficiency of the re-engineering process, and (3) they make the transformation process easier for ontology engineers.According to the NOR categorization presented in Chapter 5, in this thesis we propose patterns for re-engineering classification schemes (Chapter 7), thesauri (Chapter 8), and lexicons (Chapter 9). The set of patterns are included in the the ODP Portal• The tools that transform non-ontological resources into ontologies do not cover the three transformation approaches (TBox, ABox, and Population) nor the non-ontological resource types identified, among other features. Within this thesis we have developed a software library, NOR 2 O, that implements the transformation suggested by the patterns. This software library tries to solve the lack of technological support for an integrated method that takes into account the different types of NORs and their internal data models and implementations in an uniform way. The NOR 2 O software library, presented in Chapter 10, is a Java library that performs an ETL process (2) considers the syntactic and semantic transformation aspects; (3) contemplates the generation subClassOf and partOf relations; (4) relies on WordNet as external resource for discovering the hidden semantics of the NOR terms; (5) depends on re-engineering patterns for generating ontologies from the resources; and (6) is supported by the NOR 2 O software library.As for the ontologies generated (see Table HYPOTHESES VERIFICATION
Hypotheses Verification
We have verified the hypotheses of this thesis by different means:• Within the evaluation of the methodological guidelines, an analysis of the results of the experiments, described in Sections 11.1, 11.1.2, and 11.1.3 some very positive features. For example, -The results of the understandability, applicability and usability of the methodological guidelines indicate that the method is specially useful for guiding the ontological engineers. Moreover, the method allows building ontologies faster and with fewer resources (hypothesis H1). -It is possible to define a unified method for transforming non-ontological resources into ontologies independently (1) of the type, data model or implementation of the resource, and (1) of the target ontology, TBox, TBox+ABox, or ABox (hypothesis H2). -The set of re-engineering patterns are independent of the domain of the resources; in other words, the patterns can be used to develop ontologies in different domains, e.g., occupation, geographical location, education and training (hypothesis H4).• Within the evaluation of the technological support, the analysis of the results of the experiments, described in Sections 11.2.1, 11.2.2, and 11.2.3 shows also very positive features. For example, -The method for re-engineering non-ontological resources is extensible and adaptable to other types of resources, e.g., bidimensional tables (hypothesis H3). -Re-engineering patterns generate ontologies from available non-ontological resources independently of (1) how they have been implemented(databases, XML); (2) the target ontology to be generated (TBox, TBox+ABox, or ABox); (3) the domain of the resource (statistical, occupation, eduaction, etc.); and (4) its being extended to other type of resources (hypothesis H4).-NOR 2 O, the software library that implements the suggestions given by the patterns, facilitates the work of ontology engineers (hypothesis H5).Future Work
In this thesis we have tackled many open research problems within the context of the reuse and re-engineering of non-ontological resources for building ontologies but there are still open issues to resolve or extensions to implement in the near future. We would like to mention some of the most important from our perspective:• The improvement of the process of reusing non-ontological resources with the creation of a registry of non-ontological resources that have reached some consensus in a community. The NORs would be annotated by means of NoRMV, described in Chapter 5, thus it would be easy to identify, find and reuse NORs effectively and efficiently.• Regarding the process of re-engineering non-ontological resources, important features are -The building of richer ontologies by extending the taxonomic structures with disjoint knowledge.-The inclusion in the re-engineering patterns of the support for transforming excerpts of the resource, and not the whole resource.-The inclusion of the support of more non-ontological resource types, data models and implementations, as well as additional external resources like DBpedia for making explicit the semantics on the relations of the NOR terms.-The generation of GoodRelations-compliant ontologies for product types and product features. GoodRelations• The consideration of multilingual non-ontological resources for building multilingual ontologies. This would require the identification of how the multilingual information is represented in the non-ontological resources and the definition of a linguistic model for expressing the multilingual information 12.3. FUTURE WORK of the ontologies. Moreover, this feature would also imply that the patterns have to rely on additional knowledge resources, i.e., multilingual, monolingual resources, and background-knowledge resources.• The consideration of the integration of different knowledge resources. It would be interesting to investigate on methodological guidelines for selecting, comparing and combining non-ontological resources, ontological resources, and ontology design patterns with the aim of building ontology networks.• The evolution of the non-ontological resources. It would be good to analyse how to transform non-ontological resources that change along the time, and to identify how the frequency of changes affects the ontologization of that resource, and to propose incremental transformations.• Linked Data has been recently suggested as one of the best alternatives for creating shared information spaces -To suggest available vocabularies to reuse, when modelling the ontology, taking into account the domain of the resources and using semantic web search engines, such as Sindice The general goal of this thesis, i.e., the reuse and re-engineering of non-ontological resources for speeding up the ontology development process, is a core requirement for supporting and promoting the new paradigm of the reuse-based approach in ontology development. Thus, our results represent a step forward in the achievement of such a goal.Figure 1
B
Figure 2 .
Figure 2 . 2 :
CHAPTER 2 .
Figure 2 . 4 :
CHAPTER 2 .
Figure 2 .
CHAPTER 3 .
Figure 4 . 1 :
Figure 4 . 2 :
Figure 4 . 3 :
CHAPTER 5 .
Figure 5
Figure 5 . 2 :
Figure 5
CHAPTER 5 .
Figure 6
4 : 9 :
Line 8 )
CHAPTER 6 .
Figure 6
Figure 7 . 1 :
Figure 7 .
Figure 7 .
Figure 7 . 2 :•
Figure 8 . 1 :
Figure 8 . 3 :
Figure 8 . 4 :
Figure 8 .
Figure 8 .
Figure 8 . 7 :
Figure 9
Figure 9 .
Figure 9 . 5 :
Figure 9 .•
CHAPTER 10 .
Figure 10 . 2 :
Figure 10 .
Figure 10 . 3 :
Figure 10 . 4 :
Figure 10 .
Figure 11 . 2 :
11. 2 .
Figure 11 . 3 :
Figure 11 . 4 :
CHAPTER 12 .Features
• I. Celino, D. Cerizza, M. Cesarini, E. Della Valle, F. De Paoli, J. Estublier, M. Grazia Fugini, A. Gómez Pérez, M. Kerrigan, P. Guarrera, M. Mezzanzanica, J. Ramirez, B. Villazón-Terrazas, and G. Zhao. "SEEMP: A Networked Marketplace for Employment Services". In Vassilios Peristeras, Tomas Vitvar, and Konstantinos Tarabanis (eds.) Semantic Technologies for E-Government, Springer, 2009. • E. Della Valle, D. Cerizza, I. Celino, M. Grazia Fugini, J. Estublier, G. Vega, M. Kerrigan, A. Gómez Pérez, J. Ramírez, B. Villazón-Terrazas, G. Zhao, M. Cesarini, and F. De Paoli. "The SEEMP Approach to Semantic Interoperability for e-Employment". In Robeto García (ed.): Semantic•
This standard consists of 201 entity data types; the top level entity data type is thing, with its subtypes of a possible individual and abstract object. All other entities are subtypes of them.•
Table 2
Table 2 .
Table 2 . 4 :
Table 2 .
2.1.4.1 Results according to non-ontological resourceTable 2 .
6: Comparison of the tools according to the transformation process featuresTable 2 .
•
41 http://industriallogic.com/patterns/ 42 http://www.cetus-links.org/oo_patterns.html 43 http://www.w3.org/2001/sw/BestPractices/OEP/Table 5
Table 7 .
Table 7 .
Table 7 .
Table 7 .
repeat 12: for cei ∈ noP arentT erms do 13: if not alreadyCreatedClassFor(cei) then 14: Ci ← createClass(cei) 15: end if 16: children ← childrenOf(cei) 17: for cej ∈ children do 18: if not alreadyCreatedClassFor(cej) then 19:Table 7 .
16: children ← childrenOf(Environmental area) // using the adjacency list model 16: children ← [Inland/Marine;Ocean;North/South/Equatorial] 19: C5 ← createClass(Inland/Marine) 21: rel4 ← ExternalResource.getRelation(C2,C5) 19: C6 ← createClass(Ocean) 21: rel5 ← ExternalResource.getRelation(C2,C6) 19: C7 ← createClass(North/South/Equatorial) 21: rel6 ← ExternalResource.getRelation(C2,C7) 16: children ← ∅ ← childrenOf(Jurisdiction area) 16: children ← childrenOf(Fishing statistical area) // using the adjacency list model 16: children ← [FAO Statistical area;Areal grid system] 19: C8 ← createClass(FAO Statistical area) 21: rel7 ← ExternalResource.getRelation(C4,C8) 19: C9 ← createClass(Areal grid system) 21: rel8 ← ExternalResource.getRelation(C4,C9) 26: noP arentT erms ← [Inland/Marine;Ocean;North/South/Equ.;FAO Statistical;Areal grid system] 16: children ← ∅ ← childrenOf(Inland/Marine) 16: children ← ∅ ← childrenOf(Ocean) 16: children ← ∅ ← childrenOf(North/South/Equatorial) 16: children ← ∅ ← childrenOf(FAO Statistical area) 16: children ← ∅ ← childrenOf(Areal grid system) 26: noP arentT erms ← ∅Table 7 .
16: children ← [Specialist e tecnici delle scienze informatiche] 19: C1 ← createClass(Specialist e tecnici delle scienze informatiche) 21: rel1 ← ExternalResource.getRelation(R1,C1) 16: children ← childrenOf(Professioni operative della gestione dimpresa) // using the snowflake model 16: children ← [Specialist e tecnici delle gestione dimpresa] 19: C2 ← createClass(Specialist e tecnici delle gestione dimpresa) 21: rel2 ← ExternalResource.getRelation(R2,C2) 26: noP arentT erms ← [Specialist e tecnici delle scienze informatiche;Specialist e tecnici delle gestione dimpresa] 16: children ← childrenOf(Specialist e tecnici delle scienze informatiche) // using the snowflake model 16: children ← [Tecnici delle scienze informatiche] 19: C3 ← createClass(Tecnici delle scienze informatiche) 21: rel3 ← ExternalResource.getRelation(C1,C3) 16: children ← childrenOf(Specialist e tecnici delle gestione dimpresa) // using the snowflake model 16: children ← [Tecnici delle gestione dimpresa] 19: C4 ← createClass(Tecnici delle gestione dimpresa) 21: rel4 ← ExternalResource.getRelation(C2,C4) 26: noP arentT erms ← [Tecnici delle scienze informatiche;Tecnici delle gestione dimpresa] 16: children ← ∅ ← childrenOf(Tecnici delle scienze informatiche) // using the snowflake model 16: children ← ∅ ← childrenOf(Tecnici delle gestione dimpresa) 26: noP arentT erms ← ∅Table 7 .
repeat 12: for cei ∈ noP arentT erms do 13: if not alreadyCreatedClassFor(cei) then 14: Ci ← createClass(cei) 15: end if 16: children ← childrenOf(cei) 17: for cej ∈ children do 18: if not alreadyCreatedClassFor(cej) then 19:Table 7 .
Table 7 .
7: I8 ← createInstance(Areal grid system)Table 7 .
PROCESS: How to Re-engineer General 1: entityN ame ← name of the entity that contains the c.s. terms 2: mainClass ← createClass(entityN ame) 3: relation ← subClassOf 4: relate(relation,mainClass,mainClass) 5: csT erms ← classification scheme terms 6: for csi ∈ csT erms do 7: Ii ← createInstance(csi) 8: setInstanceOfClass(Ii,mainClass) 9: end forTable 7 .
Table 7 .
PROCESS: How to Re-engineer General 1: entityN ame ← name of the entity that contains the c.s. terms 2: mainClass ← createClass(entityN ame) 3: relation ← subClassOf 4: relate(relation,mainClass,mainClass) 5: csT erms ← classification scheme terms 6: for csi ∈ csT erms do 7: Ii ← createInstance(csi) 8: setInstanceOfClass(Ii,mainClass) 9: end forTable 8 .
Table 8 .
Table 8 .
Table 8 .
Table 11 .
Labour Regulatory Ontology Skill Ontology Language Ontology Occupation Ontology Geography Ontology Time Ontology Education Ontology Driving License Ontology Compensation Ontology Economic Activity Ontology Job Offer Ontology Job Seeker Ontology
subClassOf subClassOf Figure 11.1: SEEMP Reference OntologyTable 11 .
•
Table 11 .
Table 11 .
Table 11 .
Table 11 .
Table 12 .
http://knowledgeweb.semanticweb.orghttp://www.sekt-project.orghttp://www.nlm.nih.gov/mesh/umlsforelis.htmlhttp://www.cks.nhs.uk/homehttp://www.neon-project.orghttp://www.w3.org/2001/sw/BestPractices/OEP/http://www.gong.manchester.ac.uk/odp/html/index.htmlhttp://ontologydesignpatterns.orghttp://patterns.dataincubator.org/book/http://www.seemp.orgProvenance focuses on describing and understanding where and how data is produced, actors involved in its production, and processes applied before the arrival of data to the collection from which it is now accessedhttp://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_ detail.htm?csnumber=29557the EXPRESS file is a computer-interpretable of ISO 15926-2 http://www.iso.org/ iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=38047http://swoogle.umbc.eduhttp://www.flickr.com/http://wordnet.princeton.edu/obtainhttp://www.swi-prolog.org/packages/semweb.htmlhttp://www.loa-cnr.it/DOLCE.htmlhttp://www.nlm.nih.gov/research/umls/http://www.isi.edu/isd/LOOM/ALC allows for the construction of concept hierarchies.Integrated Public Sector Vocabulary http://www.esd.org.uk/standards/ipsv/Common Thesaurus for Audiovisual Archives http://informatieprofessional. googlepages.com/gtaaMedical Subject Headings http://www.nlm.nih.gov/mesh/http://www.getty.edu/research/conducting_research/vocabularies/ aat/http://vesa.lib.helsinki.fi/ http://www.loa-cnr.it/DOLCE.html http://www.yso.fi/onto/ysohttp://www.fao.org/aims/ag_intro.htmhttp://kaon.semanticweb.org/alphaworld/reverse/http://flora.sourceforge.net/aboutFlogic.phphttp://www.w3.org/Submission/2004/SUBM-RDQL-20040109/http://www.w3.org/TR/xquery/http://www.ifla.org/VI/5/reports/rep4/42.htm#chap2http://www.x12.org/http://www.heppnetz.de/projects/skos2gentax/http://www.w3.org/2004/02/skos/http://kaon.semanticweb.org/alphaworld/reverse/www.oeg-upm.net/index.php/en/downloads/9-r2o-odempasterhttp://www4.wiwiss.fu-berlin.de/bizer/d2r-serverhttp://www.topbraidcomposer.com/http://www4.wiwiss.fu-berlin.de/bizer/d2rq/http://rhizomik.net/redefer/http://www.mindswap.org/ ˜mhgrove/convert/http://simile.mit.edu/repository/RDFizers/flat2rdf/http://www.aifb.uni-karlsruhe.de/WBS/pha/bib/index.htmlhttp://ontoware.org/projects/swrc/http://www.mindswap.org/ ˜Erreck/excel2rdf.shtmlhttp://www.gong.manchester.ac.uk/odp/html/index.htmlhttp://ontologydesignpatterns.orghttp://patterns.dataincubator.org/book/http://ontologydesignpatterns.org/wiki/Submissions:ReengineeringODPs([A2,A4], [H5], [R7,R9,R11])http://ontologydesignpatterns.orghttp://reimdoc.atosorigin.es/http://knowledgeweb.semanticweb.org/http://reimdoc.atosorigin.es/http://knowledgeweb.semanticweb.org/http://www.neon-project.orghttp://seemp.orgAlong this thesis we use either NOR or Non-ontological resource without distinction.http://www.fao.org/fi/glossary/default.asphttp://wordnet.princeton.edu/http://www.fao.org/figis/servlet/RefServlethttp://www.fao.org/agrovoc/http://www.vanderwal.net/folksonomy.htmlhttp://del.icio.us/http://www.rosettanet.org/http://www.edibasics.co.uk/http://www.unspsc.org/http://wordnet.princeton.edu/http://www.nlm.nih.gov/pubs/factsheets/umlsmeta.htmlhttp://www.nlm.nih.gov/mesh/http://www.getty.edu/research/tools/vocabularies/aat/index.htmlhttp://www.ilo.org/public/english/bureau/stat/isco/index.htmPlease note that not all classes and properties are included. The ontology is available for downloading at http://mccarthy.dia.fi.upm.es/normvThis document is the outcome of the Ontology Specification ActivityA deep analysis of the quality of the resource is out of the scope of this thesishttp://ontologydesignpatterns.orgOntology Design Patterns are included in the ODP portal. The ODP portal is a Semantic Web portal dedicated to ontology design best practices for the Semantic Web, emphasizing particulary ontology design patterns (OPs)http://www.dbpedia.org/Attributive adjectives are part of the noun phrase headed by the noun they modify; for example, happy is an attributive adjective in "happy people". In English, attributive adjectives usually precede their nouns in simple phrases but often follow their nouns when the adjective is modified or qualified by a phrase acting as an adverb.http://ontologydesignpatterns.org/wiki/Submissions:PartOfhttp://ontologydesignpatterns.orghttp://www.fao.org/figis/servlet/RefServlethttp://www.fao.orghttp://www.fao.org/figis/servlet/RefServlethttp://www.fao.org/agrovoc/http://www.cl.cam.ac.uk/research/nl/acquilex/http://www.wtec.org/loyola/kb/c5_s2.htmhttp://www.ilc.cnr.it/EAGLES/home.htmlhttp://aune.lpl.univ-aix.fr/projects/multext/http://www.elda.fr/catalogue/en/text/doc/parole.htmlhttp://www.ub.edu/gilcub/SIMPLE/simple.htmlhttp://www.ilc.cnr.it/EAGLES96/isle/ISLE_Home_Page.htmExtract, transform, and load (ETL) of legacy data sources, is a process that involves: (1) extracting data from the outside resources, (2) transforming data to fit operational needs, and (3) loading data into the end target resources2 http://www4.fao.org/asfa/asfa.htm 3 http://mccarthy.dia.fi.upm.es/ontologies/asfa.owlAttributive adjectives are part of the noun phrase headed by the noun they modify; for example, happy is an attributive adjective in "happy people". In English, the attributive adjective usually precedes the noun in simple phrases, but often follows the noun when the adjective is modified or qualified by a phrase acting as an adverb.http://ontologydesignpatterns.org/wiki/Submissions:PartOfhttp://dbpedia.org/http://owlapi.sourceforge.net/http://www.mediawiki.orghttp://www.semantic-mediawiki.orghttp://www.mediawiki.org/Extension:SemanticFormThe full list of the extensions can be found at http://ontologydesignpatterns.org/ wiki/Special:Versionhttp://stlab.istc.cnr.it/stlab/http://www.seemp.org/http://www.cenitmio.es/http://mccarthy.dia.fi.upm.es/master/rd/homework/resources/ett.xmlAttributive adjectives are part of the noun phrase headed by the noun they modify; for example, happy is an attributive adjective in "happy people". In English, attributive adjectives usually precede their nouns in simple phrases, but often follow their nouns when the adjective is modified or qualified by a phrase acting as an adverb.http://ec.europa.eu/eurostat/ramon/http://online.onetcenter.org/http://www.eurodyn.com/http://www.wsmo.org/wsml/http://www.cenitmio.es/http://www.iso.org/iso/en/prods-services/iso3166ma/index.htmlhttp://www.countriesandcities.com/regions/http://park.org/Regions/http://www.ims.uni-stuttgart.de/projekte/corplex/TreeTagger/http://geo.linkeddata.es/The ontologies are available at http://mccarthy.dia.fi.upm.es/ontologieshttp://oaei.ontologymatching.org/Available at http://ec.europa.eu/eurostat/ramon/http://mccarthy.dia.fi.upm.es/master/it/homework/cepa.ziphttp://mccarthy.dia.fi.upm.es/master/it/homework/ett.ziphttp://geo.linkeddata.es/http://www.rosettanet.org/http://www.edibasics.co.uk/http://ontologydesignpatterns.org/Extract, transform, and load (ETL) of legacy data sources, is a process that involves: (1) extracting data from the outside resources, (2) transforming it to fit operational needs, and (3) loading into the end target resourceshttp://www.heppnetz.de/projects/goodrelations/http://richard.cyganiak.de/2007/10/lod/http://www.w3.org/TR/cooluris/http://sindice.com/