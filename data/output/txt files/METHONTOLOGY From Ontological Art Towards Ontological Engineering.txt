Introduction
Until now, a big quantity of ontologies have been developed by different groups, under different approaches, and using different methods and techniques. However a few works have been published about how to proceed, showing the practices, design criteria, activities, methodologies, and tools used to build them. The consequence is clear, the absences of standardized activities, life cycles, and systematic methodologies as well as a set of well-defined design criteria, techniques and tools make the ontologies development a craft rather than an engineering activity. So, the art will became engineering when there exist a definition and standardization of a life cycle that goes from requirements definition to maintenance of the finished product, as well as methodologies and techniques that drive their development.One of the main problems that Knowledge Engineers (KEs) have when building expert systems is the difficulty of getting a set of requirements for the system. Requirements specify how the system will behave. Since experts are not usually able to describe in a concrete and complete way how they behave in the application domain, it is hard for KEs to specify the future behavior of the Knowledge-Based Systems (KBS). So, KBS are usually built incrementally using evolving prototypes in which the deficiencies of the final product of each cycle can be used as the specification of the next prototype. In ontologies do not occur the same. Ontologies are built to be reused or shared anytime, anywhere, and independently of the behavior and domain of the application that uses them. So, ontologists should be able to specify, at least partially, a big portion of the needed vocabulary that the ontology will cover for a given domain. This is the main difference between ontologies and K.BS development processes. Consequently, methodologies used to build KBSs can not completely be applied to build ontologies.In the following sections, this paper presents a set of activities that conforms the ontology development process (section #2), a life cycle of ontologies (section #3) METHONTOLOGY (section #4), a method to build ontoiogies from scratch.Ontology Development Process
The ontology development process refers to what activities you need to carry out when building your ontologies: However, the ontology development process does not imply an order of execution of such activities. Its goal is to identify the list of activities to be completed. Usually verbs are used to refer to such activities.The ontology development process is composed of the following:*
Before building your ontology, you should plan the main tasks to be done, how they will be arranged, how much time you need to perform them and with which resources (people, software and hardware).development of your ontology without knowing its purpose and scope. So, try to answer the questions: why this ontology is being built and what are its intended uses and end-users. Then, specify or write the answers in an ontology requirements specification document. As an example of an informal and formal specification of two independent ontoiogies in the domain of modeling enterprise, to cite the Enterprise ontology (by Uschold) and the TOVE ontology (by Gruninger). Although their outputs are almost the same (a set of terms), the degree of formality in writing their requirements specification documents are different. The Enterprise ontology has been specified in natural language and the TOVE ontology using a set of competence questions Unless you wish to build a toy ontology or unless you are an expert in the domain, you will elicit knowledge using KBSs knowledge elicitation techniques. As a result, you should be able to list the sources of knowledge and give, a rough description of how you carried out the processes, and of the techniques you used. The most extensive work on capturing knowledge was reported by Once you have acquired enough knowledge you conceptualize it in a conceptual model that describes the problem and its solution. A set of intermediate representations for conceptualizing a domain ontology of objects were presented by To transform the conceptual model into a formal or semi-compatible model, you need to formalize it using frame-oriented or description logic representation systems.Ontoiogies are built to be reused. In this way, duplication of work in building ontologies has less sense than its duplication when you build a traditional Knowledge Base. So, you should reuse existing ontologies. Try to integrate as much as possible existing ontologies in your ontology. A method to integrate ontoiogically heterogeneous taxonomic knowledge and its application to the medical domain was presented by Gangemi and colleagues in Their ontology server provides a semantic model for ontology inclusion in order to avoid conflict between symbols.To make your ontology computable, you need to implement it in a formal language. As a reference framework for selecting target languages, we would cite the comparative study performed by Speel and colleagues at We remark that the ontology development process does not imply an order on the execution of such tasks. Its goal is only to identify the list of activities to be done.Ontology Life Cycle
"Don't build your house starting by the roof", says a Spanish proverb to advice that activities require an order and that they should be divided and carry out step by step in a planned way, in order to succeed. In the previous section, we divided the ontology development process in a set of activities. However, we did not indicate the order and depth in which such activities should be done. It is obvious that planification and maintenance are the first and the last, but it is not clear whether or not knowledge acquisition is totally or partially simultaneous with the specification and conceptualization activities, if conceptualization precedes to the integration and this one goes before the implementation, if the evaluation and documentation are sequential to the implementation or if they should be done as all the activities move forward, and if you should carry out an activity totally or partially before starting the following.First, the ontology life cycle answers the previous questions identifying the set of stages though which the ontology moves during its life. Making an analogy, we could say that the ontology development process is similar to the production chains in a manufacturing domain as the ontology is to the final product that such production chain creates. Just as the life cycle of human beings moves forward sequentially and irreversibly through the following states: childhood, adolescence, youth, maturity and old age, the ontology life cycle moves forward through the following states: specification, conceptualization, formalization, integration, implementation and maintenance. So, the ontology development process transforms the initial product (the need you have to build the ontology) into a final product (the evaluated, documented ontology, codified in a formal language). The previous states through which the ontology pass conforms its life cycle, as it is shown in figure Activity
Second, the ontology life cycle shows when you should perform the activities to move from a given state to the next and in how much depth. Some life cycle models have been described in Software Engineering and transferred to Knowledge Engineering (Aionso et ai. 1996). As we said before, the main problem facing KE when (s)be begins new KBS is to build a requirements specification document. Unlike, an ontologist must be able to partially specify a set of requirements before building an ontology, which will constitute the initial core of the ontology. So, the ontology life cycle is closer to a classic software life cycle than it is to a KBS life cycle.The waterfall life cycle defined by Royce (Royce 1987) is the traditional life cycle model in Software Engineering. In this model, activities are sequential in the sense that you cannot move onto the next activity until you have completely finished the previous one. This model forces the ontologist to identify all the terms at the beginning, and the implementation must be a mirror of the specification, that is, it must satisfy the complete requirements specification document. Its main inconvenient is that the ontology is static, you cannot include, remove or modify terms in it. Obviously the use of a waterfall life cycle model is not adequate due to the absence of a complete requirements specification at the earliest stages of the development process and due to the evolution of the ontologies definitions over time. Figure Specification
The goal of the specification phase is to produce either an informal, semi-formal or formal ontology specification document written in natural language, using a set of intermediate representations or using competency questions, respectively. METHONTOLOGY proposes that at least the following information be included:a)The purpose of the ontology, including its intended uses, scenarios of use, end-users, etc.b)
Level of formality of the implemented ontology, depending on the formality that will be use to codify the terms and their meaning. Uschold (Uschold Gruninger 1996) classifies the degree or level of formality in a range of: highly informal, semiinformal, semi-formal or rigorously formal ontologies, depending on whether terms and their meanings are codified in a language between natural language and a rigorous formal language. c) Scope, which includes the set of terms to be represented, its characteristics and granularity. The formality of the ontology specification document varies on its degree of formality depending on if you use natt, ral language, competency questions or a middle-out approach. For example, in a middle-out approach, in the scoping activity, you can use a glossary of terms to gather the set of terms that must be included in the ontology, whether or not you know their meaning at this stage of the ontology development process. It is also advisable to group concepts in concepts classifications trees (G6mez-P&ez, Fernandez, & De Vicente). The use of these intermediate representations will allow you not only to verify, at the earliest possible stage, relevant terms missed and to include them in the specification document, but also to remove terms that are synonyms and not relevant in your ontology anymore. The goal of these checks is to guarantee the conciseness and completeness of the ontology specification document. Figure Uschold Since you can not prove the total completeness of your ontology specification document (any time, anywhere, someone may find a new relevant term to be included), you must guarantee in a good ontology specification document must have the following properties: * Concision, that is, each and every term is relevant, and there are no duplicated or irrelevant terms.ONTOLOGY REQUIREMENT SPECIFICATION DOCUMENT Domain: Chemicals Date: May, 15th 1996 Conceptualized-by: Asunci6n G6mez-P,~rez Implemented-by: Muriano Fernandez-L6pezPurpoee: Ontology about chemical substances to be used when information about chemical elements is required in teaching, manufacturing. analysis, etc. This ontology coul be used to ascertain, e.g..the atomic weight of the element Sodium.Level of Formality: Semi-formal.Scope  Partial completeness, which is related with the coverage of the terms, the stopover problem and level of granularity of each and every term.Consistency, which refers to all terms and their meanings making sense in the domain.Knowledge Acquisition
It is important to bear in mind that knowledge acquisition is an independent activity in the ontology development process. However, it is coincident with other activities. As we told before, most of the acquisition is done simultaneously with the requirements specification phase, and decreases as the ontology development process moves forward.Experts, books, handbooks, figures, tables and even other ontologies are sources of knowledge from which the knowledge can he elucidated using in conjunction techniques such us: brainstorming, interviews, formal and informal analysis of texts, and knowledge acquisition tools. For example, if you have no a clear idea of the purpose of your ontology, brainstorming technique, informal interviews with experts, and inspecting similar ontologies will allow you to elaborate a first glossary with terms potentially relevant. To refine the list of terms and their meaning, formal and informal analysis of text techniques in books and handbooks in conjunction with structured and non-structured interviews with experts might be used to include or remove terms in the glossary. Interviews to expert might help you to build concepts classifications trees and to contrast them against figures given in books.The techniques we used in the knowledge acquisition phase of the chemical ontology were: * Non-structured interviews with experts, to build a preliminary draft of the requirements specification document.* Informal text analysis, to study the main concepts given in books and handbooks. This study enables you to fill in the set of intermediate representations of the conceptualization.* Formal text analysis. The first thing to do is to identify the structures to be detected (definition, affirmation, etc.) and the kind of knowledge contributed by each one (concepts, attributes, values, and relationships).*
Structured interviews with experts to get specific and detailed knowledge about concepts, their properties and their relationships, to evaluate the conceptual model once the conceptualization activity has been finished, and to evaluate implementation.Conceptualization
In this activity, you will structure the domain knowledge in a conceptual model that describes the problem and its solution in terms of the domain vocabulary identified in the ontology specification activity. The first thing to do is to build a complete Glossary of Terms (GT). Terms include concepts, instances, verbs and properties. So, the GT identifies and gathers all the useful and potentially usable domain knowledge and its meanings. Note that you do not start from scratch when you develop your GT. If you made a good specification document, many terms will have been identified in that document. Other will be identified as the ontology construction process advances. Then, these new terms must be included in the GT.Once you have almost completed the GT, you must group terms as concepts and verbs. Each set of concepts/verbs would include concepts/verbs that are closely related to other concepts/verbs inside the same group as opposed to other groups. Indeed, for each set of related concepts and related verbs, a concepts classification tree and a verbs diagram is built. After they have been built, you can split your ontology development process into different, but related, teams. Those related with concepts, should follow the guidelines presented by Concepts will be described using (G6mez-Ptrez, Fern;tndez, & De Vicente 1996): Data Dictionary, which describes and gathers all the useful and potentially usable domain concepts, their meanings, attributes, instances, etc.; tables of instance attributes, which provide information about the attribute or about its values at the instance; tables of class attributes, to describe the concept itselL not its instances; tables of constants, used to specify information related to the domain of knowledge that always take the same value; tables of instances, which define instances; and attributes classification trees, to graphically display attributes and constants related in the inference sequence of the root attributes, as well as the sequence of formulas or rules to be executed to infer such attributes.Verbs represent actions in the domain. They could be described using (Vicente 1997): Verbs Di ctionary, to express the meaning of verbs in a declarative way; tables of conditions, which specify a set of conditions to be satisfied before executing an action, or a set of conditions to be guaranteed after the execution of an action. Finally, to say that tables of formulas and tables of rules gather knowledge about formulas and rules. Note that both branches use these two intermediate representations. In sum, METHONTOLOGY produces in this phase a conceptual model expressed as a set of well-defined deliverables that will allow to the final users: (a) ascertain whether or not an ontology is useful and usable for a given application without inspecting its source code; and (b) to compare the scope and completeness of several ontologies, their reusability, and shareability by analyzing the knowledge expressed in each IR.IData
Integration
With the goal of speeding up the construction of your ontology, you might consider reuse of definitions already built into other ontologies instead of starting from scratch. In this case, we propose the following: I.Inspect meta-ontologies (i.e., in Cyc, in Ontolingua .... ) to select those that better fit your conceptualization. The goal is to guarantee that the sets of new and reused definitions are based upon the same set of basic terms. If existing meta-ontologies are not appropriate for your ontology, you should start the definition and implementation of a new meta-ontoiogy in a formal language.2.
Whether or not you reuse existing meta-ontologies, the next step is to find out which libraries of ontologies provide definitions of terms whose semantic and implementation is coherent with the terms identified in your conceptualization. Once you have chosen the most appropriate terms, if the metaontology upon which those terms have been built is different of the meta-ontology used to build the yours, you should check the existence of translators to transform definitions into your target language.Sometimes it might occur that a term in your conceptualization (e.g., centimeter), that should be included in a given ontology (e.g., Standard Units in Ontolingua) not provided by the ontology server. In this case, you should justify the need to include the missed definitions as well as the benefits of such inclusion to the ontolc, gy maintainer.As a result of this activity, METHONTOLOGY proposes the development of an integration document, summarizing: the meta-ontology you will use and, for each and every term whose definition is going to be used: the name of the term in the conceptual model, the name of the ontology from which you will take its definition, the name of the definition and its arguments in the ontology, as shown in figure Implementation
Ontologies implementation requires the use of an environment that supports the meta-ontology and ontoiogies selected at the integration phase. The result of this phase is the ontology codified in a formal language such us: CLASSIC, BACK, LOOM, Ontolingua, Prolog, C++ or in your favorite language.Any ontology development environment should provide, at least: a iexical and syntactic analyzer to guarantee the absence of lexical and syntactic errors; translators, to guarantee the portability of the definitions into other target languages; an editor, to add, remove or modify definitions; a browser, to inspect the library of ontologies and their definitions; a searcher, to look for the most appropriate definitions; evaluators, to detect incompleteness, inconsistencies and redundant knowledge: an automatic maintainer, to manage the inclusion, removal or modification of existing definitions, and so on.Evaluation
A framework for evaluating knowledge sharing technology (software, ontologies and documentation) has been presented by G6mez P&ez and colleagues in (G6mez-Ptrez, Juristo, & Pazos 1995). Evaluation means to carry out a technical judgment of the ontologies, their software environment and documentation with respect to a frame of reference (in our case the requirements specification document) during each phase and between phases of their life cycle. Evaluation subsumes the terms Verification and Validation. Verification refers to the technical process that guarantees the correctness of an ontology, its associated software environments, and documentation with respect to a frame of reference during each phase and between phases of their life cycle. Validation guarantees that the ontologies, the software environment and documentation correspond to the system that they are supposed to represent. Based on the experience of verifying Ontolingua ontologies, a set of guidelines and how to look for incompleteness, inconsistencies and redundancies have been presented in (Gtmez-Ptrez 1997).The output proposed by METHONTOLOGY for this activity is many evaluation document in which the ontologist will describe how the ontology has been evaluated, the techniques used, the kind of errors found in each activity, and the sources of knowledge used in the evaluation.Documentation
There are not consensuated guidelines on how to document ontologies. In many cases, the only documentation available is in the code of the ontology, the natural language text attached to formal definitions, and papers published in conference proceedings and journals settings out important questions of the ontology already build. This problem is the result of a vicious circle: almost anyone documents ontologies due to there are no guidelines to perform it, there are no guidelines to document ontologies because of the absence of methodologies to build ontoiogies, and there are no standard methodologies to build ontologies due to ontologist do not write, during the whole ontology development process, the steps they follow to build ontoiogies.METHONTOLOGY pretends to break this circle including the documentation as an activity to be done during the whole ontology development process. In fact, after the specification phase, you get a requirements specification document; after the knowledge acquisition phase, a knowledge acquisition document; after the conceptualization, a conceptual model document that includes a set of intermediate representations that describe the application domain; after the formalization, a formalization document; after the integration, an integration document; after the implementation, the implementation document; and during the evaluation, an evaluation document.Conclusion
In this paper we have reduced the existing gap between ontological art and ontological engineering by: i.Identifying a set of activities to be done during the ontology development process. They are: planify, specify, acquire knowledge, conceptualize, formalize, integrate, implement, evaluate, document, and maintain.2.
Proposing the evolving prototype as the life cycle that better fits with the ontology life cycle. The life of an ontology moves on through the following states: specification, conceptualization, formalization, integration, implementation, and maintenance. The evolving prototype life cycle allows the ontologist to go back from any state to other if some definition is missed or wrong. So, this life cycle permits the inclusion, removal or modification of definitions anytime of the ontology life cycle. Knowledge acquisition, documentation and evaluation are support activities that are carried out during the majority of these states.3.
Defining METHONTOLOGY, a well structured methodology to build ontologies from scratch. The methodologies includes a set of activities, techniques to carry out each one, and deliverables to be produced after the execution of such activities using its attached techniques. METHONTOLOGY highly recommend the reuse of existing ontologiesFigure 3 .
Figure 4 .
Sources of Knowledge: Handbook of Chemisto ~ and Physics. 65th edition.ua Term in your Ontology to be reused Name of the Conceptualization term in the ontology