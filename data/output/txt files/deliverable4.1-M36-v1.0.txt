Executive Summary
This document presents the AURORAL ontology network for the rural environment status at the end of the related task T4.1 entitled "Adaptation of existing semantic data models for the rural environment". This task aims at supporting the semantic interoperability within AURORAL platform through common information models defined by ontologies implemented in standard languages like Ontology Web Language (OWL). In addition, this document includes a summary of the methodology for building ontologies followed and the ontology governance model.Since there is a large number of domains and use cases to be considered in the conceptualization of AURORAL, the developed ontology is organized as a modular ontology network. In total, thirteen modules were developed for various use cases.The structure of this deliverable is as follows:• A description of the used ontology development methodology entitled Linked Open Terms (LOT) methodology. • A presentation of the ontology development infrastructure deployed in AURORAL.• A description of an ontology governance process to determine the main principles and best practices followed during the development of the ontology.• Finally, each ontology module is described in detail, indicating its requirements and the description of the current model.The latest version of the AURORAL ontology development network and all development artifacts can be found on the AURORAL ontology portal (https://auroral.iot.linkeddata.es).Introduction
The Semantic interoperability within the AURORAL project is achieved through common ontologies to facilitate the exploitation and the transparency use of heterogeneous data collected from diverse domains. The goal of this document is to present the AURORAL ontology network that was used throughout the different components of AURORAL and by the different actors that will consume the information. This task is considered essential for the other work packages, WP5 and WP6, where the AURORAL ontology network serves as a shared vocabulary and model covering the data value chain required by the project.As there is a broad number of use cases to be considered in the AURORAL conceptualization, thirteen modules were developed for diverse use cases categorized into six different domains. These domains are tourism, health, energy, mobility, dairy farming, and circular economy.During the development of the AURORAL ontology network, existing and standard ontologies were considered, such as the ETSI Smart Applications REFerence (SAREF) ontology, The World Wide Web Consortium (W3C) Web of Things ontology, the time ontology, the unit of measure ontology, etc. AURORAL ontologies are formalized following Description Logics and implemented in the W3C Web Ontology Language standard OWL. This deliverable starts by describing the following methodology for the development of the AURORAL ontologies models, which is the Linked Open Terms (LOT) methodology. After that, an ontology governance process is suggested and detailed. The main goal of this section is to ensure a well-established ontology following a set of principles and best practices. After that, we will describe the ontology development infrastructure used. Finally, the different ontology modules are described before the document is wrapped with the conclusions section.The main novelties of this document regarding previous versions are:• A new section on the governance of the AURORAL ontology has been added. • Certain sections on the ontology's modules have been updated, namely: the core ontology, tourism, biomass, logistics and energy. • New sections on new modules have been added such as: CarBooking, farming, mobility, celltower and electrical vehicle charger.The structure of this deliverable is as follows:• Section 2 explains the methodology used to develop the AURORAL ontologies, namely the LOT methodology. • Section 3 describes the AURORAL ontology governance model.• Section 4 describes the ontology development infrastructure.• Section 5 presents an overview of the AURORAL ontology network.• Sections 6 to 18 present the thirteen ontology modules.• Section 19 concludes the document. Ontology development methodology
This section presents the ontology development methodology used for the development of the AURORAL ontology network. This methodology includes four activities: 1) ontology requirements specification, 2) ontology implementation, 3) ontology publication, and 4) ontology maintenance. This development methodology is named Linked Open Terms (LOT) Figure Figure During the ontology implementation phase, the ontology is built using a formal language (OWL) based on the requirements identified in the previous activity.Taking as input the set of requirements collected in the previous activity, the ontology implementation activity is carried out through several sprints. To this end, the ontology developers schedule the ontology development according to the requirements that were identified, and the ontology development team builds the ontology iteratively by implementing only a certain number of requirements in each iteration. The output of each iteration is a new version of the ontology implementation.The main steps of the ontology implementation are as follow:• The conceptualization step that aims to create a semantic model from the identified requirements. • The encoding step interests in the implementation of the ontology in an implementation language such as OWL. • The evaluation step aims to evaluate the ontology before its online publication. The development of the ontology must guarantee that the developed ontology is consistent, does not have syntactic, modelling, or semantic errors, fulfils the requirements scheduled for the ontology.During the ontology publication phase, the ontology development team provides an online ontology that is accessible both as a human-readable document and as a machine-readable file from its Uniform Resource Identifier (URI).During the ontology maintenance phase, the ontology is updated, and new requirements can be proposed to be added to the ontology. Furthermore, during this activity, the ontology development team, together with domain experts and users, can identify and correct errors in the ontology. The main steps of this phase are the correction of a detected bug or update of the ontology when a new requirement or a modification were proposed. Ontology governance
While in it important to have a well stablished methodology for building ontologies, in many organizations or projects involving many domains and diverse use cases, it is also of paramount importance to define a governance model to ensure common practices, principles and rules among ontology stakeholders. This is the case of the AURORAL project in which many domains are involved in the different use cases and the ontologies should be use used and may be extended by open call participants. The term governance was firstly introduced for data-oriented projects as: the exercise of authority and control (planning, monitoring and execution) over the management of data assets According to this framework data governance covers a set of principles and best practices related to diverse activities such as: data architecture, data modelling, data storage, data security, data integration and interoperability, data quality, metadata, data warehousing, reference and master data, and documents and content. Based on these definitions we could say that ontology governance aims to manage the various components involved in the ontology development process through a set of principles and best practices.Regarding governance models for ontologies there exist different models such as GOMO, OBO, and IOF. A description of these models is given below:GOMO: BASF company has proposed a Governance Operational Model for Ontologies called "GOMO" • Principles: Set of high-level fundamental rules on how the organization should develop, publish, maintain, and consume ontologies. They provide a general framework, a basis for the other elements (in GOMO the standards, best practices, etc.). • Standards: Set of specifications that are to be followed when developing, publishing and maintaining ontologies. Each one is supplied with a Quality and Assurance criteria to allow human or software-based evaluation of whether that standard has been implemented correctly. Examples: Naming conventions, what are the formats that must be used in the ontology, how MUST/SHOULD the IRIs be structured, all the ontologies must include certain human-readable documentation components, etc. • Best practices: Set of recommendations and guidelines that explain and illustrate how to follow the principles and implement the standards during the ontology development process.OBO: A list of 14 principles has been defined Here are some examples of these principles: The ontology must be openly available, the ontology is available in a common formal language, the ontology has textual definitions for its classes and properties, among others.IOF: To build the Industry Ontology Foundry (IOF) Proposed Governance model
In this section, we propose a model for the AURORAL ontology governance. Our model is composed of a set of roles, principles and best practices to ensure good management of the ontology development process. It should be noted that the proposed governance model is aligned to the previously defined methodology for building the ontologies. In the next sections we first introduce the defined principles, then the best practices defined for each principle and finally we introduce the roles considered during the governance model.Principles
By analysing existing governance models (GOMO, OBO, IOF) for building ontologies the following 15 principles have been defined for the AURORAL governance model:1. Scope and context: The ontology scope and context should be clearly defined before the ontology development process, that is, each ontology should be based on a well-stablished use case.Textual definitions:
The ontology must provide textual definition of the requirements and all ontology elements (concepts, properties, individuals, etc.).Ontology architecture:
The ontology architecture should be specified, including the level of generalisation of the ontology to be developed: top-level ontologies, general or crossdomain ontologies and domain ontologies.Common format:
The ontology should be encoded using standard languages such as OWL or RDF(S). 5. Modularity: The ontologies should be developed following a modular approach in accordance with the domains and scopes addressed. 6. Naming conventions: The ontology should follow the defined guidelines for ontology elements (concepts, properties, individuals, etc). 7. Knowledge reuse: The ontology should reuse existing ontologies, standards or knowledge sources whenever available. 8. Ontology quality: The ontology should meet quality criteria like coverage based on requirements, use of correct modelling decisions and lack of errors (semantic, syntactic, coherence, consistency). 9. URI and namespace: The ontology modules should have a unique and persistent URI. 10. Availability: The ontology should be openly available on the web in human and machinereadable formats. 11. Maintenance: The ontology development team should stablish and follow ontology maintenance processes and activities. 12. Versioning: A version strategy should be defined for the ontology versions and releases. Best Practices
For each principle, a set of best practices were defined. These best practices are detailed below:1. Scope and context: o Stablish meetings between the ontology development team and use case owners to discuss and clearly define the scope and context.Textual definitions:
o Use a competency question or a natural language sentence to define the requirements. o Add human oriented identifiers (rdfs:label) and definitions (rdfs:comment) for all ontology elements.Ontology architecture:
o Analyse the ontology scope and requirements to identify the architecture layer in which the ontology to be developed fit.o Analyse whether existing ontologies should be extended or generalized according to the needs. Roles
During the existing governance models analysis 8 roles were identified for the AURORAL governance model. Table Use case expert
• Gather data about use cases and send it to the decision maker, the manager and the ontology developers.• Formatting the data in an understandable format and language Pilots Domain experts• Participate in meetings with the ontology developers to discuss the data and explain the domain terminology and the use case.• Validate the model if it covers the domain knowledge or not.• Suggest updates for the model.Experts from the pilots
Software developers
• Participate in meetings with the ontology developers to discuss the use of the ontology in the software and explain the needs from the software regarding the ontologies. Ontology development infrastructure
This section describes the ontology development infrastructure used to support the activities in the ontology development process described above.Infrastructure to Support the Requirements Specification Activity
The ontology development team used spreadsheets to store the requirements per use case. These requirements were reorganized per domain and converted into an HTML file and uploaded to the AURORAL ontology portal with the most relevant information for users to facilitate the visualization. Figure Infrastructure to Support the Ontology Implementation Activity
To support the implementation activity, the ontology development team uses several tools to edit, store, and evaluate the ontology.• For the ontology edition, the ontology development team uses Chowlk [26] and Protégé The development team uses the OnToology Infrastructure to Support the Ontology Publication Activity
To support the publication activity, the ontology development team creates an ontology portal online to make the ontology and all the associated information (repository, requirements, tests, releases, etc.) available to users. This ontology portal has different sections:• Ontologies • Ontologies testingOntologies
The Ontologies section, which is the main section of the portal, shows the main information about the ontologies created in the AURORAL ontology network. The section follows a tabular approach that includes the following:• Link to the ontology documentation published on the Web.• Ontology Description • HTML description of the requirements identified by the domain experts.• Link to each GitHub repository • Links to each GitHub issue tracker • Link to ontology releases page • Link to a list of payloads involved in the data exchange for AURORAL project.Figure Ontologies Testing
The section on Ontologies testing was based on different proposed tools such as the Ontology Pitfall Scanner! (OOPS!) OOPS! allows the detection of potential pitfalls that could lead to modelling errors. These pitfalls are classified into three distinct categories: minor pitfalls, important pitfalls, and critical pitfalls. Minor pitfalls are issues that do not pose serious problems. Important pitfalls indicate that, even if they are not critical, it is crucial to deal with them. On the other hand, critical pitfalls are likely to affect the consistency of the ontology and therefore it is imperative to address them. Figure Infrastructure to Support the Ontology Maintenance Activity
To provide support for maintenance activity, ontology developers use the GitHub issue tracker, which manages and maintains the list of issues identified by domain experts and ontology developers. The GitHub issue tracker provides the status of the issue, assignee, and description and allows one to add comments to the issue to discuss it. Each issue tracker is associated with a GitHub repository and, consequently, with an ontology in the AURORAL ontology network.To manage changes in the ontology, all new proposals and improvements must be agreed upon by all members of the ontology development team. If domain experts, users, or ontology developers wish to add, delete, or modify concepts in the ontology, they must create a new issue in the GitHub issue tracker associated with the ontology to be modified, which will be used to discuss the approval or rejection of the proposal.As a result, 57 issues were created in the issue tracker, with the core ontology and adapters having the highest number of issues, with 19 questions for the core ontology and 29 for the adapters ontology.Figure Overview of the AURORAL ontology network
The goal of Task T4.1 is to develop the AURORAL ontology network by adapting existing semantic data models and ontologies for the rural environment. This ontology will be used throughout the different components of the AURORAL environment and the different actors that will consume and produce data.The AURORAL ontology network will be based on existing data models and ontologies. Therefore, before the AURORAL ontology network is developed, a review of existing data models and ontologies to be reused has been performed. The following list enumerates the data models and ontologies considered relevant for the initial version of the AURORAL ontology network:• W3C Thing Description (TD) Ontology • W3C ODRL Information Model 2.2 • Ontology of units of Measure (OM) • Smart Appliances REFerence Ontology (SAREF) • Geospatial Ontology (Geo) • Friend Of A Friend Ontology (FOAF) • Lexvo • Hypermedia Controls Ontology (Hctl) • Time ontology • Geonames ontology • Tmjourney ontology • dcat ontology Thirteen ontologies have been developed and published in the AURORAL project. These include the AURORAL Core ontology, AURORAL Privacy ontology, AURORAL Tourism ontology, AURORAL Adapters ontology, AURORAL Biomass ontology, AURORAL Logistic ontology, AURORAL Marketplace ontology, AURORAL Energy ontology, AURORAL Car-booking ontology, AURORAL Mobility ontology, AURORAL Farming ontology, AURORAL Cell-tower ontology, and AURORAL Ev-charger ontology. Figure • Plain arrows with white triangles represent the subclass relationship between two classes.The origin of the arrows is the class to be declared as a subclass of the class at the destination of the arrow. • Plain arrows between two classes indicate that the object property has declared as domain the class in the origin and as range the class in the destination of the arrow. The identifier of the object property is indicated within the arrow.• Dashed labelled arrows between two classes indicate that the object property can be instantiated between the classes in the origin and the destination of the arrow. The identifier of the object property is indicated within the arrow. • Dashed arrows with the identifiers between stereotype signs (i.e., "<< >>") refer to OWL constructs that are applied to some ontology elements, that is, they can be applied to classes or properties depending on the OWL construct being used. • Dashed arrows with no identifier are used to represent the rdf:type relation, indicating that the element in the origin is an instance of the class in the destination of the arrow.Datatype properties are denoted by rectangles attached to the classes, in a UML-oriented way. Dashed boxes represent data type properties that can be applied to the class to which it is attached, while plain boxes represent that the domain of the datatype property is declared to be the attached class.For more details on the graphical notation used in diagrams in this and next sections, readers are invited to refer to Chowlk's visual notation The prefixes, and corresponding ontologies, created and reused in the AURORAL ontology are listed in Table Core Ontology
This section presents an overview about the core ontology. The final conceptual model defined for this ontology is shown in Figure The main classes and properties of this module are the following:• core:Organisation: is defined as an entity comprising one or more users; core:Organisation is a subclass of org:Organisation in order to reuse its properties. In AURORAL, an organization also has its own properties according to the requirements and its relation to core:Node, core:Notification, core:Audit, and core:User. The core:Organisation class is related also to other external classes, which are geo:SpatialThing and foaf:Image. • core:Notification is defined as the act of reporting a message to a set of users. This class has its own properties according to the requirements and is related to core:Organisation and core:User. • core:Node: is defined as the way to organise the users into distinct groups. It has the properties needed to meet the defined requirements and is related to core:Item. • core:User is defined as a person who belongs to an organisation. This class has its own properties, in order to accomplish the defined requirements, and is a subclass of foaf:Person. The core:User class is related to core:Role, core:Organisation, core:Audit, core:Node, core:Item, and to the external class foaf:Image. • core:Role is defined as the function assumed by a user inside the organisation. This class has as subclasses the different role types, which can be core:Dev_Ops, core:Admin, core:Dev_owner, core:User, core:Super_user, core:Service_provider, core:Infrastructure_operator, and core:System_integrator. • core:Item is defined as the physical object that is part of a list of things; core:Item is a subclass of wot:Thing and has two subclasses, core:Device and core:Service. • core:Audit is defined as the examination and evaluation of the organisations or users.• core:service: is defined to represent the services of the Auroral project. It has several data properties such as provider, version, number of downloads, etc... It is linked to the lexvo:Language concept with the lexvo:language relationship to specify the language of the service provided. • core:Domain: is defined to identify the different domains of the service. Six domains are considered in the Auroral project, namely tourism, health, energy, mobility, dairy farming and bicycle economy. • core:Sensor: is defined to specify the sensor deployed in the Auroral project.• core:Actuator: is defined to represent the actuator deployed in the Auroral project. Figure • core:TypeService: is defined to specify the type of service: a service could be a commodity service or not commodity. • core:Readability: presents the readability of a measurement. Privacy Ontology
The AURORAL privacy ontology aims to model the privacy for the AURORAL project. A list of 7 requirements The final conceptual model defined for this ontology module is depicted in Figure • priv:Policy: is defined as a principle of action adopted by a core:Item.• priv:Rule: is defined as the specification of the state of the policy. It has two subclasses, priv:Permission and priv:Prohibition. The rule has a target (priv:RuleTarget) and an action (priv:Action). • priv:Action: is defined as the action to be taken by the policy. The priv:Action class has two members: priv:Accessibility and priv:Visibility. • priv:RuleTarget: is defined as the specification of which users are the target of the policy (in this case, priv:Friends or priv:All).Figure 13 -General overview of the main classes and properties of the AURORAL Privacy ontology
H2020-DT-2020-1 AURORAL -Architecture for Unified Regional and Open digital ecosystems for Smart Communities and wider Rural Areas Large scale applicationTourism Ontology
The AURORAL tourism ontology aims to model the tourism-related data for the AURORAL project. A list of 19 requirements The conceptual model defined for the Tourism ontology module is depicted in Figure • tour:Activity: is defined as an activity. The activity has a location, defined by geo:Point, a language, defined by dc:LinguisticSystem, has an image, a difficulty, defined by tour:Difficulty and is posted to a channel, defined by the class tour:Channel. • tour:Channel: Each activity is posted to a channel. Channels are usually used to group activities by theme (restaurants, tours, things to do, etc). • tour:Price: is the cheapest price for the activity. It's related to tour:Currency, indicating the currency (euros, dollars, etc). • tour:Difficulty: is defined as the difficulty of an activity or a tour. It can be very easy, easy, medium, hard, or very hard. • tour:Tour: is defined to determine that an activity can be a tour through the relation tour:hasTour with the class tour:Activity. • tour:Event: is defined to determine that an activity can be an event through the relation tour:hasEvent. • tour:Currency: is defined as the currency of the activity price (euros, dollars, etc...).• tour:Emotion: is defined to present the users emotions about an activity: These emotions are: agree, disagree, and neutral. Adapters Ontology
The adapters ontology developed for the AURORAL project aims to model the data related to adapters for the AURORAL project. To develop this ontology, a set of 51 requirements [49] was captured. These requirements are classified according to the type of the device. These requirements were identified from different use cases suggested by different pilots, mainly the pilot from Portugal and the pilots from Norway (Halogaland Health and Tourism). In addition, a set of 126 tests were proposed to evaluate it The main classes and properties of this module are the following:• adapters:Device: is designed to realize a specific task. This task can be a detection of an occurred event or the initiation of an action. It has two sub-classes (sensor and actuator). • adapters:Sensor: responds to a stimulus, e.g., a change in the environment, or input data composed from the results of prior observations and generates a result. Sensors detect diverse properties defined by the object properties "saref:measuresProperty" with the range domain the saref:Property concept. It has several sub-classes (adapters:FloodSensor, adapters:EnergyMonitor, adapters:Motionsensor, etc.). o adapters:FloodSensor: is designed for detection of water leaks or detecting excessively high-water levels. It has attributes like the identifier and the battery level. o adapters:EnergyMonitor: is used to track and control real time energy use. It has different properties such as the returned energy, the total returned energy, etc. o adapters:MotionSensor: a motion sensor (or motion detector) is a device that is designed to detect and measure movement. o adapters:HumiditySensor: is a device that detects and measures water vapor in its environment and converts its findings into a corresponding electrical signal. o adapters:Thermometer: a thermometer is a device used to measure temperature. o adapters:GPSEmergencyButton: is a device used to detect the exact location of a specific thing or object. The detected data is the longitude, latitude, altitude, and the acceleration. o adapters:WaterAMR sensor: It sends data about the accumulated value of water in the current timestamp. o adapters:WeatherSensor: Is a component of an automatic weather station that detects the presence of hydrometers and determines their type (rain, snow, drizzle, etc.) and intensity. It detects data about the temperature, the humidity, the solar irradiation, the pressure, and the rain. o adapters:AmbientProperty: it groups the ambient properties that are detected by the deployed devices. These properties are the ambient temperature, the ambient humidity, the ambient flood, the ambient wind, and the ambient solar radiation properties, the precipitation, the weather, the noise, the visibility among others… o adapters:SpaceProperty: describes properties related to space such as the GPS latitude, the GPS altitude, the GPS longitude, the X-axis acceleration, the Y-axis acceleration, the Z-axis acceleration, the distance, etc. o adapters:EnergyProperty: this concept groups the properties related to energy such as: the battery level, the total returned energy, the total energy, the power factor, the grid voltage, and so one. o adapters:MotionProperty: it is about the motion and the vibration properties. o adapters:LightProperty: it describes the properties about luminance. o adapters:Sound: it defines the noise level properties. o adapters:Pressure: provides information about the pressure properties (for example the atmospheric pressure). o adapters:rain: refers to the accumulated precipitation. o adapters:SoilMoisture: presents the soil moisture: height and volume. o adapters:CarbonDioxide: regroups measurement about the CO2 concentration. o adapters:HealthProperty: presents properties related to the health of the person such as systolic blood pressure, diastolic blood pressure, protein, pulse rate and so on... Figure Biomass Ontology
The biomass ontology presents the characteristics of biomass. A set of 19 requirements [51] was captured. The requirements for biomass characteristics are taken from the Spain Pilot use case. In addition, a set of 23 tests The main concepts of the Biomass ontology are the following.• biom:Biomass: defines the biomass (for example the Briquette) and their properties such as the unique identifier, the name, the trading Form, the dimension, etc. • biom:BiomassOrigin: is proposed to identify the source of the biomass. It has as data property the identifier and a description. The BiomassOrigin is linked to the BiomassGroup, BIomassSubGroup, BiomassType, and BiomassSubType, in the object properties hasGroup, hasSubGroup, belongsToType, hasSubType respectively. • biom:BiomassGroup: identifies the group to which a biomass belongs. According to ISO/FDIS 17225-1, there are five groups: woody biomass, herbaceous biomass, fruit biomass, aquatic biomass, and the group of mixtures and blends. • biom:BiomassSubGroup: specifies the main subgroups to which a biomass can belong. Each group for the four groups mentioned above is composed of subgroups. Taking the WoodyBiomass group as an example, it is composed of the following subgroups (forest plantation and other virgin wood, by products and residues from wood processing industry, used wood, and blends and mixtures). This concept is related to the Biomass concept with the relation hasSubGroup. • biom:BiomassType: determines the type of biomass. Each subgroup of each group is composed of various types. For example, the used wood sub-group of the woody biomass group has three types: the chemically untreated used wood, the chemically treated used wood, and the blends and mixtures. It is linked to the BiomassOrigin class with the relation belongsTo.• biom:BiomassSubType: it specifies the subtypes of each type of biomass.For example, the type chemically, untreated used wood has three sub-types: Without bark, with bark, and bark. This class is related to the BiomassOrigin through the relation hasSubType. • biom:Humidity: determines the humidity of the biomass.• biom:Ashes: presents the biomass ashes. Ash is the residue after combustion.• biom:Quantity: it specifies the quantity of a biomass. There are four types of quantities namely: total quantity, current quantity, bought quantity, sold quantity. • biom:BoughtPerGroup: Bought quantity is classified according to the subGroup of biomass.This class is defined to present the group of each sub-quantity. • Biom:SoldPerGroup: Sold quantity is classified according to the subGroup of biomass. This class is defined to present the group of each sub-quantity. • biom:SoldQuantityPerCaliber: Sold quantity is classified according to the caliber and the trading form: This class is related to the Trading form and the Caliber to present this information. • biom:TradingForm: defines the trading form of a biomass or a sold quantity.• biom:Caliber: defines the caliber for each sold quantity of biomass. For reasons of clarity, Figure To describe the hierarchy between biomass group, subgroup type and subtype, the SKOS ontology was reused by defining the skos:broader and skos:narrower between these classes.To specify that one concept has a more generic meaning than another, the relation skos:broader is used. For example, to represent that biom:WoodyBiomass is more generic than biom:PlantationandForest, the relationship skos:broader is defined as follows: biom:PlantationandForest skos:broader biom:WoodyBiomass.To specify that one concept has a more specific meaning than another, the skos:narrower relation is used.  The main concepts and relations between the concepts of the Biomass shipment ontology.• ship:Product: This concept specifies the product that will be delivered like for example the Biomass. • ship:Shipment: This concept defines the main information of the shipment process namely the identifier and the created time. • ship:Company: This concept describes the company of the product that is delivered.• ship:ShipmentUpdate: This concept tracks the updates in the product status during the shipment process. It has data properties like the identifier, the time update and the type. • ship:Transportation: This concept determines the means of transport of the product is shipment. • ship:Storage: determines the storage location in delivery during shipment update.• ship:StoragePile: means any outdoor storage on a source's property of material. Every storage has a storage pile. • ship:Document: This concept specifies the document where the shipment update is reported.• ship:DocumentType: This concept specifies the type of the used document to report the shipment update of the product. • Ship:address: specifies the pickup and the delivery address of a shipment • Ship:time: specifies the pickup and the delivery time of a shipment • core:User: reused from the core module to defines the engaged users in the logistic process:There are two types of users: the sender and the receiver. • ship:Price: determines the buyer and the seller price of a shipment.• ship:Currency: determines the currency of a price.  Marketplace Ontology
This section presents an overview of the AURORAL marketplace ontology, explaining and defining its main classes. To develop the Marketplace ontology, a set of 8 requirements [55] was captured. These requirements were taken from a use case provided by the Spain Pilot. In addition, a set of 6 tests [56] were defined to evaluate it.The main concepts and relations between the concepts of the Marketplace ontology are:• market:Seller: determines the seller of a given product.• market:Product: determines the product on a marketplace.• market:Customer : determines who is the customer of a given product.• market:Stock : determines the quantity of a product in a stock.• market:Category: determines the category of a product on a marketplace.  Energy Ontology
This section presents an Overview about the Energy module. To develop the energy ontology, a set of 16 requirements [57] was captured. Requirements about energy ontology were identified based on a use case provided by the Sweden Pilot. In addition, a set of The main concepts and relations of the Energy ontology are described below:• saref:FeatureofInterest: This concept is reused to determine the energy collected for each feature of interest. In this ontology, the building and its municipality are the features of interest. • saref:Property: This concept determines the total energy consumption and intensity of energy use in a given building. For this need, the adapters:Energy concept was reused from the adapters ontology. • om:UnitOfMeasure: This concept determines the unit of the data collected, which can be watt, kilowatt, etc. • energ:SourceEnergy: It specifies the source of the collected energy, of which there are five.    Mobility Ontology
This section presents an overview of the AURORAL mobility module, explaining and defining its main classes. To develop the mobility ontology, a set of 18 requirements [61] was captured. These requirements were taken from a use case provided by the Austria Pilot. A set of 21 tests [62] were defined to evaluate the mobility ontology. IThe main concepts and relations of the mobility ontology are described below. This ontology reuses diverse concepts from the transmodel vocabularies [28] that is related to the transport systems.  Farming Ontology
This section presents an overview of the AURORAL Farming module, which presents information about the dairy production of cows. To develop the farming ontology, a set of 14 requirements [63] were taken from a use case provided by the Italian Pilot. A set of 20 tests The main concepts and relations of the farming ontology are described below.  The main concepts and relations of this ontology are described below.• core:Device presents information about a physical device. In this context the device is the cell:CellTower.  The main concepts and relationships of this ontology are described below.• ev:EvCharger: presents the related information of the electrical vehicle (ev) charger device.• ev:DataProvider: defines the data provider of the ev-charger.• book:Address: this concept is reused from the car-booking ontology to present the address of the ev-charger that belongs to a country and has a geographical point. • ev:UsageType: defines the usage type of the ev-charger.• cell:Operator: defines the information related to the operator of the ev-charger. This concept is reused from the cell-tower ontology.  Conclusion
This document describes the methodology and technological infrastructure used to create the AURORAL ontology network. In addition, it proposes a governance model designed to guarantee the interoperability, discoverability and comprehensibility of the ontologies developed. The governance model includes fundamental principles and best practices that guide the entire process of creating the AURORAL ontology network.The AURORAL ontology network comprises thirteen modules that have been described along this document including the existing ontologies being reused during the AURORAL ontology network development. These modules have already been designed, implemented and published in various versions as can be observed online in the AURORAL ontology portal.The "core" and "privacy" modules are at a more generic level than the other modules. The core ontology contains general information about the users, organizations, services, devices, etc. that are considered in the project. The privacy ontology models needed information to allow the confidentiality of data exchanged via the auroral platform. The adapters module contains information on the sensors used and their properties in various use cases. The other modules are more specific and are defined for a particular use case.To ensure that the modules developed cover all the necessary requirements, a set of tests was developed. Themis was used to carry out this evaluation. In addition, to ensure that the ontology is well established, OOPS! was used to detect any pitfalls during ontology implementation. In addition, a set of payloads was defined for each module to facilitate understanding and use.Figure 1 - 11 Figure 2 - 16 Figure 3 -
Figure 2 -
Figure 3 -
Figure 4 -
Figure 5 -
Figure 6 -
Figure 7 -
Figure 8 -
Figure 9 -
Figure 10 -
15 Figure 11 -
15 Figure 12 -
Figure 14 -
Figure 16
Figure 16 -
Figure 17
Figure 17 -
Figure 18
Figure 18 -
Figure 19
Figure 19 -
Figure 20 -
•
Figure 21 -
•
Figure 22 -
Figure 23 -
Figure 24 -
4. Common format:Table 1 -
Reference: AURORAL_D4.1 Dissemination: Public Version 0.15Table 2 -