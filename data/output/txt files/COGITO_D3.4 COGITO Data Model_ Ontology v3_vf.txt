Executive Summary
The COGITO Digital Twin platform aims to enable interoperability with existing and emerging standards and data models covering different domains. Semantic interoperability in the COGITO platform is based on ontologies that will be exploited throughout the COGITO infrastructure and used to semantically represent the information exchanged. This document details the methodology and technological infrastructure used to develop the COGITO ontology network, as well as the third version of the ontologies that make up such an ontology network.The followed methodology is called Linked Open Terms The COGITO ontology network consists of seven modules corresponding to the facility (the construction itself), the construction process, the construction resources, the IoT devices used to locate resources, the quality achieved, the safety information related to the facility, and the entities managed by the digital twin platform (digital twins and information resources). These modules have already been conceptualised, implemented, and published and will be modified and complemented with new modules as the project progresses.During the maintenance phase of the ontology development process, which will start after this deliverable is submitted, we expect future change requests in the ontologies due to defects found or to new requirements that may appear during integration. The COGITO ontology portal will serve as a living repository for the different ontologies and will contain the latest version of the developed ontologies and all related artifacts. Note: Since the methodology and infrastructure followed are the same as those described in in the previous versions of the COGITO Data Model and Ontology Definition and Interoperability Design (See D3.2 COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdel     List of Figures
List of Tables
Scope and Objectives of the Deliverable
The COGITO Digital Twin platform aims to enable interoperability with existing and emerging standards and data models covering different domains. Semantic interoperability in the COGITO platform is based on ontologies that will be exploited throughout the COGITO infrastructure and used to semantically represent the information exchanged.In computer science, ontologies are defined as "formal, explicit specifications of a shared conceptualization". The COGITO ontologies have been developed using the W3C Web Ontology Language standard (OWL) This deliverable describes the environment that supports the development of the COGITO ontologies. To do so, on the one hand, it describes the methodology followed to develop the ontologies and the ontology development infrastructure deployed to support such development. On the other hand, it presents the results of the different ontology development sprints. Finally, this document presents an overview of the current version of the COGITO ontologies that are available online on the COGITO ontology portal. Relation to other Tasks and Deliverables
This deliverable is based on the use cases defined in D2.1-Stakeholder Requirements for the COGITO System The COGITO ontology network described here will allow for sharing and interoperability among the different components of the COGITO architecture, especially in the communications with the Digital Twin platform. Because of this, this document has been so important when developing each component of the COGITO architecture, that is, the results of work packages 4, 5, 6, and 7 and their integration in work package 8.Updates from the Previous Version
This deliverable is the third one devoted to the development of the COGITO ontologies. As in the previous version of the deliverable (v2), the sections related to the ontology development methodology and the development infrastructure are identical (sections 3 and 6, respectively) and the main changes compared to the previous versions of the deliverable are the following.• The introduction and conclusions of the document have been updated.• Section 3 has been updated, including the new requirements gathered for the COGITO ontology since the previous version of the deliverable. • Section 4 has been updated to include the current description of the ontology that includes the new requirements. • The section related to the coverage analysis in D3.2-COGITO Data Model and Ontology Definition and Interoperability Design v1 COnstruction phase diGItal Twin mOdel coverage analysis, are the reasons of not performing the coverage analysis for the new ontology requirements that have been gathered.Structure of the Deliverable
• Section 2 provides an overview of the methodology used to develop the COGITO ontologies;• Section 3 presents the requirements that should be satisfied by the COGITO ontologies;• Section 4 provides a description of the COGITO ontologies;• Section 5 presents the deployed ontology development infrastructure; and• Section 6 provides some conclusions and insights into future work.COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdelOntology Development Methodology
This section presents the ontology development methodology used for the development of the COGITO ontology network. This methodology includes four activities: 1) ontology requirements specification, 2) ontology implementation, 3) ontology publication, and 3) ontology maintenance. This development methodology is called Linked Open Terms (LOT) Figure Figure 1 -Ontology development methodology followed in COGITO
Ontological Requirements Specification
The aim of the requirements specification activity is to identify and define the requirements the ontology to be created needs to fulfil. During this first activity, it is necessary to involve experts in the domain to generate the appropriate industry perspective and knowledge. Figure COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdel Identification of Purpose and Scope
The goal of this step is to define the purpose and scope of the given ontology or module. To this end, the ontology development team works in collaboration with users and domain experts to define the purpose and scope of each ontology or module to be developed.Data Exchange Identification and Use Case Specification
During this step, the ontology development team needs to gather the necessary documentation about the domain to be modelled. This documentation might correspond to the following.This documentation needs to be collected by both the ontology development team and domain experts.Ontological Requirement Proposal
Taking as input the documentation and the data provided by domain experts and users, the ontology development team generates a first proposal of ontological requirements written in the form of Competency Questions or assertions.The format used for this requirement proposal follows a tabular approach and includes the following fields:• Requirement identifier, which must be unique for each requirement.• Partner who proposed the requirement.• Component of the COGITO architecture from which the requirement was extracted.• Sprint in which the requirement is planned to be implemented.• Competency question or assertion.• Status of the requirement, which can be: (1) Proposed, (2) Accepted, (3) Rejected, (4) Pending, or (5) Deprecated. • In case the requirement is deprecated, the identifier of the updated requirement is used.• Comments on the requirement.• Provenance of the requirement, e.g., use case or standard.• Priority of the requirement, which can be: (1) High, (2) Medium, or (3) Low.COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdel
The ontological requirements are completed iteratively, as the following ontology development process is incremental.Completion and Validation of Ontology Requirements
During this activity, domain experts and users, in collaboration with the ontology development team, validate whether the ontology requirements defined in the previous step are correct and complete.Prioritization of Ontological Requirements
Prioritization of requirements allows development teams to schedule the development of the ontology in sprints. In the COGITO project, this prioritization will be performed if there is a need to prioritise functional requirements, mainly for those sprints with a high number of requirements in which the implementation of some of the requirements has to be postponed for a future sprint.If this prioritisation is needed, to carry it out, the ontology development team works with the domain experts to identify which requirements need to be fulfilled first.Ontology Implementation
During the implementation activity, the ontology is built using a formal language based on the requirements identified in the previous activity.Taking the set of requirements collected in the previous activity as input, the ontology implementation activity is carried out through several sprints. To this end, the ontology developers schedule the ontology development according to the requirements that were identified, and the ontology development team builds the ontology iteratively by implementing only a certain number of requirements in each iteration. The output of each iteration is a new version of the ontology implementation. Figure Ontology Conceptualization
The aim of this activity is to build an ontology model from the ontological requirements identified in the requirements specification process that represents the domain of the ontology. Therefore, during the COGITO -GA ID. 958310COnstruction phase diGItal Twin mOdel conceptualization of the ontology, the domain knowledge obtained from the previous activity is organized and structured into a model by the ontology development team.Ontology Encoding
The purpose of the encoding activity is to implement the ontology in an implementation language such as OWL. The ontology code resulting from this activity includes, in addition to the ontology classes, properties, and axioms. Furthermore, following the FAIR principles To manage the ontology versions developed in the COGITO project, the following version convention was adopted. Following this convention, each release will follow the pattern v.major.minor.fix, where each field follows the rules:• major: The field is updated when the ontology covers the entire domain that it intends to model. That is, it is a complete product and covers the final goal of the development.• minor: The field is updated when:o All the requirements of a subdomain are covered. o Documentation is added to the ontology. • fix: The field is updated when:o Typos or bugs are corrected in the ontology. o Classes, relationships, axioms, individuals, or annotations are added, deleted, or modified, but the domain is not covered. In each iteration, the minor and fix fields might be changed from zero to several times.Ontology Evaluation
Once the ontology is encoded, it should be evaluated before its online publication. The development of the ontology must guarantee the following aspects:• The ontology is consistent.• The ontology does not have syntactic, modelling, or semantic errors.• The ontology fulfils the requirements scheduled for the ontology, to ensure that the ontology is completed regarding the domain experts needs.Ontology Publication
During the ontology publication activity, the ontology development team provides an online ontology that is accessible both as a human-readable document and as a machine-readable file from its URI. Figure COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdel Propose Release Candidate
Once the ontology developers have implemented and evaluated the ontology, the next task is to decide whether the current version is going to be published on the Web (or shared among other project partners, for example, software developers making use of the ontology) or whether it is needed to document such version of the ontology for any other reason (for example, a set of requirements is fulfilled and triggers a new release). In this case, the version at hand becomes a release candidate. In case the ontology is not selected as a release, the ontology development team generates a pre-release version of the ontology. Both the release and the pre-release versions of the ontologies are evaluated and ready to be used.Ontology Documentation
Taking the ontology generated in the previous activities as input, the ontology development team generates the ontology documentation. This documentation includes the following:• An HTML description of the ontology that describes the classes, object properties, and data properties of the ontology, the license URI, and title being used. Domain experts must collaborate with the ontology development team to describe classes and properties. This description also includes metadata such as creator, publisher, date of creation, last modification, or version number. It also includes links to different formats for serialization of the ontology, such as TTL, JSON-LD, or RDF/XML. • Diagrams that store the graphical representation of the ontology, including taxonomy and class diagrams.Online Publication
During this activity, the ontology, which should already be validated and documented, is published on the Web. This ontology is accessible through its URI as a machine-readable and human-readable file using content negotiation.Ontology Maintenance
During this activity, the ontology is updated, and new requirements can be proposed to be added to the ontology. Furthermore, during this activity, the ontology development team, together with domain experts and users, can identify and correct errors in the ontology. Figure COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdel Bug Detection
Once the ontology developers have published the ontology, any user, developer, or domain expert can detect and inform about bugs. This notification should be done using an issue tracker, allowing all the information related to the bug, as well as the actor that identifies it, to be stored.New Requirements Proposal
During this activity, new requirements can be proposed for the ontology. Ontology developers, domain experts, or users can propose modifications to improve the published ontology version. This proposal should be done through an issue tracker so that all the information related to it is stored.COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdelOntology Requirements Specification
Since the goal of the ontology is to facilitate the sharing and interoperability of data between COGITO components through the Digital Twin Platform (see Table Several meetings with the partners involved in the components and each use case have helped us specify requirements that are aligned with the needs of those components. These requirements have been organised into seven different domains related to the facility, the construction process, the resources used in that process, the Internet of Things information processed by the platform, the quality of the resulting facility, the safety information related to it, and the entities (digital twins and information resources) managed by the digital twin platform. Table Table 1 -General information on the specification of ontology requirements
Purpose
To facilitate data sharing and interoperability among the COGITO components through the Digital Twin PlatformScope
Limited to the data shared among the COGITO components through the Digital Twin PlatformImplementation language
Web Ontology Language (OWL)Intended endusers
COGITO components and application developers COGITO end users and stakeholders
Non-functional ontology requirements
Annotated in English Linked to standards when possible Open license Available online Functional ontology requirements Detailed information on the COGITO ontology portal
FACI-9
An element can have other elementsFACI-10
Spatial zones include sites, facilities, facility parts, storeys and spacesFACI-11
Spatial zones include tracked zones (used by tags) and construction zones (which can be walkable or fall zones) FACI- FACI-13
An element has an identifier, a name and the material used to build it A type of resource has an identifier, a name, the maximum quantity and a cost per hour RESO-5A resource has an identifier and a statusRESO-6
Human workers can have an email, and pieces of equipment can have a nameRESO-7
Resources can have a tracking tag assignedRESO-8
A resource can have a tracking tagIOT-1
A tracking tag signals its location (and hence that of the resource to which it is assigned)IOT-2 A tracking tag signals its location along with the corresponding timestamp
IOT-3
There are three kinds of location a tracking tag can signal: location locationKF and locationMAQUAL-1 A project can have information resources (especially point cloud and image jobs)
QUAL-2
An element can have information resources (especially as-built point clouds and meshes) QUAL-3An element can have results about its qualityQUAL-4
Quality results include defects and geometric quality information QUAL-8
An image is taken at a time, using a device with a certain position and orientation and is associated to an element QUAL-9An image can be processed before and after being analysedQUAL-10
Geometric quality information is obtained from a point cloudQUAL-11
A piece of geometric quality information is related to a rule and includes a result (passed or not passed), a tolerance reference, a scalar result, a unit, a scheduled timestamp, a performed timestamp and an identifierQUAL-12
A rule includes an identifier, an origin document, a label, a description, and keywords related to element, material, and relationship types.SAFE-1
A construction zone can be related to safety information SAFE
Overview of the COGITO Ontology Network
The ontology network developed for the COGITO project consists of two parts. One part contains six ontology modules, where each module corresponds to one specific domain, namely facilityFigure 6 -Overview of the COGITO ontology network
Coloured boxes are used to represent modules currently implemented, while white boxes represent reused terms from existing ontologies. As can be seen, some of the ontologies reviewed in previous steps of the project were reused according to the results of the process described in Section 4, such as BOT and SAREF. Since the COGITO ontology only needs some IFC concepts in order to achieve interoperability, and ifcOWL is a very complex ontology, we decided to first define the main concepts of the COGITO ontology and then analyse their alignment to the IfcOWL ones (see Annex A). It should be noted that the ifcOWL version we have used is the official one, which corresponds to IFC 4.0.2.1. Some concepts relevant to COGITO, such as facility, are inspired by the IFC 4.3.0.0 ones, but have not been implemented yet in ifcOWL.Additional cross-domain ontologies, such as geo and dcterms, were also reused once requirements and conceptualizations were analysed in detail. The prefixes, and corresponding ontologies, created and reused in the COGITO ontology are listed in Table The main hierarchies between concepts are also included and ad hoc relations between different modules and within modules are also present. Arrows are used to represent these properties between classes and to represent some RDF, RDFS, and OWL constructs. More precisely:• Plain arrows with white triangles represent the subclass relationship between two classes. The origin of the arrows is the class to be declared as a subclass of the class at the destination of the arrow.• Plain arrows between two classes indicate that the object property has declared as domain the class
in the origin, and as range the class in the destination of the arrow. The identifier of the object property is indicated in the arrow. • Dashed labelled arrows between two classes indicate that the object property can be instantiated between the classes in the origin and the destination of the arrow. The identifier of the object property is indicated in the arrow. • Dashed arrows with the identifiers between stereotype signs (i.e., "<< >>") refer to OWL constructs that are applied to some ontology elements, that is, they can be applied to classes or properties depending on the OWL construct being used. • Dashed arrows without identifiers are used to represent the rdf:type relation, indicating that the element in the origin is an instance of the class in the destination of the arrow.Datatype properties are denoted by rectangles attached to the classes, in a UML-oriented way. Dashed boxes represent datatype properties that can be applied to the class it is attached to, while plain boxes represent that the domain of the datatype property is declared to be the class attached.For more details about the graphical notation used in this diagram, you can check the Chowlk Visual NotationThe complete and up-to-date documentation of each ontology module is provided online, as explained in Section 3. In the rest of this section, only the main concepts and modelling decisions are detailed.COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdelFacility Module
The current conceptual model defined for the Facility module is shown in Figure The classes and properties used to describe the topological concepts of a building in this module are based on the Building Topology Ontology (BOT), while other construction products, such as railways, bridges, and roads, are described by new classes and properties.• facility:Project is defined as a large or major undertaking, especially one involving considerable money, personnel, and equipment. A facility:Project is related to a facility:Site. • facility:SpatialZone is defined as a subclass of bot:Zone and, as such, a part of the physical or a virtual world that is inherently both located in this world and has a 3D spatial extent. This class is the root of a hierarchy that includes facility:ConstructionZone, used to represent zones that are relevant for the Health and Safety module, and facilityTrackedZone, used to represent zones that are relevant for the IoT preprocessing module. It is also the root of another hierarchy that includes facility:Site, facility:Facility, facility:FacilityPart, facility:Storey, and facility:Space. • facility:Site is defined as a subclass of bot:Site and, as such, a part of the physical world or a virtual world that is inherently both located in this world and having a 3D spatial extent. It can contain (facility:hasFacility) one or more facility:Facility. • facility:Space is defined as a subclass of bot:Space and, as such, a part of the physical world or a virtual world whose 3D spatial extent is bounded actually or theoretically and provides for certain functions within the zone it is contained in. • facility:Facility is defined as something designed and built to serve a specific function that provides a convenience or a service. This new class includes facility:Railway, facility:Bridge, facility:Road, and facility:Building. • facility:FacilityPart is defined as something that is usually contained (facility:hasFacilityPart) in a facility:Facility. A facility:FacilityPart can contain other facility parts (facility:hasFacilityPart). • facility:Storey is defined as a subclass of bot:Storey and, as such, is contained (bot:hasStorey) in a facility:Building and is intended to contain (bot:hasSpace) one or more facility:Space that are horizontally connected. • facility:Element is defined as a subclass or bot:Element and, as such, a constituent of a construction entity with a characteristic technical function, form, or position. A facility:Element can contain subelements (bot:hasSubElement). A facility:SpatialZone can contain (bot:hasElement) some facility:Elements. A beo:BuildingElement is a subclass of facility:Element. Its facility:material property is considered when processing visual quality.The BOT subclasses have been created because they have specific properties such as rdfs:label and dcterms:identifier. They are also subclasses of geo:SpatialObject in order to reuse its location properties.COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdel Process Module
The current conceptual model defined for the Process module is depicted in Figure • process:Process is defined as a series of actions aimed at accomplishing some result (in this case, related to a facility:Project). A process:Process can correspond to a process:AsPlannedOriginalProcess, a process:AsPlannedEnrichedProcess, or a process:AsIsProcess.• process:Task is defined as a piece of work, which is performed in a process:Process (process:belongsTo); and can perform different actions (process:addsElement, process:removesElement, process:repairsElement, or processcontrolsElement) to a facility:Element depending on the type of task (process:GeometricQualityTask, process:VisualQualityTask, process:SafetyTask and process:ConstructionTask). A process:Task can have information about its planned and actual duration (process:plannedStartDate, process:plannedEndDate process:actualStartDate, and process:actualEndDate). We can include the process:status and the process:progress of a process:Task. A task can require (process:hasResourceTypeRequirement) several process:ResourceTypeRequirement including the process:quantityNeeded for a resource:ResourceType.• process:Cost is defined as the price paid to acquire, produce, accomplish, or maintain anything (in this case, process:Process and process:Task); this price is measured (process:measuredIn) in a currency (process:UnitOfCurrency). • process:WorkOrder is defined as a command or instruction authorizing specific work, repairs, etc. to be done. It has a main provider (resource:hasMainProvider), which is a resource:HumanWorker, and belongs to (process:hasWorkOrder) a process:Process. It is important to know if a process:WorkOrder is completed (process:status).COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdel Resource Module
The current conceptual model defined for the Resource module is shown in Figure • resource:Resource is defined as a source of supply, support, or aid, especially one that can be readily drawn upon when needed. resource:HumanWorker, resource:Equipment and resource:trackingTrack are subclasses of resource:Resource. It is also a subclass of geo:SpatialObject in order to reuse its location properties. A resource:Resource belongs to a resource:ResourceType and can be assigned (rersource:hasTrackingTag) an iot:TrackingTag. • resource:ResourceType is defined as the kind of resource assigned to a process:Task or involved in a process:Process, indicating their maximum quantity (resource:maxUnit) and cost (resource:costPerHour). resource:HumanRole, resource:EquipmentType are subclasses of resource:ResourceType.COGITO -GA ID. 958310
COnstruction phase diGItal Twin mOdel IoT Module
The current conceptual model defined for the Internet of Things (IoT) module is shown in Figure • An iot:TrackingTag is defined as a subclass of saref:Device and, as such, a tangible object designed to accomplish a particular task; in this case, signalling its location (iot:LocationMeasurement), which refers (iot:hasLocation, iot:hasLocationKF, and iot:hasLocationMA) to a geo:Point. Quality Module
The current conceptual model defined for the Quality module is shown in Figure • qual:Defect is defined as a shortcoming, fault, or imperfection regarding a particular facility:Element. This qual:Defect is associated to a qual:ImageJob, which can be related to three qual:Image (qual:hasRawImage, qual:hasProcessedImage, qual:hasResultImage). qual:Image includes data regarding its capture device, position, orientation, and performed time. This section describes the ontology development infrastructure used to support the activities in the ontology development process described above.Infrastructure to Support the Requirements Specification Activity
First, the ontology development team used spreadsheets to store requirements per component. An excerpt of these requirements is shown in Figure Conclusions
This document details the methodology and technological infrastructure used to develop the COGITO ontology network, as well as the third version of the ontologies that make up such an ontology network. The development of these ontologies has been aligned with the gathering of requirements and the specification of the COGITO architecture.The current version of the COGITO ontology network (see Figure In D3.2 The COGITO ontology network allows for the sharing and interoperability among the different components of the COGITO architecture, especially in the communications with the Digital Twin platform. That is why this document has been so important when developing each component of the COGITO architecture, that is, the results of work packages 4, 5, 6, and 7, and their integration in work package 8.During the maintenance phase of the ontology development process, which will start after this deliverable is submitted, we expect future change requests in the ontologies due to defects found or to new requirements that may appear during integration. The COGITO ontology portal will serve as a living repository for the different ontologies and will contain the latest version of the developed ontologies and all related artifacts.COGITO -GA ID. 958310COnstruction phase diGItal Twin mOdel
Annex A IfcBuilding
A building represents a structure that provides shelter for its occupants or contents and stands in one place. The building is also used to provide a basic element within the spatial structure hierarchy for the components of a building project (together with site, storey, and space). IfcElement
An element is a generalization of all components that make up an AEC product.Elements are physical existent objects, although they might be void elements, such as holes. Elements either remain permanently in the AEC product or only temporarily, as formwork does.Sub-class facility:Facility
Is defined as something designed and built to serve a specific function providing a convenience or a service. facility:FacilityPart Is defined as something that is contained (facility:hasFacilityPart) in a facility:Facility. A facility:FacilityPart can contain subfacility parts (facility:hasSubFacilityPart).facility:Project
Is defined as a large or major undertaking, especially one that involves considerable money, personnel, and equipment.IfcProject
IfcProject indicates the undertaking of some design, engineering, construction, or maintenance activities leading towards a product. The project establishes the context for information to be exchanged or shared, and it may represent a construction project but does not have to.Different concepts facility:Site
A part of the physical world or a virtual world that is inherently both located in this world and having a 3D spatial extent.IfcSite
A site is a defined area of land, possibly covered with water, on which the construction of the project is to be completed. A site may be used to erect, retrofit, or turn down building(s), or for other construction related developments. facility:Space Is defined as a subclass of bot:Space and, as such, a part of the physical world or a virtual world whose 3D spatial extent is bounded actually or theoretically and provides for certain functions within the zone it is contained in.IfcSpace
A space represents an area or volume that is actually or theoretically bounded. Spaces are areas or volumes that provide certain functions within a building. A space is associated with a building storey (or in the case of exterior spaces with a site). A space may span several connected spaces. Therefore, a space group provides for a collection of spaces included in a storey.Sub-class facility:SpatialZone
Is defined as a subclass of bot:Zone and, as such, a part of the physical or a virtual world that is inherently both located in this world and has a 3D spatial extent. This class is the root of a hierarchy that includes facility:ConstructionZone, used to represent zones used by the Health and Safety module, and facilityTrackedZone, used to represent zones used by the IoT preprocessing module.IfcSpatialZone
A spatial zone is a nonhierarchical and potentially overlapping decomposition of the project under some functional consideration. A spatial zone might be used to represent a thermal zone, a construction zone, a lighting zone, or a usable area zone. A spatial zone might have an independent placement and a shape representation.ifcZone
A zone is a group of spaces, partial spaces, or other zones. Zone structures may not be hierarchical (in contrary to the spatial structure of a project -see IfcSpatialStructureElement),i.e. one individual IfcSpace may be associated with zero, one, or several IfcZone's.Related concetps facility:Storey
Is defined as a subclass of bot:Storey and, as such, is contained (bot:hasStorey) in one facility:Building and is intended to contain (bot:hasSpace) one or more facility:Space that are horizontally connected.IfcBuildingStorey
The building storey has an elevation and typically represents a (nearly) horizontal aggregation of spaces that are vertically bound. A storey is (if specified) associated to a building.Sub-class
process:Cost
Is defined as the price paid to acquire, produce, accomplish, or maintain anything (in this case, process:Process and process:Task); and this price is measured (process:measuredIn) in a currency (process:UnitOfCurrency).IfcCostSchedule
The IfcCostSchedule may have assignments of its own using the IfcRelAssignsToControl relationship, where RelatingControl refers to the IfcCostSchedule and RelatedObjects contains one or more objects.IfcCostItem: Indicates costs published within this cost schedule, typically a single root cost item forming a hierarchy of nested cost items.Different concepts process:Process
Is defined as a series of actions aimed at accomplishing some result (in this case, related to a facility:Project).IfcProcess
IfcProcess is defined as one individual activity or event that is ordered in time, that has sequence relationships with other Different concepts COGITO -GA ID. 958310COnstruction phase diGItal Twin mOdel
Is defined as a shortcoming, fault, or imperfection regarding a particular facility:Element.qual:GeometricQualityInformation
Is defined as data informing a particular problem regarding a particular qual:Rule on a facility:Element.resource:Equipment
Is a subclass of resource:Resource used to assist in the performance of an activity (process:Task).IfcConstructionEquipmentResource
IfcConstructionEquipmentResource is the usage of construction equipment to assist in the performance of construction. Construction equipment resources are consumed entirely or partially or occupied in the performance of construction.Sub-class resource:EquipmentType
Is defined as the different kinds of construction equipment.ifcConstructionEquipmentResourceType
The resource type IfcConstructionEquipmentType defines commonly shared information for occurrences of construction equipment resources. The set of shared information may include: common productivities, common cost rates, or common properties within shared property sets. It is used to define a construction equipment resource specification (the specific information about the resource that is common to all occurrences of that resource). Resource types may be exchanged without being already assigned to occurrences.Sub-class resource:WorkerRole
Is defined as the different kinds of roles a human worker can play in a construction project.IfcLaborResourceType
The resource type IfcLaborResourceType defines commonly shared information for occurrences of labour resources. The set of shared information may include: common productivities, common cost rates, or common properties within shared property sets. It is used to define a labour resource specification (the specific resource information that is common to all occurrences of that resource). Resource types may be exchanged without being already assigned to occurrences.Sub-class resource:Worker
Is defined as a person who works on a construction project.IfcLaborResource
An IfcLaborResource is used in construction with particular skills or crafts required to perform certain types of construction or management related work. The purpose of an IfcLaborResource is to identify a skill set that may be required or used.Sub-class resource:Resource
IfcConstructionResource Sub-classFigure 2 -
Figure 3 -
Figure 4 -
Figure 5 -
QUAL- 5 A
Figure 7 -
Figure 8 -
Figure 9 -
Figure 10 -
Figure 13 -COGITO
Figure 14 -
Figure 15 -
Table of Contents
List of Figures ...958310 COnstruction phase diGItal Twin mOdel
2 Ontology Development Methodology ................................................................................................................................ COGITO -GA ID. 958310 COGITO -GA ID.958310 COnstruction phase diGItal Twin mOdel
Figure 14 -COGITO ontology requirements for PMS ........................................................................................................... Figure 15 -HTML requirements for the construction process ........................................................................................ Figure 16 -Ontology section in the COGITO ontology portal ........................................................................................... Figure 17 -Example of the GitHub issue tracker ................................................................................................................... COGITO -GA ID.Table 1 -
Table 2 -
Table 3 -
Table 4 -
Table 5 -
COGITO -GA ID. 958310 COnstruction phase diGItal Twin mOdel List of Acronyms and Abbreviations Term Description
Table 2 -List of requirements per domain Identifier (domain+id) Competency Question / Fact
COGITO Data Model and Ontology Definition and Interoperability Design v3 20 COGITO -GA ID. 958310 COnstruction phase diGItal Twin mOdel
Table 5 -Relations between the main classes of the COGITO ontology and ifcOWL
https://www.w3.org/TR/owl2-primer/https://cogito.iot.linkeddata.es/Note that this module was called "construction" in D3.2https://chowlk.linkeddata.es/chowlk_spechttps://protege.stanford.ehttps://github.com/orgs/oeg-upm/teams/cogitohttps://ontoology.linkeddata.es/https://github.com/dgarijo/Widocohttp://oops.linkeddata.es/