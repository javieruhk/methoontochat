Introduction
Since the late 1990s, several ontology engineering methodologies have been proposed to transform the art of developing ontologies into an engineering activity. Methodologies such as METHON-TOLOGY Now that ontologies are being increasingly adopted in information systems, it is clear that ontology development tasks may also benefit from the application of common software engineering practices. Most of the ontology development support activities, such as documentation, visualization and evaluation, are usually performed individually, executing heterogeneous tools that make these activities cumbersome and time consuming. In addition, maintaining and keeping track of the generated resources for each version of an ontology has become a challenge for ontology developers.The ontology engineering community has already shown progress towards adapting ontology development to agile software development methodologies In this paper we present OnToology, our approach towards addressing these issues. The main contributions of OnToology are:(1) automation of coarse-grained support activities involved in ontology development, including documentation, versioning, evaluation and publication of ontologies that are maintained and versioned in a Git-based environment; (2) a workflow for continuous integration of support activities when new changes in the ontology are registered ; and (3) integration of the workflow with a collaborative environment. OnToology can support individuals and teams of developers working on an ontology. While distributed collaboration to change an ontology is naturally supported by Git, the required support activities have to be integrated into Git's lifecycle.OnToology is a web-based system that integrates a set of existing tools for documentation, evaluation and publishing. By the time of writing this paper, OnToology has been used to produce the documentation, visualizations and evaluation of more than 100 projects and for the online publication of over 50 ontologies.The paper is structured as follows. In Section 2, we describe a typical scenario we encounter during ontology development and the collection of requirements induced from it. Section 3 describes the structure of OnToology, user interaction, and the details of the generated resources. Section 4 presents the evaluation of our approach. A review of the related work is provided in Section 5. Section 6 concludes and presents future lines of work.Motivation scenario
In this section we illustrate a typical scenario that motivated the development of OnToology, based on the authors' years of experience developing ontologies and common use cases reported in state of the art ontology development methodologies Consider a team of ontology developers that are generating an ontology network in a particular domain. In order to build each ontology, the developers need to interact with domain experts that are not necessarily familiar with semantic technologies or ontologies. Therefore, such domain experts need visualizations and a human readable documentation to understand the taxonomy and relations included in a vocabulary, and assess whether it addresses their requirements. Once they conclude their assessment, they provide feedback to the ontology development team, which incorporates it in a new version/release of the ontology and starts a new documentation process.Ontology developers also need to evaluate the quality of the generated ontologies during their development process, so as to identify potential errors before making them public as a new release. Due to the parallel development of the ontology network by different ontology developers, the team needs to make any quality report public to all its members, so they are aware of any potential issue with any published ontology.When a version of the ontology network is ready to be released, the ontology development team needs to publish the ontologies online following best practices (i.e., content negotiation of the ontology in different standard formats and permanent URIs Once the target ontologies are built and published, data producers may ellaborate a JSON-LD contextSystem requirements
Based on the above scenario, we have collected the following set of general requirements to address it, which are later tackled by the features provided by OnToology in Section 4:R1. Ontology Documentation: Ontology adopters often require human-readable documentation of developed ontologies with a definition of their classes, properties, and individuals; including figures illustrating its main structure.R2. Automatic change-based resource generation: Automatically produced files (e.g., HTML documentation, figures of ontology visualizations, quality reports) need to be updated every time a new change in the ontology is registered.R3. Coexistence with non-ontological resources: Automatically generated resources may reside within a given code repository without affecting the rest of the files in the project (e.g. source code).R4. Compatibility with a collaborative workflow: Users often work with each other to develop ontologies, discussing issues and recording the reached consensus. Any tool or instrument designed to help them should be integrated within their workflow in a nonintrusive manner. For an adequate collaboration between multiple users, it is also required to control who is able to view and/or contribute to the project.R5. Versioning: It is crucial to record changes between ontology versions and track the evolution of the ontology with the option to revert to an older version is required.R6. Publication: When released, an ontology version must follow best practices for ontology publication 3 with appropriate content negotiation (i.e., HTML for humans, RDF for software agents) and updating its respective JSON-LD context if required. Publication of the ontology under a permanent URI is also required in some cases to ensure its long-term accessibility.R7. Evaluation: Before publishing an ontology, it is crucial to detect potential modeling errors System description
In order to address the set of requirements introduced in Section 2, we have designed OnToology, 4 an open source web application that monitors changes in ontologies stored in a Git repository and triggers a series of actions for supporting the ontology development process. These actions include: (1) generation of customized documentation, diagrams and evaluations for each of the ontologies contained in a repository, according to a configuration set for each ontology; (2) generation of a landing page containing basic descriptions of the ontologies included in the repository as well as a dedicated web page per ontology with extended descriptions and metadata; and (3) publication of the ontology under a w3id permanent URI. 5  OnToology is based on existing technologies and best practices from both the software and ontological communities. We have integrated it with GitHub, one of the most popular hosting platforms for version control and collaborative development. GitHub serves as the main online infrastructure to maintain ontology versions as they are being developed and publish their associated resources. In addition, GitHub provides the ability to open issues and maintain discussions over a certain modeling decision, while giving the usual support to the rest of artifacts, processes, discussions, etc.In this section we introduce the main features of OnToology, the user interaction with the system, and the main results that are produced.System architecture
As depicted in Fig. The Presentation Layer exposes a web-based GUI, which allows for registering GitHub repositories. Given a repository, each ontology may be individually configured (enabling/disabling the automatic generation of resources).The Logic Layer serves as the glue for integrating the different tools and services that compose OnToology. We can distinguish three main modules in this layer: the Change Monitor, Orchestration service, and the Integrator.The Change monitor acts as a monitoring service for keeping track of changes in a GitHub repository. The Orchestration service controls the main actions of the system, and decides when to invoke the different tools integrated in the OnToology suite. Finally, the Integrator module is responsible for the execution of processes,  implemented within OnToology or third party applications. In this sense, the Integrator module handles the following functionalities:• Documentation, including several resources generated by different tools. First, it generates an ontology HTML documentation, supported by the integration of WIDOCO • Evaluation, by means of OOPS! [15],• Publication, providing different features following ontology publication best practices. OnToology allows users to reserve a name for their ontology with a permanent URI following the scheme https://w3id.org/def/<user-chosen-name>. OnToology uses the w3id services to point to the location of the published ontology and its resources with content negotiation.Alternatively, OnToology allows downloading a publicationready bundle containing all the resources needed to publish an ontology on a custom server.• JSON-LD context, generated using owl2jsonld The Persistence Layer maintains an internal database for storing information about users and repositories, as well as the current status of the repositories (i.e., the progress while processing ontologies in a given repository). This allows users to be aware of the pending actions to be performed by OnToology (e.g., generating the documentation or diagrams, validating the ontology, etc.).User interaction with ontoology
OnToology is accessible through a web interface, which requires no installation and allows configuring which actions are triggered for each ontology.Fig. After this, users can edit their ontology and once the changes are pushed to the GitHub repository, OnToology is notified through the corresponding webhook. A fork of the tracked repository will be created by OnToology and used as the working repository. The system then generates the appropriate files for all monitored ontologies, and pushes the changes to the forked repository. Finally, OnToology creates a pull request from the forked repository to the user's one in GitHub, including the new version of all the generated files. The user can then review the pull request and decide whether to accept it and merge it to the GitHub repository.In most cases users need to customize some parts of the HTML documentation generated by OnToology, such as the ontology release date or additional information about the changes made. Once the resources have been produced and customized, users may want to publish the ontology online. Two different scenarios may occur:• It is the first time the ontology is being published. The user can choose between: (i) publishing the ontology under a permanent URL using OnToology to handle the publication, or (ii) downloading a bundle containing the HTML documentation; ontology serializations; and an .htaccess file to handle the content negotiation in a server controlled by the user.• If the ontology is already published, the user can choose between: (i) re-publishing the ontology under the same permanent id, or (ii) downloading a new bundle from OnToology web user interface for publication.Generated resources
All resources generated by OnToology will be located in the tracked GitHub repository under a new folder called ''OnToology'', which includes a folder per ontology in the repository. Each ontology folder contains: (1) a documentation folder with the HTML documents divided by sections to facilitate their editing, (2) an evaluation folder with HTML-based report describing different pitfalls found in the ontology, (3) a diagrams folder containing depictions of the ontology with their source files for further customization. A detailed example of the resources generated by OnToology for a given vocabulary can be found in Appendix. OnToology is available as a web service, and its code has been released online Evaluation
In this section we describe the validation of the system based on the coverage of the requirements presented in Section 2. Next, we introduce and discuss the results of a user survey we conducted, studying the usefulness, ease of use, ease of learning and satisfaction with the system. Finally, we present the community uptake and the adoption of OnToology in various ontology development projects.Requirement validation
The requirements for supporting ontology evaluation are covered by the integration of OOPS!, which produces a report including basic structural, semantic and best practices checks for an ontology (R7). The documentation of the ontology is produced by the combination of WIDOCO, VocabLite and AR2DTool (R1). The generation of these resources (e.g. documentation and evaluation) is triggered automatically after each ontology change (R2). With OnToology, users can contribute collaboratively to a registered repository (if they have the appropriate permission) and resources will be generated automatically as users push new changes to the repository (R4). The resources generated by OnToology will not interfere with other existing resources (e.g. source codes, readme files, etc.) as they are stored in a separate folder called ''OnToology'' in the top level of the repository (R3). OnToology supports the publication process by exporting a single bundle that a user can retrieve as a snapshot for publishing the ontologies, and if desired, OnToology enables the content negotiation of an ontology release, and publishes the files online with persistent URLs (R6).OnToology benefits from a Git-based existing infrastructure that is widely used among the software development community (GitHub). This infrastructure supports several of the requirements presented in Section 2, such as having distinct roles for collaboration, and providing access to discussion channels by using discussion boards where users can reply and share their thoughts about a given design decision (R4). GitHub also allows for tracking the releases of an ontology and records how users contribute to a project with release tags (R5).User-based evaluation
We have conducted an evaluation process, collecting user feedback by means of an open call to the community of OnToology users. It should be mentioned that none of the participants received training or guidance on how to use OnToology beforehand in order to avoid bias towards the tool.Users were asked to evaluate their interaction with OnToology, in terms of usefulness of the tool, its usability and overall satisfaction. In order to collect their feedback we have developed an online questionnaire, adapted from the USE Questionnaire (usefulness, satisfaction, and ease of use) The questionnaire and all the collected results, both raw and aggregated values, are available online. As part of the evaluation form we also included three open questions, asking the users about whether they have used other similar tools before and about the most negative and positive aspects of OnToology. Most of the users reported that they had not used any tool in this context. Regarding the negative aspects, most respondents stress the need for better documentation and a more informative interface (e.g., The ''publish ontology'' feature is quite hidden), which aligns with the ease of learning and usability scores obtained in our survey. Among the most positive aspects, users generally state that OnToology implements interesting features, saving them time when dealing with supporting activities, being fast and ''automatizing boring tasks'', without having to install or set up any environment.Overall, we can consider that, based on the obtained results, OnToology addresses successfully user needs, listed in Section 2, being useful when carrying out the support activities related with ontology development.Community uptake
Since OnToology was announced 9 and at the time of writing this paper, a total of 113 repositories containing more than 530 ontologies have been added to OnToology, 10 including projects from different knowledge domains such as energy, e-Science, smart cities, etc. Examples of these projects are OpenCityData, 11 BOT 12  or Eiffel. 13  Statistics of user activity in OnToology 14 indicate that the bundle download option has been used 29 times, while the ontology publication feature has been activated in 57 occasions. Thanks to this feature, the HTML documentation of ontologies hosted by OnToology has been accessed 843 times, while the different serializations of their RDF code have been requested 382 times.As these statistics show, OnToology has been and still is used and helpful for users on the tasks related to publication of their ontologies, as most of them tend to publish their ontology using OnToology rather than downloading the corresponding bundle. More examples on the adoption of OnToology in different projects can be found in OnToology website. 15   Related work
In recent years, different systems have been developed to support collaborative ontology development. One of the most 9 https://lists.w3.org/Archives/Public/public-vocabs/2015Jul/0003.html. 10 http://ontoology.github.io/OnToology/journalofwebsemantics/#ontologies. 11 https://github.com/opencitydata. 12 https://github.com/GeorgFerdinandSchneider/bot. 13 https://github.com/hartig/eiffel-rdf-vocabularies.    well-known tools is WebProtégé Neologism Table Conclusions and future work
In this paper we have described OnToology, an approach for automating ontology engineering support activities including documentation, evaluation and publication. OnToology considers ontologies as a first class citizen in software development projects and provides means for their continuous integration. OnToology is built on top of GitHub, integrating a suite of existing tools and services to support different ontology development scenarios.  We have evaluated OnToology in terms of usefulness, usability and ease of use with a user survey, which has provided positive feedback regarding usefulness of and satisfaction with the tool. Whereas the study suggests that the interface could be improved in terms of usability, results show that the system is useful and that its features are relevant in the context of ontology development. Users value especially the features related to documentation and publication, as well as the ability to release their ontologies using OnToology features, without having to set up their own infrastructure.Regarding future work, we are now integrating OnToology with other Git-based platforms more commonly used for private projects, such as Bitbucket 16 or GitLab. 17 We plan on adding reasoning capabilities to notify the user on potential inconsistencies in a configurable way. We also plan on integrating OnToology to publish ontologies with Linked Open Vocabularies Finally, in order to improve the usability and learning curve of OnToology, we are currently improving tutorials and the GUI of the system. For this task, we pay special attention to user suggestions collected in our GitHub project. 18 Following this idea, and while    keeping OnToology editor-agnostic, we plan to integrate the system with popular editors such as Protégé, allowing users to manage the version-release cycle directly while editing an ontology.Appendix. OnToology: a running example
In this section we present a running example of an actual ontology developed by a subset of the authors of this paper. We show the steps that we followed using OnToology, accompanied with snapshots capturing the state of the tool.1. Register the repository: We add the repository albaizq/smartlamppost to OnToology via the web interface (Fig. Fig. 1 .
Fig. 2 .
Fig. 3 .
Fig. 4 .
Fig. 5 .
Fig. 6 .
Fig. 7 .
Fig. 8 .
Fig. 9 .
Fig. 10 .
Fig. 11 .
Fig. 12 .
Fig. 13 .
Table 1
Table 2
a Supported by AR2DTool. g Supported by Git. h Supported by GitHub. j Supported by OWL2JSONLD. o Supported by OOPS! v Supported by VocabLite. w Supported by Widoco.https://www.w3.org/TR/json-ld/.http://graphml.graphdrawing.org/.http://oops.linkeddata.es/.http://ontoology.github.io/OnToology/journalofwebsemantics/ #questionnaire.